#! /bin/bash
# lfs-install - minimal system installation
# Copyright (C) 2023 Beloglazov Mark <justaguy3331@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
set -eu
# Color codes for texts
success="\e[0;96m" # High intensity cyan
warning="\e[0;93m" # High intensity yellow
error="\e[0;91m"   # High intensity red
info="\e[0;97m"    # High intensity white
default="\e[0m"    # White unless you modify the default shell color

# Read the arguments for lfs-install
args=$(getopt -a --options d:hjks:l --long "debug:,help,one-job,keep-going,save-file:,license" -- "$@")
if [ $? -ne 0 ]; then
  echo "Run 'lfs-install -h' or 'lfs-install --help' for usage."
  exit 1
fi
eval set -- "$args"

while true; do
  case "$1" in
# -d <var> --debug <var>
# a - print everything
# b - only print current stage of installation
# v - print which scripts and Makefile recipes were invoked and when they exited
# j - print which sub-commands were invoked and when they exited
# p - print which directories were invoked
# n - print no debugging information
  -d|--debug)
    case "$2" in
      xv)
        set -xv
      ;;
      vx)
        set -vx
      ;;
      x)
        set -x
      ;;
      v)
        set -v
      ;;
      n)
        set +vx
    esac
    shift 2;;

# -h --help
  -h|--help)
    echo "Usage:"
    echo " lfs-install [-d <opt_debug>] [-h] [-j] [-i] [-k] [-s <filename>] [-l]"
    echo ""
    echo "Install Linux From Scratch to a desired drive."
    echo ""
    echo "Options:"
    echo " -d, --debug <opt_debug>    filter debug messages by a desired level"
    echo " -h, --help                 display this help and exit"
    echo " -j, --one-job              do not use 'make -j\$(nproc)' option while building, should be used for debugging"
    echo " -k, --keep-going           keep going if any error happens, very dangerous option"
    echo " -s, --save-file <filename> define a filename or path to save file, or start with a new save file"
    echo " -l, --license              show script license"
    echo ""
    echo "The 'opt_debug' argument can be:"
    echo "'vx' or 'xv' (a combination of the two below),"
    echo "'x'          (print every command with command substitutions and variable expansions),"
    echo "'v'          (print every command as they're executed),"
    echo "'n'          (print no debugging information, default mode)."
    echo ""
    echo "The 'filename' argument can be a path to existing savefile, or a path to a new one."
    echo "lfs-install will prompt user for creating new file (recursively) if it doesn't exist"
    echo "while also informing of nonexistent directories."
    exit 0;;

# -j --one-job
  -j|--one-job)
    opt_one_job=1
    shift 1;;

# -k --keep-going
  -k|--keep-going)
    opt_keep_going=1
    set +eu
    shift 1;;

# -s <var> --save-file <var>
# Note that this works only if your internal storage is complete.
# If not, the script will store the var and wait.
  -s|--save-file)
    opt_save_file="$2"
    shift 2;;

# -l --license
  -l|--license)
    echo -e "${info}Please note that you can always exit by pressing 'q'.${default}"
    read -p "Press enter to continue."
    less /usr/local/share/doc/lfs-install/LICENSE
    exit 0;;
  --)
    break;;
  esac
done

echo "lfs-install Copyright (C) 2023 Beloglazov Mark <justaguy3331@gmail.com>

This program comes with ABSOLUTELY NO WARRANTY;
for details use '-l' or '--license' options.
This is free software, and you are welcome to redistribute it
under certain conditions; use '-l' or '--license' options for details.
"

# Simple error function to reduce code size
error() {
  echo -e "${error}Error:" $1
  exit 1
}

# Corrupted save file error, '$1' is the save value that is not valid
save-error() {
  echo -e "${error}Error: this save file is corrupted"
  echo -e "(\$$1 is equal to neither 1 or 0).${default}"
  echo -e "${info}You might want to edit the save file using 'nano $opt_save_file'."
  echo -e "Please note that "1" means the stage is done, and "0" means the stage is not done.${default}"
  exit 1
}

# Load save file if it exists
if [ -f $opt_save_file ] && [[ ! -z "$opt_save_file" ]]; then
  source $opt_save_file
  fullsavename=$opt_save_file
  swapon ${savedevice}1                      || true
  if [[ -z "`cat /proc/swaps | grep ${savedevice}1`" ]]; then
    exit 1
  fi
  mount  ${savedevice}2 $savelocation        || true
  if ! mountpoint -q "${savelocation}"; then
    exit 1
  fi
  if [[ -z "$save_build_preparation" ]]; then
    save_build_preparation=0
  fi
  case $save_build_preparation in
    1)
      set +h
      LC_ALL=POSIX
      PATH=/usr/bin
      if [ ! -L /bin ]; then 
        PATH=/bin:$PATH
      fi
      PATH=$savelocation/tools/bin:$PATH
      export PATH LC_ALL
    ;;
    0)
    ;;
    *)
      save-error "save_build_preparation"
  esac
  if [[ -z "$save_virtual_filesystems" ]]; then
    save_virtual_filesystems=0
  fi
  case $save_virtual_filesystems in
    1)
      mkdir -pv $savelocation/{dev,proc,sys,run}
      mount -v --bind  /dev  ${savelocation}/dev
      mount -vt devpts devpts -o gid=5,mode=0620 ${savelocation}/dev/pts
      mount -vt proc   proc  ${savelocation}/proc
      mount -vt sysfs  sysfs ${savelocation}/sys
      mount -vt tmpfs  tmpfs ${savelocation}/run
      if [ -h ${savelocation}/dev/shm ]; then
        install -v -d -m 1777 ${savelocation}$(realpath /dev/shm)
      else
        mount -vt tmpfs -o nosuid,nodev tmpfs ${savelocation}/dev/shm
      fi
    ;;
    0)
    ;;
    *)
      save-error "save_virtual_filesystems"
  esac
  if [[ -z "$save_chroot" ]]; then
    save_chroot=0
  fi
  case $save_chroot in
    1)
      echo -e "${info}Entering chroot environment..."
      echo -e "You can always exit it by running 'exit' in the chroot shell."
      # A pretty huge chunk of code to decide which options should be passed to lfs-install-chroot
      chroot_options=""
      if [[ -z "$opt_debug" ]]; then
        chroot_options="$chroot_options -d $opt_debug"
      fi
      case $opt_full_save in
        1)
          chroot_options="$chroot_options -f"
      esac
      case $opt_one_job in
        1)
          chroot_options="$chroot_options -j"
      esac
      case $opt_keep_going in
        1)
          chroot_options="$chroot_options -k"
      esac
      if [[ -z "$opt_save_file" ]]; then
        chroot_options="$chroot_options -s ${opt_save_file#$savelocation}"
      fi
      chroot "$savelocation" /usr/bin/env -i             \
                             HOME=/root                  \
                             TERM="$TERM"                \
                             PS1='(lfs chroot) \u:\w\$ ' \
                             PATH=/usr/bin:/usr/sbin     \
                             /bin/bash --login /usr/bin/lfs-install-chroot $chroot_options
    ;;
    0)
    ;;
    *)
      save-error "save_chroot"
  esac
else
  if [[ ! -z "$opt_save_file" ]]; then
    echo -e "${warning}Save file not found, storing the path to possibly create it later.${default}"
  fi
fi

# Check whether the script is being run with sudo privileges
sudocheck=$(whoami)
if [[ -z "$sudocheck" ]]; then
  error "The result of 'whoami' is empty. Perhaps your are running in chroot?${default}"
fi
case $sudocheck in
  root)
    echo -e "${success}Running as sudo (root).${default}"
  ;;
  *)
    error "You must be running this script with sudo (root) privileges.${default}"
  ;;
esac

# Partitioning stage
if [[ -z "$save_partitions" ]]; then
  save_partitions=0
fi
case $save_partitions in
  1)
  ;;
  0)
    echo "Choose a device to format:"
    lsblk -d
    choose-device() {
      read -p "Enter in the name of the device you've chosen:" devdisk
      if [[ -z "`lsblk -d | grep $devdisk | awk '{print $1}'`" || "$devdisk" = "loop0" || "$devdisk" = "sr0" ]]; then
        echo -e "${warning}Please enter a valid device name.${default}"
        choose-device
      fi
    }
    choose-device
    # Defining variables for the next actions
    # 'export' just in case, see line 339 (out of this 'case' scope)
    export parteddevice="/dev/$devdisk"
    if [[ ! -z "`mount | grep $parteddevice`" ]]; then
      echo -e "${warning}Warning: this device has one or more mountpoints.${default}"
      umountbusydevice-func() {
        read -p "Would you like to unmount all the partitions of the device? (Y/n)" umountbusydevice
        if [[ -z "$umountbusydevice" ]]; then
          umountbusydevice=y
        fi
        case $umountbusydevice in
          [Yy])
            umount -v ${parteddevice}?* || true
          ;;
          [Nn])
            exit 1
          ;;
          *)
            umountbusydevice-func
        esac
      }
      umountbusydevice-func
    fi
    partedsize=`parted --script $parteddevice unit MiB print | grep Disk | awk '{print $3}'`
    partedsize=${partedsize::-3}
    partedlfs=`echo "scale=100; $partedsize - 500" | bc -l`
    # Partitioning the internal storage
    # https://wiki.archlinux.org/title/Partitioning
    if [ -d /sys/firmware/efi ]; then
      echo -e "${info}It appears that your machine has UEFI."
      echo    "It is usually used with GPT partition table, however,"
      echo    "there is an older firmware called BIOS, which instead supports only MBR."
      echo    "UEFI can use that partition table for backwards compatibility,"
      echo -e "but this is recommended to pick only if you need support for BIOS machines.${default}"
      partitiontable-func() {
        read -p "Would you like to use MBR partition table? (y/N)" partitiontable
        if [[ -z "$partitiontable" ]]; then
          partitiontable=n
        fi
        decide-swap-size() {
          echo -e "${info}Many machines need a swap partition (roughly pagefile)."
          echo    "Swap partition is a disk space which is used by system when it's out of RAM."
          echo    "It's a secondary storage for processes which is significantly worse by speed."
          echo -e "The total amount of the system's RAM is `free -t -h | grep Total | awk '{print $2}'`B.${default}"
          read -p "Choose the size of the swap partition (at least 5GB of total (RAM + swap) memory is required, IEC (*iB) units are also supported):" swapsize
          if [[ -z "$swapsize" ]]; then
            decide-swap-size
          fi
        }
        case $partitiontable in
          [Yy])
            echo -e "${info}Using MBR partition table.${default}"
            parted --script $parteddevice mktable msdos
            decide-swap-size
            parted --script $parteddevice mkpart  primary  linux-swap 1MiB            $swapsize       || decide-swap-size
            parted --script $parteddevice mkpart  primary  ext4       $swapsize       ${partedlfs}MiB || decide-swap-size
            parted --script $parteddevice mkpart  primary  fat32      ${partedlfs}MiB 100%
          ;;
          [Nn])
            echo -e "${info}Using GPT partition table.${default}"
            parted --script $parteddevice mktable gpt
            decide-swap-size
            parted --script $parteddevice mkpart  lfs-swap linux-swap 1MiB            $swapsize       || decide-swap-size
            parted --script $parteddevice mkpart  lfs      ext4       $swapsize       ${partedlfs}MiB || decide-swap-size
            parted --script $parteddevice mkpart  lfs-efi  fat32      ${partedlfs}MiB 100%
          ;;
          *)
            partitiontable-func
        esac
      }
      partitiontable-func
    fi
    # Formatting the partitions
    # https://wiki.archlinux.org/title/Installation_guide#Format_the_partitions
    mkswap    --verbose ${parteddevice}1
    mkfs.ext4 -v        ${parteddevice}2
    mkfs.fat  -v -F 32  ${parteddevice}3
    if [ ! -z $opt_save_file ]; then
      if [ -f $opt_save_file ]; then
        # Remove all lines containing 'save_partitions'
        echo "`sed '/save_partitions/d' $opt_save_file`" > $opt_save_file
        # Save the progress
        echo "save_partitions=1" >> $opt_save_file
      fi
    fi
    echo -e "${success}Disk successfully partitioned.${default}"
  ;;
  *)
    save-error "save_partitions"
esac

# Save creation stage
if [[ -z "$save_created" ]]; then
  save_created=0
fi
# For improving readability
choose-directory() {
  # To separate the question from mkfs.fat output
  echo    ""
  echo    "Choose a directory to mount $parteddevice to."
  echo -e "${info}Note: if you pick a directory with contents,"
  read -p "'umount ${parteddevice}2' to access them after exiting the script! (/mnt by default):" savelocation
  if [[ -z "$savelocation" ]]; then
    savelocation=/mnt
  fi
}
save-argument() {
# I regret having to write something that big in an if statement
  if [ ! -f $opt_save_file ]; then
    savelocation=`dirname  $opt_save_file`
    savefilename=`basename $opt_save_file`
    if [[ ! -d "$savelocation" ]]; then
      save-argument-invalid() {
        echo -e "${warning}The path you passed in argument does not exist.${default}"
        read -p "Would you like to create it? [yes, no, retry] (y/n/R):" createpath
        if [[ -z "$createpath" ]]; then
          choose-directory
          save-argument
        fi
        case $createpath in
          [Yy])
            mkdir -pv $savelocation
            touch ${savelocation}/$savefilename
            save_created=1
          ;;
          [Nn])
            exitorcontinue-func() {
              read -p "Would you like to exit now or continue running (the script will start over upon next run!) (Y/n)?" exitorcontinue
              if [[ -z "$exitorcontinue" ]]; then
                exit 1
              fi
              case $exitorcontinue in
                [Yy])
                  exit 1
                ;;
                [Nn])
                  echo "Continue running..."
                ;;
                *)
                  exitorcontinue-func
              esac
            }
            exitorcontinue-func
          ;;
          [Rr])
            choose-directory
          ;;
          *)
            save-argument-invalid
        esac
      }
      save-argument-invalid
    fi
    fullsavename=${savelocation}/${savefilename}.sh
    touch $fullsavename
    echo "`sed '/save_partitions/d' $fullsavename`" > $fullsavename
    echo "`sed '/save_created/d'    $fullsavename`" > $fullsavename
    echo "`sed '/savedevice/d'      $fullsavename`" > $fullsavename
    echo "`sed '/savelocation/d'    $fullsavename`" > $fullsavename
    echo -e "savedevice=$parteddevice\nsavelocation=`dirname "$savelocation"`\nsave_partitions=1\nsave_created=1\n" >> $fullsavename
  fi
}
save-argument

case $save_created in
  1)
  ;;
  0)
    choose-directory
    path-check() {
      if [[ ! -d "$savelocation" ]]; then
        save-path-invalid() {
          echo -e "${warning}The path you entered in does not exist.${default}"
          read -p "Would you like to create it? [yes, no, retry] (y/n/R):" createpath
          if [[ -z "$createpath" ]]; then
            choose-directory
            path-check
          fi
          case $createpath in
            [Yy])
              mkdir -pv $savelocation
            ;;
            [Nn])
              exitorcontinue-func() {
                read -p "Would you like to exit now or continue running (the script will start over upon next run!) (Y/n)?" exitorcontinue
                if [[ -z "$exitorcontinue" ]]; then
                  exit 1
                fi
                case $exitorcontinue in
                  [Yy])
                    exit 1
                  ;;
                  [Nn])
                    echo "Continue running..."
                  ;;
                  *)
                    exitorcontinue-func
                esac
              }
              exitorcontinue-func
            ;;
            [Rr])
              choose-directory
              path-check
            ;;
            *)
            save-path-invalid
          esac
        }
        save-path-invalid
      fi
    }
    path-check
    swapon -v ${parteddevice}1
    mount  -v ${parteddevice}2 $savelocation
    read   -p "Pick a name for the save file ('lfs-save' by default):" savefilename
    if [[ -z "$savefilename" ]]; then
      savefilename=lfs-save
    fi
    if [[ -z "$fullsavename" ]]; then
      fullsavename=${savelocation}/${savefilename}.sh
    fi
    if [ ! -f $fullsavename ]; then
      touch $fullsavename
    fi
    # Saving the progress in the save file
    echo "`sed '/save_partitions/d' $fullsavename`" > $fullsavename
    echo "`sed '/save_created/d'    $fullsavename`" > $fullsavename
    echo "`sed '/savedevice/d'      $fullsavename`" > $fullsavename
    echo "`sed '/savelocation/d'    $fullsavename`" > $fullsavename
    echo -e "savedevice=$parteddevice\nsavelocation=`dirname "$savelocation"`\nsave_partitions=1\nsave_created=1\n" >> $fullsavename # write certain variables to save file
    echo -e "${success}Save file successfully created.${default}"
    echo -e "${info}You can run 'lfs-install -s ${fullsavename}' next time to continue where you stopped.${default}"
    read -p "Press enter to continue."
  ;;
  *)
    save-error "save_created"
esac

# Preparing the system stage
if [[ -z "$save_build_preparation" ]]; then
  save_build_preparation=0
fi
case $save_build_preparation in
  1)
  ;;
  0)
    # Chapter 3
    mkdir -pv ${savelocation}/sources
    # Chapter 4
    mkdir -pv ${savelocation}/{etc,var} ${savelocation}/usr/{bin,lib,sbin}
    for i in bin lib sbin; do
      ln -sv usr/$i ${savelocation}/$i
    done
    case $(uname -m) in
      x86_64)
        mkdir -pv ${savelocation}/lib64
      ;;
    esac
    mkdir -pv ${savelocation}/tools
    set +h
    LC_ALL=POSIX
    PATH=/usr/bin
    if [ ! -L /bin ]; then
      PATH=/bin:$PATH
    fi
    PATH=${savelocation}/tools/bin:$PATH
    export PATH LC_ALL
    echo "`sed '/save_build_preparation/d'  $fullsavename`" > $fullsavename
    echo -e "save_build_preparation=1\n" >> $fullsavename
    echo -e "${success}System successfully prepared.${default}"
  ;;
  *)
    save-error "save_build_preparation"
esac

# Cross GNU Binutils installation stage
if [[ -z "$save_cross_binutils" ]]; then
  save_cross_binutils=0
fi
case $save_cross_binutils in
  1)
  ;;
  0)
    binutils_dir=${savelocation}/sources/binutils
    mkdir -pv $binutils_dir
    binutils_repo='https://ftp.gnu.org/gnu/binutils/'
    binutils_latest=$(curl -s "${binutils_repo}" | grep -Eo '(binutils-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${binutils_repo}/$binutils_latest --output ${binutils_dir}/$binutils_latest
    checksum=`sha512sum ${binutils_dir}/$binutils_latest | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/binutils.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $binutils_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$binutils_latest' might have malicious content inside.${default}"
      binutils_invalid_func() {
        read -p "Proceed anyway? (y,N):" binutils_invalid
        if [[ -z "$binutils_invalid" ]]; then
          binutils_invalid=n
        fi
        case $binutils_invalid in
          [Yy])
            echo -e "${warning}Building unsafe (or unstable) GNU Binutils.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            binutils_invalid_func
        esac
      }
      binutils_invalid_func
    fi
    binutils_pkg=$(basename "${binutils_dir}/$binutils_latest" .tar.xz)
    mkdir -pv  ${binutils_dir}/$binutils_pkg
    # How did they happen to not have a 'specify a file to write to' option?
    cd $binutils_dir
    echo -e "${info}Extracting $binutils_latest contents...${default}"
    tar -xf ${binutils_dir}/$binutils_latest
    cd $OLDPWD
    # Build & install
    pushd ${binutils_dir}/${binutils_pkg}
      ${binutils_dir}/${binutils_pkg}/configure --prefix=${savelocation}/tools     \
                                                --with-sysroot=$savelocation       \
                                                --target=$(uname -m)-lfs-linux-gnu \
                                                --disable-nls                      \
                                                --enable-gprofng=no                \
                                                --disable-werror
    popd
    case $opt_one_job in
      1)
        make -C ${binutils_dir}/${binutils_pkg}/
        make -C ${binutils_dir}/${binutils_pkg}/ install
      ;;
      *)
        make -C ${binutils_dir}/${binutils_pkg}/ -j$(nproc)
        make -C ${binutils_dir}/${binutils_pkg}/ -j$(nproc) install
    esac
    echo "`sed '/save_cross_binutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_cross_binutils=1\n" >> $fullsavename
    echo -e "${success}Binutils successfully installed for cross-compilation to '${savelocation}/tools'.${default}"
  ;;
  *)
    save-error "save_cross_binutils"
esac

# Cross GNU Compiler Collection installation stage
if [[ -z "$save_cross_gcc" ]]; then
  save_cross_gcc=0
fi
case $save_cross_gcc in
  1)
  ;;
  0)
    # Obtain GCC source code
    # Some variable will be used later in Target Libstdc++
    export gcc_dir=${savelocation}/sources/gcc
    mkdir -pv $gcc_dir
    gcc_repo="https://ftp.gnu.org/gnu/gcc/"
    export gcc_latest=$(curl -s "${gcc_repo}" | grep -Eo '(gcc-[0-9]+([.][0-9]*)*)+' | sort -V | tail -1)
    curl ${gcc_repo}/$gcc_latest/${gcc_latest}.tar.xz --output ${gcc_dir}/${gcc_latest}.tar.xz
    checksum=`sha512sum ${gcc_dir}/${gcc_latest}.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/gcc.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $gcc_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '${gcc_latest}.tar.xz' might have malicious content inside.${default}"
      gcc_invalid_func() {
        read -p "Proceed anyway? (y,N):" gcc_invalid
        if [[ -z "$gcc_invalid" ]]; then
          gcc_invalid=n
        fi
        case $gcc_invalid in
          [Yy])
            echo -e "${warning}Building unsafe (or unstable) GNU Compiler Collection.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            gcc_invalid_func
        esac
      }
      gcc_invalid_func
    fi
    cd $gcc_dir
    echo -e "${info}Extracting ${gcc_latest}.tar.xz contents...${default}"
    tar -xf ${gcc_dir}/$gcc_latest.tar.xz
    cd $OLDPWD
    export gcc_pkg=$(basename "${gcc_dir}/$gcc_latest" .tar.xz)
    # Obtain GNU Multiple Precision Floating-Point Reliable library (MPFR) source code
    mpfr_dir=${gcc_dir}/${gcc_pkg}
    mpfr_repo="https://ftp.gnu.org/gnu/mpfr/"
    mpfr_latest=$(curl -s "${mpfr_repo}" | grep -Eo '(mpfr-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${mpfr_repo}/$mpfr_latest --output ${mpfr_dir}/mpfr.tar.xz
    checksum=`sha512sum ${mpfr_dir}/mpfr.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/mpfr.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $mpfr_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$mpfr_latest' might have malicious content inside.${default}"
      mpfr_invalid_func() {
        read -p "Proceed anyway? (y,N):" mpfr_invalid
        if [[ -z "$mpfr_invalid" ]]; then
          mpfr_invalid=n
        fi
        case $mpfr_invalid in
          [Yy])
            echo -e "${warning}Building GCC using unsafe (or unstable) GNU MPFR.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            mpfr_invalid_func
        esac
      }
      mpfr_invalid_func
    fi
    cd $mpfr_dir
    echo -e "${info}Extracting $mpfr_latest contents...${default}"
    tar -xf ${mpfr_dir}/mpfr.tar.xz
    cd $OLDPWD
    mpfr_pkg=$(basename "${mpfr_dir}/$mpfr_latest" .tar.xz)
    mv -v ${mpfr_dir}/$mpfr_pkg ${mpfr_dir}/mpfr || true
    # Obtain GNU Multiple Precision arithmetic library (GMP) source code
    gmp_dir=${gcc_dir}/${gcc_pkg}
    gmp_repo="https://ftp.gnu.org/gnu/gmp/"
    gmp_latest=$(curl -s "${gmp_repo}" | grep -Eo '(gmp-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${gmp_repo}/$gmp_latest --output ${gmp_dir}/gmp.tar.xz
    checksum=`sha512sum ${gmp_dir}/gmp.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/gmp.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $gmp_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$gmp_latest' might have malicious content inside.${default}"
      gmp_invalid_func() {
        read -p "Proceed anyway? (y,N):" gmp_invalid
        if [[ -z "$gmp_invalid" ]]; then
          gmp_invalid=n
        fi
        case $gmp_invalid in
          [Yy])
            echo -e "${warning}Building GCC using unsafe (or unstable) GNU GMP.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            gmp_invalid_func
        esac
      }
      gmp_invalid_func
    fi
    cd $gmp_dir
    echo -e "${info}Extracting $gmp_latest contents...${default}"
    tar -xf ${gmp_dir}/gmp.tar.xz
    cd $OLDPWD
    gmp_pkg=$(basename "${gmp_dir}/$gmp_latest" .tar.xz)
    mv -v ${gmp_dir}/$gmp_pkg ${gmp_dir}/gmp || true
    # Obtain GNU MPC source code
    mpc_dir=${gcc_dir}/${gcc_pkg}
    mpc_repo="https://ftp.gnu.org/gnu/mpc/"
    mpc_latest=$(curl -s "${mpc_repo}" | grep -Eo '(mpc-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${mpc_repo}/$mpc_latest --output ${mpc_dir}/mpc.tar.gz
    checksum=`sha512sum ${mpc_dir}/mpc.tar.gz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/mpc.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $mpc_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$mpc_latest' might have malicious content inside.${default}"
      mpc_invalid_func() {
        read -p "Proceed anyway? (y,N):" mpc_invalid
        if [[ -z "$mpc_invalid" ]]; then
          mpc_invalid=n
        fi
        case $mpc_invalid in
          [Yy])
            echo -e "${warning}Building GCC using unsafe (or unstable) GNU MPC.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            mpc_invalid_func
        esac
      }
      mpc_invalid_func
    fi
    cd $mpc_dir
    echo -e "${info}Extracting $mpc_latest contents...${default}"
    tar -xf ${mpc_dir}/mpc.tar.gz
    cd $OLDPWD
    mpc_pkg=$(basename "${mpc_dir}/$mpc_latest" .tar.gz)
    mv -v ${mpc_dir}/$mpc_pkg ${mpc_dir}/mpc || true
    # Chapter 5.3.1
    case $(uname -m) in
      x86_64)
        sed -e '/m64=/s/lib64/lib/' -i.orig ${gcc_dir}/${gcc_pkg}/gcc/config/i386/t-linux64
      ;;
    esac
    # Finally build GCC
    mkdir -v ${gcc_dir}/build || true # 'make' fails when building in a source directory
    if [ ! -d ${gcc_dir}/build ]; then
      exit 1
    fi
    pushd ${gcc_dir}/build
      ${gcc_dir}/${gcc_pkg}/configure      \
        --target=$(uname -m)-lfs-linux-gnu \
        --prefix=${savelocation}/tools     \
        --with-glibc-version=2.39          \
        --with-sysroot=$savelocation       \
        --with-newlib                      \
        --without-headers                  \
        --enable-default-pie               \
        --enable-default-ssp               \
        --disable-nls                      \
        --disable-shared                   \
        --disable-multilib                 \
        --disable-threads                  \
        --disable-libatomic                \
        --disable-libgomp                  \
        --disable-libquadmath              \
        --disable-libssp                   \
        --disable-libvtv                   \
        --disable-libstdcxx                \
        --enable-languages=c,c++
    popd
    case $opt_one_job in
      1)
        make -C ${gcc_dir}/build
        make -C ${gcc_dir}/build install
      ;;
      *)
        make -C ${gcc_dir}/build -j$(nproc)
        make -C ${gcc_dir}/build -j$(nproc) install
    esac
    cat ${gcc_dir}/${gcc_pkg}/gcc/limitx.h ${gcc_dir}/${gcc_pkg}/gcc/glimits.h ${gcc_dir}/${gcc_pkg}/gcc/limity.h > \
      `dirname $(${savelocation}/tools/bin/$(uname -m)-lfs-linux-gnu-gcc -print-libgcc-file-name)`/include/limits.h
    # Save progress
    echo "`sed '/save_cross_gcc/d'  $fullsavename`" > $fullsavename
    echo "`sed '/gcc_dir/d'         $fullsavename`" > $fullsavename
    echo "`sed '/gcc_latest/d'      $fullsavename`" > $fullsavename
    echo "`sed '/gcc_pkg/d'         $fullsavename`" > $fullsavename
    echo -e "save_cross_gcc=1\ngcc_dir=${gcc_dir}\ngcc_latest=${gcc_latest}\ngcc_pkg=${gcc_pkg}" >> $fullsavename
    echo -e "${success}GCC successfully installed for cross-compilation to '${savelocation}/tools'.${default}"
  ;;
  *)
    save-error "save_cross_gcc"
esac

# Linux API Headers
if [[ -z "$save_linux_headers" ]]; then
  save_linux_headers=0
fi
case $save_linux_headers in
  1)
  ;;
  0)
    # Obtain Linux source code
    linux_dir=${savelocation}/sources/linux
    mkdir -pv $linux_dir
    linux_repo="https://mirrors.edge.kernel.org/pub/linux/kernel/v6.x/"
    linux_latest=$(curl -s "${linux_repo}" | grep -Eo '(linux-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${linux_repo}/$linux_latest --output ${linux_dir}/${linux_latest}
    checksum=`sha512sum ${linux_dir}/${linux_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/linux.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $linux_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$linux_latest' might have malicious content inside.${default}"
      linux_invalid_func() {
        read -p "Proceed anyway? (y,N):" linux_invalid
        if [[ -z "$linux_invalid" ]]; then
          linux_invalid=n
        fi
        case $linux_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) Linux API Headers.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            linux_invalid_func
        esac
      }
      linux_invalid_func
    fi
    cd $linux_dir
    echo -e "${info}Extracting $linux_latest contents...${default}"
    tar -xf ${linux_dir}/${linux_latest}
    cd $OLDPWD
    linux_pkg=$(basename "${linux_dir}/$linux_latest" .tar.xz)
    # Make & install the Headers
    case $opt_one_job in
      1)
        make -C ${linux_dir}/${linux_pkg} mrproper
        make -C ${linux_dir}/${linux_pkg} headers
      ;;
      *)
        make -C ${linux_dir}/${linux_pkg} -j$(nproc) mrproper
        make -C ${linux_dir}/${linux_pkg} -j$(nproc) headers
    esac
    # Chapter 5.4.1
    find    ${linux_dir}/${linux_pkg} -type f ! -name '*.h' -delete
    cp  -rv ${linux_dir}/${linux_pkg}/usr/include ${savelocation}/usr
    # Save progress
    echo "`sed '/save_linux_headers/d'  $fullsavename`" > $fullsavename
    echo -e "save_linux_headers=1\n" >> $fullsavename
    echo -e "${success}Linux API Headers successfully installed.${default}"
  ;;
  *)
    save-error "save_linux_headers"
esac

# Target Glibc installation stage
if [[ -z "$save_target_glibc" ]]; then
  save_target_glibc=0
fi
case $save_target_glibc in
  1)
  ;;
  0)
    glibc_dir=${savelocation}/sources/glibc
    mkdir -pv $glibc_dir
    glibc_repo="https://ftp.gnu.org/gnu/glibc/"
    patch_repo="https://www.linuxfromscratch.org/patches/lfs/12.1/glibc-2.39-fhs-1.patch"
    glibc_latest=$(curl -s "${glibc_repo}" | grep -Eo '(glibc-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${glibc_repo}/$glibc_latest --output ${glibc_dir}/${glibc_latest}
    pkg_checksum=`sha512sum ${glibc_dir}/${glibc_latest} | awk '{print $1}'`
    if [ "$pkg_checksum" != "`cat /etc/lfs-install/glibc.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $glibc_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$glibc_latest' might have malicious content inside.${default}"
      glibc_invalid_func() {
        read -p "Proceed anyway? (y,N):" glibc_invalid
        if [[ -z "$glibc_invalid" ]]; then
          glibc_invalid=n
        fi
        case $glibc_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) Glibc for cross-compilation.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            glibc_invalid_func
        esac
      }
      glibc_invalid_func
    fi
    cd $glibc_dir
    echo -e "${info}Extracting $glibc_latest contents...${default}"
    tar -xf ${glibc_dir}/${glibc_latest}
    cd $OLDPWD
    glibc_pkg=$(basename "${glibc_dir}/$glibc_latest" .tar.xz)
    curl ${patch_repo} --output ${glibc_dir}/${glibc_pkg}/glibc-2.39-fhs-1.patch
    patch_checksum=`sha512sum ${glibc_dir}/${glibc_pkg}/glibc-2.39-fhs-1.patch | awk '{print $1}'`
    if [ "$patch_checksum" != "`cat /etc/lfs-install/glibc-patch.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of glibc-2.39-fhs-1.patch does not match the trusted one."
      echo    "This means the patch was updated recently, or the repository was attacked."
      echo -e "glibc-2.39-fhs-1.patch might have malicious content inside.${default}"
      glibc_patch_invalid_func() {
        read -p "Proceed anyway? (y,N):" glibc_patch_invalid
        if [[ -z "$glibc_patch_invalid" ]]; then
          glibc_patch_invalid=n
        fi
        case $glibc_patch_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) Glibc for cross-compilation.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            glibc_patch_invalid_func
        esac
      }
      glibc_patch_invalid_func
    fi
    # Chapter 5.5.1
    case $(uname -m) in
      i?86)
        ln -sfv ${glibc_dir}/${glibc_pkg}/ld-linux.so.2 ${savelocation}/lib/ld-lsb.so.3
      ;;
      x86_64)
        ln -sfv ${savelocation}/lib/ld-linux-x86-64.so.2 ${savelocation}/lib64
        ln -sfv ${savelocation}/lib/ld-linux-x86-64.so.2 ${savelocation}/lib64/ld-lsb-x86-64.so.3
      ;;
    esac
    pushd ${glibc_dir}/${glibc_pkg}
      patch -Np1 -i ${glibc_dir}/${glibc_pkg}/glibc-2.39-fhs-1.patch
    popd
    echo "rootsbindir=${savelocation}/usr/sbin" > ${glibc_dir}/${glibc_pkg}/configparms
    # Build and install
    mkdir -v ${glibc_dir}/build || true
    pushd ${glibc_dir}/build
      ${glibc_dir}/${glibc_pkg}/configure                         \
        --prefix=${savelocation}/usr                              \
        --host=$(uname -m)-lfs-linux-gnu                          \
        --build=$(${glibc_dir}/${glibc_pkg}/scripts/config.guess) \
        --enable-kernel=4.19                                      \
        --with-headers=${savelocation}/usr/include                \
        --disable-nscd                                            \
        libc_cv_slibdir=/usr/lib
    popd
    case $opt_one_job in
      1)
        make -C ${glibc_dir}/build
        make -C ${glibc_dir}/build install
      ;;
      *)
        make -C ${glibc_dir}/build -j$(nproc)
        make -C ${glibc_dir}/build -j$(nproc) install
    esac
    sed '/RTLDLIST=/s@/usr@@g' -i ${savelocation}/usr/bin/ldd
    # Save progress
    echo "`sed '/save_target_glibc/d'  $fullsavename`" > $fullsavename
    echo -e "save_target_glibc=1\n" >> $fullsavename
    echo -e "${success}Glibc for cross-compilation successfully installed.${default}"
  ;;
  *)
    save-error "save_target_glibc"
esac

# Target Libstdc++ installation
if [[ -z "$save_target_libstdcpp" ]]; then
  save_target_libstdcpp=0
fi
case $save_target_libstdcpp in
  1)
  ;;
  0)
    # Libstdc++ is already included in GCC source code,
    # so we skip downloading and straight up proceed to build and install.
    libstdcpp_dir=${gcc_dir}/${gcc_pkg}/libstdc++-v3
    # config.status: line 2543: ./../../config-ml.in: No such file or directory
    libstdcpp_build_dir=${libstdcpp_dir}/build
    mkdir -v $libstdcpp_build_dir || true
    pushd $libstdcpp_build_dir
      $libstdcpp_dir/configure --host=$(uname -m)-lfs-linux-gnu              \
                               --build=$(${gcc_dir}/${gcc_pkg}/config.guess) \
                               --prefix=/usr                                 \
                               --disable-multilib                            \
                               --disable-nls                                 \
                               --disable-libstdcxx-pch                       \
                               --with-gxx-include-dir=/tools/$(uname -m)-lfs-linux-gnu/include/c++/13.2.0
    popd
    case $opt_one_job in
      1)
        make -C $libstdcpp_build_dir
        make -C $libstdcpp_build_dir DESTDIR=$savelocation install
      ;;
      *)
        make -C $libstdcpp_build_dir -j$(nproc)
        make -C $libstdcpp_build_dir -j$(nproc) DESTDIR=$savelocation install
    esac
    # Chapter 5.6.1
    rm -v ${savelocation}/usr/lib/lib{stdc++{,exp,fs},supc++}.la
    # Save progress
    echo "`sed '/save_target_libstdcpp/d'  $fullsavename`" > $fullsavename
    echo -e "save_target_libstdcpp=1\n" >> $fullsavename
    echo -e "${success}Temporary Libstdc++ successfully installed.${default}"
  ;;
  *)
    save-error "save_target_libstdcpp"
esac

# Temporary GNU M4 macroprocessor installation
if [[ -z "$save_temporary_m4" ]]; then
  save_temporary_m4=0
fi
case $save_temporary_m4 in
  1)
  ;;
  0)
    m4_dir=${savelocation}/sources/m4
    mkdir -pv $m4_dir
    m4_repo="https://ftp.gnu.org/gnu/m4/"
    m4_latest=$(curl -s "${m4_repo}" | grep -Eo '(m4-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${m4_repo}/$m4_latest --output ${m4_dir}/${m4_latest}
    checksum=`sha512sum ${m4_dir}/${m4_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/m4.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $m4_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$m4_latest' might have malicious content inside.${default}"
      m4_invalid_func() {
        read -p "Proceed anyway? (y,N):" m4_invalid
        if [[ -z "$m4_invalid" ]]; then
          m4_invalid=n
        fi
        case $m4_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU M4 macroprocessor.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            m4_invalid_func
        esac
      }
      m4_invalid_func
    fi
    cd $m4_dir
    echo -e "${info}Extracting $m4_latest contents...${default}"
    tar -xf ${m4_dir}/${m4_latest}
    cd $OLDPWD
    m4_pkg=$(basename "${m4_dir}/$m4_latest" .tar.xz)
    # Build & install
    pushd ${m4_dir}/${m4_pkg}
      ${m4_dir}/${m4_pkg}/configure --prefix=/usr                                            \
                                    --host=$(uname -m)-lfs-linux-gnu                         \
                                    --build=$(${m4_dir}/${m4_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${m4_dir}/${m4_pkg}
        make -C ${m4_dir}/${m4_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${m4_dir}/${m4_pkg} -j$(nproc)
        make -C ${m4_dir}/${m4_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temporary_m4/d'  $fullsavename`" > $fullsavename
    echo -e "save_temporary_m4=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU M4 macroprocessor successfully installed.${default}"
  ;;
  *)
    save-error "save_temporary_m4"
esac

# Temporary Ncurses library installation
if [[ -z "$save_temp_ncurses" ]]; then
  save_temp_ncurses=0
fi
case $save_temp_ncurses in
  1)
  ;;
  0)
    # Chapter 6.3.1: it doesn't tell to apply any patch, so we just download the tarball
    ncurses_dir=${savelocation}/sources/ncurses
    mkdir -pv $ncurses_dir
    ncurses_repo="https://invisible-mirror.net/archives/ncurses/"
    ncurses_latest=$(curl -s "${ncurses_repo}" | grep -Eo '(ncurses-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${ncurses_repo}/$ncurses_latest --output ${ncurses_dir}/${ncurses_latest}
    checksum=`sha512sum ${ncurses_dir}/${ncurses_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/ncurses.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $ncurses_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$ncurses_latest' might have malicious content inside.${default}"
      ncurses_invalid_func() {
        read -p "Proceed anyway? (y,N):" ncurses_invalid
        if [[ -z "$ncurses_invalid" ]]; then
          ncurses_invalid=n
        fi
        case $ncurses_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary Ncurses library.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            ncurses_invalid_func
        esac
      }
      ncurses_invalid_func
    fi
    cd $ncurses_dir
    echo -e "${info}Extracting $ncurses_latest contents...${default}"
    tar -xf ${ncurses_dir}/${ncurses_latest}
    cd $OLDPWD
    ncurses_pkg=$(basename "${ncurses_dir}/$ncurses_latest" .tar.gz)
    # Build & install
    sed -i s/mawk// ${ncurses_dir}/${ncurses_pkg}/configure
    mkdir -v ${ncurses_dir}/${ncurses_pkg}/tic || true
    pushd ${ncurses_dir}/${ncurses_pkg}/tic
      ${ncurses_dir}/${ncurses_pkg}/configure
    case $opt_one_job in
      1)
        make -C include
        make -C progs tic
      ;;
      *)
        make -j$(nproc) -C include
        make -j$(nproc) -C progs tic
    esac
    popd
    pushd ${ncurses_dir}/${ncurses_pkg}
      ${ncurses_dir}/${ncurses_pkg}/configure --prefix=/usr                                         \
                                              --host=$(uname -m)-lfs-linux-gnu                      \
                                              --build=$(${ncurses_dir}/${ncurses_pkg}/config.guess) \
                                              --mandir=/usr/share/man                               \
                                              --with-manpage-format=normal                          \
                                              --with-shared                                         \
                                              --without-normal                                      \
                                              --with-cxx-shared                                     \
                                              --without-debug                                       \
                                              --without-ada                                         \
                                              --disable-stripping                                   \
                                              --enable-widec
    popd
    case $opt_one_job in
      1)
        make -C ${ncurses_dir}/${ncurses_pkg}
        make -C ${ncurses_dir}/${ncurses_pkg} \
             DESTDIR=${savelocation}          \
             TIC_PATH=${ncurses_dir}/${ncurses_pkg}/tic/progs/tic install
      ;;
      *)
        make -C ${ncurses_dir}/${ncurses_pkg} -j$(nproc)
        make -C ${ncurses_dir}/${ncurses_pkg} -j$(nproc) \
             DESTDIR=${savelocation}                     \
             TIC_PATH=${ncurses_dir}/${ncurses_pkg}/tic/progs/tic install
    esac
    ln -svf ${savelocation}/lib/libncursesw.so \
           ${savelocation}/usr/lib/libncurses.so
    sed -e 's/^#if.*XOPEN.*$/#if 1/' \
        -i ${savelocation}/usr/include/curses.h
    # Save progress
    echo "`sed '/save_temp_ncurses/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_ncurses=1\n" >> $fullsavename
    echo -e "${success}Temporary Ncurses library successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_ncurses"
esac

# Temporary GNU Bash shell installation
if [[ -z "$save_temp_bash" ]]; then
  save_temp_bash=0
fi
case $save_temp_bash in
  1)
  ;;
  0)
    bash_dir=${savelocation}/sources/bash
    mkdir -pv $bash_dir
    bash_repo="https://ftp.gnu.org/gnu/bash/"
    bash_latest=$(curl -s "${bash_repo}" | grep -Eo '(bash-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${bash_repo}/$bash_latest --output ${bash_dir}/${bash_latest}
    checksum=`sha512sum ${bash_dir}/${bash_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/bash.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $bash_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$bash_latest' might have malicious content inside.${default}"
      bash_invalid_func() {
        read -p "Proceed anyway? (y,N):" bash_invalid
        if [[ -z "$bash_invalid" ]]; then
          bash_invalid=n
        fi
        case $bash_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Bash shell.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            bash_invalid_func
        esac
      }
      bash_invalid_func
    fi
    cd $bash_dir
    echo -e "${info}Extracting $bash_latest contents...${default}"
    tar -xf ${bash_dir}/${bash_latest}
    cd $OLDPWD
    bash_pkg=$(basename "${bash_dir}/$bash_latest" .tar.gz)
    # Build & install
    pushd ${bash_dir}/${bash_pkg}
      ${bash_dir}/${bash_pkg}/configure --prefix=/usr                                           \
                                        --build=$(${bash_dir}/${bash_pkg}/support/config.guess) \
                                        --host=$(uname -m)-lfs-linux-gnu                        \
                                        --without-bash-malloc
    popd
    case $opt_one_job in
      1)
        make -C ${bash_dir}/${bash_pkg}
        make -C ${bash_dir}/${bash_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${bash_dir}/${bash_pkg} -j$(nproc)
        make -C ${bash_dir}/${bash_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Chapter 6.4.1
    ln -sv ${bash_dir}/${bash_pkg}/bash ${savelocation}/bin/sh
    # Save progress
    echo "`sed '/save_temp_bash/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_bash=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Bash shell successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_bash"
esac

# Temporary GNU Coreutils installation
if [[ -z "$save_temp_coreutils" ]]; then
  save_temp_coreutils=0
fi
case $save_temp_coreutils in
  1)
  ;;
  0)
    coreutils_dir=${savelocation}/sources/coreutils
    mkdir -pv $coreutils_dir
    coreutils_repo="https://ftp.gnu.org/gnu/coreutils/"
    coreutils_latest=$(curl -s "${coreutils_repo}" | grep -Eo '(coreutils-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${coreutils_repo}/$coreutils_latest --output ${coreutils_dir}/${coreutils_latest}
    checksum=`sha512sum ${coreutils_dir}/${coreutils_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/coreutils.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $coreutils_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$coreutils_latest' might have malicious content inside.${default}"
      coreutils_invalid_func() {
        read -p "Proceed anyway? (y,N):" coreutils_invalid
        if [[ -z "$coreutils_invalid" ]]; then
          coreutils_invalid=n
        fi
        case $coreutils_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Coreutils.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            coreutils_invalid_func
        esac
      }
      coreutils_invalid_func
    fi
    cd $coreutils_dir
    echo -e "${info}Extracting $coreutils_latest contents...${default}"
    tar -xf ${coreutils_dir}/${coreutils_latest}
    cd $OLDPWD
    coreutils_pkg=$(basename "${coreutils_dir}/$coreutils_latest" .tar.xz)
    # Build & install
    pushd ${coreutils_dir}/${coreutils_pkg}
      ${coreutils_dir}/${coreutils_pkg}/configure --prefix=/usr                                                       \
                                                  --host=$(uname -m)-lfs-linux-gnu                                    \
                                                  --build=$(${coreutils_dir}/${coreutils_pkg}/build-aux/config.guess) \
                                                  --enable-install-program=hostname                                   \
                                                  --enable-no-install-program=kill,uptime
    popd
    case $opt_one_job in
      1)
        make -C ${coreutils_dir}/${coreutils_pkg}
        make -C ${coreutils_dir}/${coreutils_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${coreutils_dir}/${coreutils_pkg} -j$(nproc)
        make -C ${coreutils_dir}/${coreutils_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    mv    -v  ${savelocation}/usr/bin/chroot              ${savelocation}/usr/sbin
    mkdir -pv ${savelocation}/usr/share/man/man8
    mv    -v  ${savelocation}/usr/share/man/man1/chroot.1 ${savelocation}/usr/share/man/man8/chroot.8
    sed   -i  's/"1"/"8"/'                                ${savelocation}/usr/share/man/man8/chroot.8
    # Save progress
    echo "`sed '/save_temp_coreutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_coreutils=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Coreutils successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_coreutils"
esac

# Temporary GNU Diffutils installation
if [[ -z "$save_temp_diffutils" ]]; then
  save_temp_diffutils=0
fi
case $save_temp_diffutils in
  1)
  ;;
  0)
    diffutils_dir=${savelocation}/sources/diffutils
    mkdir -pv $diffutils_dir
    diffutils_repo="https://ftp.gnu.org/gnu/diffutils/"
    diffutils_latest=$(curl -s "${diffutils_repo}" | grep -Eo '(diffutils-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${diffutils_repo}/$diffutils_latest --output ${diffutils_dir}/${diffutils_latest}
    checksum=`sha512sum ${diffutils_dir}/${diffutils_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/diffutils.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $diffutils_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$diffutils_latest' might have malicious content inside.${default}"
      diffutils_invalid_func() {
        read -p "Proceed anyway? (y,N):" diffutils_invalid
        if [[ -z "$diffutils_invalid" ]]; then
          diffutils_invalid=n
        fi
        case $diffutils_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Diffutils.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            diffutils_invalid_func
        esac
      }
      diffutils_invalid_func
    fi
    cd $diffutils_dir
    echo -e "${info}Extracting $diffutils_latest contents...${default}"
    tar -xf ${diffutils_dir}/${diffutils_latest}
    cd $OLDPWD
    diffutils_pkg=$(basename "${diffutils_dir}/$diffutils_latest" .tar.xz)
    # Build & install
    pushd ${diffutils_dir}/${diffutils_pkg}
      ${diffutils_dir}/${diffutils_pkg}/configure --prefix=/usr                    \
                                                  --host=$(uname -m)-lfs-linux-gnu \
                                                  --build=$(${diffutils_dir}/${diffutils_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${diffutils_dir}/${diffutils_pkg}
        make -C ${diffutils_dir}/${diffutils_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${diffutils_dir}/${diffutils_pkg} -j$(nproc)
        make -C ${diffutils_dir}/${diffutils_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_diffutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_diffutils=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Diffutils successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_diffutils"
esac

# Temporary Ian Darwin's Free File Command installation
if [[ -z "$save_temp_file" ]]; then
  save_temp_file=0
fi
case $save_temp_file in
  1)
  ;;
  0)
    file_dir=${savelocation}/sources/file
    mkdir -pv $file_dir
    file_repo="https://astron.com/pub/file/"
    file_latest=$(curl -s "${file_repo}" | grep -Eo '(file-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${file_repo}/$file_latest --output ${file_dir}/${file_latest}
    checksum=`sha512sum ${file_dir}/${file_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/file.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $file_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$file_latest' might have malicious content inside.${default}"
      file_invalid_func() {
        read -p "Proceed anyway? (y,N):" file_invalid
        if [[ -z "$file_invalid" ]]; then
          file_invalid=n
        fi
        case $file_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary Ian Darwin's Free File Command.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            file_invalid_func
        esac
      }
      file_invalid_func
    fi
    cd $file_dir
    echo -e "${info}Extracting $file_latest contents...${default}"
    tar -xf ${file_dir}/${file_latest}
    cd $OLDPWD
    file_pkg=$(basename "${file_dir}/$file_latest" .tar.gz)
    # Build & install
    mkdir -v ${file_dir}/${file_pkg}/temp_build || true
    # Chapter 6.7.1
    pushd ${file_dir}/${file_pkg}/temp_build
      ${file_dir}/${file_pkg}/configure --disable-bzlib      \
                                        --disable-libseccomp \
                                        --disable-xzlib      \
                                        --disable-zlib
      case $opt_one_job in
        1)
          make
        ;;
        *)
          make -j$(nproc)
      esac
    popd
    pushd ${file_dir}/${file_pkg}
      ${file_dir}/${file_pkg}/configure --prefix=/usr                    \
                                        --host=$(uname -m)-lfs-linux-gnu \
                                        --build=$(${file_dir}/${file_pkg}/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${file_dir}/${file_pkg} \
             FILE_COMPILE=${file_dir}/${file_pkg}/temp_build/src/file
        make -C ${file_dir}/${file_pkg} \
             DESTDIR=$savelocation install
      ;;
      *)
        make -C ${file_dir}/${file_pkg} -j$(nproc) \
             FILE_COMPILE=${file_dir}/${file_pkg}/temp_build/src/file
        make -C ${file_dir}/${file_pkg} -j$(nproc) \
             DESTDIR=$savelocation install
    esac
    rm -v ${savelocation}/usr/lib/libmagic.la
    # Save progress
    echo "`sed '/save_temp_file/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_file=1\n" >> $fullsavename
    echo -e "${success}Temporary Ian Darwin's Free File Command successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_file"
esac

# Temporary GNU Findutils installation
if [[ -z "$save_temp_findutils" ]]; then
  save_temp_findutils=0
fi
case $save_temp_findutils in
  1)
  ;;
  0)
    findutils_dir=${savelocation}/sources/findutils
    mkdir -pv $findutils_dir
    findutils_repo="https://ftp.gnu.org/gnu/findutils/"
    findutils_latest=$(curl -s "${findutils_repo}" | grep -Eo '(findutils-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${findutils_repo}/$findutils_latest --output ${findutils_dir}/${findutils_latest}
    checksum=`sha512sum ${findutils_dir}/${findutils_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/findutils.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $findutils_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$findutils_latest' might have malicious content inside.${default}"
      findutils_invalid_func() {
        read -p "Proceed anyway? (y,N):" findutils_invalid
        if [[ -z "$findutils_invalid" ]]; then
          findutils_invalid=n
        fi
        case $findutils_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Findutils.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            findutils_invalid_func
        esac
      }
      findutils_invalid_func
    fi
    cd $findutils_dir
    echo -e "${info}Extracting $findutils_latest contents...${default}"
    tar -xf ${findutils_dir}/${findutils_latest}
    cd $OLDPWD
    findutils_pkg=$(basename "${findutils_dir}/$findutils_latest" .tar.xz)
    # Build & install
    pushd ${findutils_dir}/${findutils_pkg}
      ${findutils_dir}/${findutils_pkg}/configure --prefix=/usr                                  \
                                                  --localstatedir=/var/lib/locate                \
                                                  --host=$(uname -m)-lfs-linux-gnu               \
                                                  --build=$(${findutils_dir}/${findutils_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${findutils_dir}/${findutils_pkg}
        make -C ${findutils_dir}/${findutils_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${findutils_dir}/${findutils_pkg} -j$(nproc)
        make -C ${findutils_dir}/${findutils_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_findutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_findutils=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Findutils successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_findutils"
esac

# Temporary GNU awk installation
if [[ -z "$save_temp_gawk" ]]; then
  save_temp_gawk=0
fi
case $save_temp_gawk in
  1)
  ;;
  0)
    gawk_dir=${savelocation}/sources/gawk
    mkdir -pv $gawk_dir
    gawk_repo="https://ftp.gnu.org/gnu/gawk/"
    gawk_latest=$(curl -s "${gawk_repo}" | grep -Eo '(gawk-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${gawk_repo}/$gawk_latest --output ${gawk_dir}/${gawk_latest}
    checksum=`sha512sum ${gawk_dir}/${gawk_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/gawk.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $gawk_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$gawk_latest' might have malicious content inside.${default}"
      gawk_invalid_func() {
        read -p "Proceed anyway? (y,N):" gawk_invalid
        if [[ -z "$gawk_invalid" ]]; then
          gawk_invalid=n
        fi
        case $gawk_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU awk.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            gawk_invalid_func
        esac
      }
      gawk_invalid_func
    fi
    cd $gawk_dir
    echo -e "${info}Extracting $gawk_latest contents...${default}"
    tar -xf ${gawk_dir}/${gawk_latest}
    cd $OLDPWD
    gawk_pkg=$(basename "${gawk_dir}/$gawk_latest" .tar.xz)
    # Chapter 6.9.1
    sed -i 's/extras//' ${gawk_dir}/${gawk_pkg}/Makefile.in
    # Build & install
    pushd ${gawk_dir}/${gawk_pkg}
      ${gawk_dir}/${gawk_pkg}/configure --prefix=/usr                    \
                                        --host=$(uname -m)-lfs-linux-gnu \
                                        --build=$(${gawk_dir}/${gawk_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${gawk_dir}/${gawk_pkg}
        make -C ${gawk_dir}/${gawk_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${gawk_dir}/${gawk_pkg} -j$(nproc)
        make -C ${gawk_dir}/${gawk_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_gawk/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_gawk=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU awk successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_gawk"
esac

# Temporary GNU Grep installation
if [[ -z "$save_temp_grep" ]]; then
  save_temp_grep=0
fi
case $save_temp_grep in
  1)
  ;;
  0)
    grep_dir=${savelocation}/sources/grep
    mkdir -pv $grep_dir
    grep_repo="https://ftp.gnu.org/gnu/grep/"
    grep_latest=$(curl -s "${grep_repo}" | grep -Eo '(grep-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${grep_repo}/$grep_latest --output ${grep_dir}/${grep_latest}
    checksum=`sha512sum ${grep_dir}/${grep_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/grep.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $grep_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$grep_latest' might have malicious content inside.${default}"
      grep_invalid_func() {
        read -p "Proceed anyway? (y,N):" grep_invalid
        if [[ -z "$grep_invalid" ]]; then
          grep_invalid=n
        fi
        case $grep_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Grep.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            grep_invalid_func
        esac
      }
      grep_invalid_func
    fi
    cd $grep_dir
    echo -e "${info}Extracting $grep_latest contents...${default}"
    tar -xf ${grep_dir}/${grep_latest}
    cd $OLDPWD
    grep_pkg=$(basename "${grep_dir}/$grep_latest" .tar.xz)
    # Build & install
    pushd ${grep_dir}/${grep_pkg}
      ${grep_dir}/${grep_pkg}/configure --prefix=/usr                    \
                                        --host=$(uname -m)-lfs-linux-gnu \
                                        --build=$(${grep_dir}/${grep_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${grep_dir}/${grep_pkg}
        make -C ${grep_dir}/${grep_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${grep_dir}/${grep_pkg} -j$(nproc)
        make -C ${grep_dir}/${grep_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_grep/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_grep=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Grep successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_grep"
esac

# Temporary GNU Gzip installation
if [[ -z "$save_temp_gzip" ]]; then
  save_temp_gzip=0
fi
case $save_temp_gzip in
  1)
  ;;
  0)
    gzip_dir=${savelocation}/sources/gzip
    mkdir -pv $gzip_dir
    gzip_repo="https://ftp.gnu.org/gnu/gzip/"
    gzip_latest=$(curl -s "${gzip_repo}" | grep -Eo '(gzip-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${gzip_repo}/$gzip_latest --output ${gzip_dir}/${gzip_latest}
    checksum=`sha512sum ${gzip_dir}/${gzip_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/gzip.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $gzip_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$gzip_latest' might have malicious content inside.${default}"
      gzip_invalid_func() {
        read -p "Proceed anyway? (y,N):" gzip_invalid
        if [[ -z "$gzip_invalid" ]]; then
          gzip_invalid=n
        fi
        case $gzip_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Gzip.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            gzip_invalid_func
        esac
      }
      gzip_invalid_func
    fi
    cd $gzip_dir
    echo -e "${info}Extracting $gzip_latest contents...${default}"
    tar -xf ${gzip_dir}/${gzip_latest}
    cd $OLDPWD
    gzip_pkg=$(basename "${gzip_dir}/$gzip_latest" .tar.xz)
    # Build & install
    pushd ${gzip_dir}/${gzip_pkg}
      ${gzip_dir}/${gzip_pkg}/configure --prefix=/usr \
                                        --host=$(uname -m)-lfs-linux-gnu
    popd
    case $opt_one_job in
      1)
        make -C ${gzip_dir}/${gzip_pkg}
        make -C ${gzip_dir}/${gzip_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${gzip_dir}/${gzip_pkg} -j$(nproc)
        make -C ${gzip_dir}/${gzip_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_gzip/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_gzip=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Gzip successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_gzip"
esac

# Temporary GNU Make installation
if [[ -z "$save_temp_make" ]]; then
  save_temp_make=0
fi
case $save_temp_make in
  1)
  ;;
  0)
    make_dir=${savelocation}/sources/make
    mkdir -pv $make_dir
    make_repo="https://ftp.gnu.org/gnu/make/"
    make_latest=$(curl -s "${make_repo}" | grep -Eo '(make-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${make_repo}/$make_latest --output ${make_dir}/${make_latest}
    checksum=`sha512sum ${make_dir}/${make_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/make.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $make_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$make_latest' might have malicious content inside.${default}"
      make_invalid_func() {
        read -p "Proceed anyway? (y,N):" make_invalid
        if [[ -z "$make_invalid" ]]; then
          make_invalid=n
        fi
        case $make_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Make.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            make_invalid_func
        esac
      }
      make_invalid_func
    fi
    cd $make_dir
    echo -e "${info}Extracting $make_latest contents...${default}"
    tar -xf ${make_dir}/${make_latest}
    cd $OLDPWD
    make_pkg=$(basename "${make_dir}/$make_latest" .tar.gz)
    # Build & install
    pushd ${make_dir}/${make_pkg}
      ${make_dir}/${make_pkg}/configure --prefix=/usr                    \
                                        --without-guile                  \
                                        --host=$(uname -m)-lfs-linux-gnu \
                                        --build=$(${make_dir}/${make_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${make_dir}/${make_pkg}
        make -C ${make_dir}/${make_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${make_dir}/${make_pkg} -j$(nproc)
        make -C ${make_dir}/${make_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_make/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_make=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Make successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_make"
esac

# Temporary GNU Patch installation
if [[ -z "$save_temp_patch" ]]; then
  save_temp_patch=0
fi
case $save_temp_patch in
  1)
  ;;
  0)
    patch_dir=${savelocation}/sources/patch
    mkdir -pv $patch_dir
    patch_repo="https://ftp.gnu.org/gnu/patch/"
    patch_latest=$(curl -s "${patch_repo}" | grep -Eo '(patch-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${patch_repo}/$patch_latest --output ${patch_dir}/${patch_latest}
    checksum=`sha512sum ${patch_dir}/${patch_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/patch.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $patch_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$patch_latest' might have malicious content inside.${default}"
      patch_invalid_func() {
        read -p "Proceed anyway? (y,N):" patch_invalid
        if [[ -z "$patch_invalid" ]]; then
          patch_invalid=n
        fi
        case $patch_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Patch.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            patch_invalid_func
        esac
      }
      patch_invalid_func
    fi
    cd $patch_dir
    echo -e "${info}Extracting $patch_latest contents...${default}"
    tar -xf ${patch_dir}/${patch_latest}
    cd $OLDPWD
    patch_pkg=$(basename "${patch_dir}/$patch_latest" .tar.xz)
    # Build & install
    pushd ${patch_dir}/${patch_pkg}
      ${patch_dir}/${patch_pkg}/configure --prefix=/usr                    \
                                          --host=$(uname -m)-lfs-linux-gnu \
                                          --build=$(${patch-dir}/${patch_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${patch_dir}/${patch_pkg}
        make -C ${patch_dir}/${patch_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${patch_dir}/${patch_pkg} -j$(nproc)
        make -C ${patch_dir}/${patch_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_patch/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_patch=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Patch successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_patch"
esac

# Temporary GNU Streamline Editor installation
if [[ -z "$save_temp_sed" ]]; then
  save_temp_sed=0
fi
case $save_temp_sed in
  1)
  ;;
  0)
    sed_dir=${savelocation}/sources/sed
    mkdir -pv $sed_dir
    sed_repo="https://ftp.gnu.org/gnu/sed/"
    sed_latest=$(curl -s "${sed_repo}" | grep -Eo '(sed-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${sed_repo}/$sed_latest --output ${sed_dir}/${sed_latest}
    checksum=`sha512sum ${sed_dir}/${sed_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/sed.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $sed_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$sed_latest' might have malicious content inside.${default}"
      sed_invalid_func() {
        read -p "Proceed anyway? (y,N):" sed_invalid
        if [[ -z "$sed_invalid" ]]; then
          sed_invalid=n
        fi
        case $sed_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Streamline Editor.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            sed_invalid_func
        esac
      }
      sed_invalid_func
    fi
    cd $sed_dir
    echo -e "${info}Extracting $sed_latest contents...${default}"
    tar -xf ${sed_dir}/${sed_latest}
    cd $OLDPWD
    sed_pkg=$(basename "${sed_dir}/$sed_latest" .tar.xz)
    # Build & install
    pushd ${sed_dir}/${sed_pkg}
      ${sed_dir}/${sed_pkg}/configure --prefix=/usr                    \
                                      --host=$(uname -m)-lfs-linux-gnu \
                                      --build=$(${sed_dir}/${sed_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${sed_dir}/${sed_pkg}
        make -C ${sed_dir}/${sed_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${sed_dir}/${sed_pkg} -j$(nproc)
        make -C ${sed_dir}/${sed_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_sed/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_sed=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Streamline Editor successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_sed"
esac

# Temporary GNU Tar installation
if [[ -z "$save_temp_tar" ]]; then
  save_temp_tar=0
fi
case $save_temp_tar in
  1)
  ;;
  0)
    tar_dir=${savelocation}/sources/tar
    mkdir -pv $tar_dir
    tar_repo="https://ftp.gnu.org/gnu/tar/"
    tar_latest=$(curl -s "${tar_repo}" | grep -Eo '(tar-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${tar_repo}/$tar_latest --output ${tar_dir}/${tar_latest}
    checksum=`sha512sum ${tar_dir}/${tar_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/tar.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $tar_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$tar_latest' might have malicious content inside.${default}"
      tar_invalid_func() {
        read -p "Proceed anyway? (y,N):" tar_invalid
        if [[ -z "$tar_invalid" ]]; then
          tar_invalid=n
        fi
        case $tar_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary GNU Tar.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            tar_invalid_func
        esac
      }
      tar_invalid_func
    fi
    cd $tar_dir
    echo -e "${info}Extracting $tar_latest contents...${default}"
    tar -xf ${tar_dir}/${tar_latest}
    cd $OLDPWD
    tar_pkg=$(basename "${tar_dir}/$tar_latest" .tar.xz)
    # Build & install
    pushd ${tar_dir}/${tar_pkg}
      # Remove restriction of the configure file to running as root
      FORCE_UNSAFE_CONFIGURE=1                     \
      ${tar_dir}/${tar_pkg}/configure --prefix=/usr                    \
                                      --host=$(uname -m)-lfs-linux-gnu \
                                      --build=$(${tar_dir}/${tar_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${tar_dir}/${tar_pkg}
        make -C ${tar_dir}/${tar_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${tar_dir}/${tar_pkg} -j$(nproc)
        make -C ${tar_dir}/${tar_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_tar/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_tar=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Tar successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_tar"
esac

# Temporary Xz Utils installation
if [[ -z "$save_temp_xz" ]]; then
  save_temp_xz=0
fi
case $save_temp_xz in
  1)
  ;;
  0)
    xz_dir=${savelocation}/sources/xz
    mkdir -pv $xz_dir
    # Xz Utils seems to update too often for Linux From Scratch (latest available version - 'v13'),
    # so here's a fixed version that is included in the Book.
    xz_repo="https://github.com/tukaani-project/xz/releases/download/v5.4.6/xz-5.4.6.tar.xz"
    curl --location ${xz_repo} --output ${xz_dir}/xz-5.4.6.tar.xz
    checksum=`sha512sum ${xz_dir}/xz-5.4.6.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/xz.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of xz-5.4.6.tar.xz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball 'xz-5.4.6.tar.xz' might have malicious content inside.${default}"
      xz_invalid_func() {
        read -p "Proceed anyway? (y,N):" xz_invalid
        if [[ -z "$xz_invalid" ]]; then
          xz_invalid=n
        fi
        case $xz_invalid in
          [Yy])
            echo -e "${warning}Building unstable (or unsafe) temporary Xz Utils.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            xz_invalid_func
        esac
      }
      xz_invalid_func
    fi
    cd $xz_dir
    echo -e "${info}Extracting xz-5.4.6.tar.xz contents...${default}"
    tar -xf ${xz_dir}/xz-5.4.6.tar.xz
    cd $OLDPWD
    xz_pkg=$(basename "${xz_dir}/xz-5.4.6.tar.xz" .tar.xz)
    # Build & install
    mkdir -v ${xz_dir}/build
    pushd ${xz_dir}/build
      ${xz_dir}/${xz_pkg}/configure --prefix=/usr                    \
                                    --host=$(uname -m)-lfs-linux-gnu \
                                    --build=$(${xz_dir}/${xz_pkg}/build-aux/config.guess)
    popd
    case $opt_one_job in
      1)
        make -C ${xz_dir}/build
        make -C ${xz_dir}/build DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${xz_dir}/build -j$(nproc)
        make -C ${xz_dir}/build -j$(nproc) DESTDIR=${savelocation} install
    esac
    # Save progress
    echo "`sed '/save_temp_xz/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_xz=1\n" >> $fullsavename
    echo -e "${success}Temporary Xz Utils successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_xz"
esac

# Temporary GNU Binutils installation
if [[ -z "$save_temp_binutils" ]]; then
  save_temp_binutils=0
fi
case $save_temp_binutils in
  1)
  ;;
  0)
    # We already have the source, but 'make distclean' doesn't seem to work properly
    rm -r ${binutils_dir}/${binutils_pkg}
    pushd ${binutils_dir}
      tar -xf ${binutils_dir}/${binutils_latest}
    popd
    sed '6009s/$add_dir//' -i ${binutils_dir}/${binutils_pkg}/ltmain.sh
    # Build & install
    pushd ${binutils_dir}/${binutils_pkg}
      ${binutils_dir}/${binutils_pkg}/configure --prefix=/usr                                           \
                                                --build=$(${binutils_dir}/${binutils_pkg}/config.guess) \
                                                --host=$(uname -m)-lfs-linux-gnu                        \
                                                --disable-nls                                           \
                                                --enable-shared                                         \
                                                --enable-gprofng=no                                     \
                                                --disable-werror                                        \
                                                --enable-64-bit-bfd                                     \
                                                --enable-default-hash-style=gnu
    popd
    case $opt_one_job in
      1)
        make -C ${binutils_dir}/${binutils_pkg}
        make -C ${binutils_dir}/${binutils_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${binutils_dir}/${binutils_pkg} -j$(nproc)
        make -C ${binutils_dir}/${binutils_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    rm -v ${savelocation}/usr/lib/lib{bfd,ctf,ctf-nobfd,opcodes,sframe}.{a,la}
    # Save progress
    echo "`sed '/save_temp_binutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_binutils=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Binutils successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_binutils"
esac

# Temporary GNU Compiler Collection installation
if [[ -z "$save_temp_gcc" ]]; then
  save_temp_gcc=0
fi
case $save_temp_gcc in
  1)
  ;;
  0)
    # Obtain GCC source code, again.
    echo -e "${info}Removing gcc source code for rebuilding...${default}"
    rm -r ${gcc_dir}/${gcc_pkg} || true
    gcc_dir=${savelocation}/sources/gcc
    mkdir -pv $gcc_dir
    gcc_repo="https://ftp.gnu.org/gnu/gcc/"
    gcc_latest=$(curl -s "${gcc_repo}" | grep -Eo '(gcc-[0-9]+([.][0-9]*)*)+' | sort -V | tail -1)
    curl ${gcc_repo}/$gcc_latest/${gcc_latest}.tar.xz --output ${gcc_dir}/${gcc_latest}.tar.xz
    checksum=`sha512sum ${gcc_dir}/${gcc_latest}.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/gcc.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $gcc_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '${gcc_latest}.tar.xz' might have malicious content inside.${default}"
      gcc_invalid_func() {
        read -p "Proceed anyway? (y,N):" gcc_invalid
        if [[ -z "$gcc_invalid" ]]; then
          gcc_invalid=n
        fi
        case $gcc_invalid in
          [Yy])
            echo -e "${warning}Building unsafe (or unstable) GNU Compiler Collection.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            gcc_invalid_func
        esac
      }
      gcc_invalid_func
    fi
    cd $gcc_dir
    echo -e "${info}Extracting ${gcc_latest}.tar.xz contents...${default}"
    tar -xf ${gcc_dir}/${gcc_latest}.tar.xz
    cd $OLDPWD
    gcc_pkg=$(basename "${gcc_dir}/$gcc_latest" .tar.xz)
    # Obtain GNU Multiple Precision Floating-Point Reliable library (MPFR) source code
    mpfr_dir=${gcc_dir}/${gcc_pkg}
    mpfr_repo="https://ftp.gnu.org/gnu/mpfr/"
    mpfr_latest=$(curl -s "${mpfr_repo}" | grep -Eo '(mpfr-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${mpfr_repo}/$mpfr_latest --output ${mpfr_dir}/mpfr.tar.xz
    checksum=`sha512sum ${mpfr_dir}/mpfr.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/mpfr.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $mpfr_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$mpfr_latest' might have malicious content inside.${default}"
      mpfr_invalid_func() {
        read -p "Proceed anyway? (y,N):" mpfr_invalid
        if [[ -z "$mpfr_invalid" ]]; then
          mpfr_invalid=n
        fi
        case $mpfr_invalid in
          [Yy])
            echo -e "${warning}Building GCC using unsafe (or unstable) GNU MPFR.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            mpfr_invalid_func
        esac
      }
      mpfr_invalid_func
    fi
    cd $mpfr_dir
    echo -e "${info}Extracting $mpfr_latest contents...${default}"
    tar -xf ${mpfr_dir}/mpfr.tar.xz
    cd $OLDPWD
    mpfr_pkg=$(basename "${mpfr_dir}/$mpfr_latest" .tar.xz)
    mv -v ${mpfr_dir}/$mpfr_pkg ${mpfr_dir}/mpfr
    # Obtain GNU Multiple Precision arithmetic library (GMP) source code
    gmp_dir=${gcc_dir}/${gcc_pkg}
    gmp_repo="https://ftp.gnu.org/gnu/gmp/"
    gmp_latest=$(curl -s "${gmp_repo}" | grep -Eo '(gmp-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${gmp_repo}/$gmp_latest --output ${gmp_dir}/gmp.tar.xz
    checksum=`sha512sum ${gmp_dir}/gmp.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/gmp.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $gmp_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$gmp_latest' might have malicious content inside.${default}"
      gmp_invalid_func() {
        read -p "Proceed anyway? (y,N):" gmp_invalid
        if [[ -z "$gmp_invalid" ]]; then
          gmp_invalid=n
        fi
        case $gmp_invalid in
          [Yy])
            echo -e "${warning}Building GCC using unsafe (or unstable) GNU GMP.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            gmp_invalid_func
        esac
      }
      gmp_invalid_func
    fi
    cd $gmp_dir
    echo -e "${info}Extracting $gmp_latest contents...${default}"
    tar -xf ${gmp_dir}/gmp.tar.xz
    cd $OLDPWD
    gmp_pkg=$(basename "${gmp_dir}/$gmp_latest" .tar.xz)
    mv -v ${gmp_dir}/$gmp_pkg ${gmp_dir}/gmp
    # Obtain GNU MPC source code
    mpc_dir=${gcc_dir}/${gcc_pkg}
    mpc_repo="https://ftp.gnu.org/gnu/mpc/"
    mpc_latest=$(curl -s "${mpc_repo}" | grep -Eo '(mpc-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${mpc_repo}/$mpc_latest --output ${mpc_dir}/mpc.tar.gz
    checksum=`sha512sum ${mpc_dir}/mpc.tar.gz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/mpc.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $mpc_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$mpc_latest' might have malicious content inside.${default}"
      mpc_invalid_func() {
        read -p "Proceed anyway? (y,N):" mpc_invalid
        if [[ -z "$mpc_invalid" ]]; then
          mpc_invalid=n
        fi
        case $mpc_invalid in
          [Yy])
            echo -e "${warning}Building GCC using unsafe (or unstable) GNU MPC.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            mpc_invalid_func
        esac
      }
      mpc_invalid_func
    fi
    cd $mpc_dir
    echo -e "${info}Extracting $mpc_latest contents...${default}"
    tar -xf ${mpc_dir}/mpc.tar.gz
    cd $OLDPWD
    mpc_pkg=$(basename "${mpc_dir}/$mpc_latest" .tar.gz)
    mv -v ${mpc_dir}/$mpc_pkg ${mpc_dir}/mpc
    # Chapter 6.18.1
    case $(uname -m) in
      x86_64)
        sed -e '/m64=/s/lib64/lib/' \
          -i.orig ${gcc_dir}/${gcc_pkg}/gcc/config/i386/t-linux64
      ;;
    esac
    sed '/thread_header =/s/@.*@/gthr-posix.h/' \
      -i ${gcc_dir}/${gcc_pkg}/libgcc/Makefile.in ${gcc_dir}/${gcc_pkg}/libstdc++-v3/include/Makefile.in
    # Build & install
    pushd ${gcc_dir}/${gcc_pkg}
      ${gcc_dir}/${gcc_pkg}/configure --build=$(${gcc_dir}/${gcc_pkg}/config.guess)                               \
                                      --host=$(uname -m)-lfs-linux-gnu                                            \
                                      --target=$(uname -m)-lfs-linux-gnu                                          \
                                      LDFLAGS_FOR_TARGET=-L${gcc_dir}/${gcc_pkg}/$(uname -m)-lfs-linux-gnu/libgcc \
                                      --prefix=/usr                                                               \
                                      --with-build-sysroot=${savelocation}                                        \
                                      --enable-default-pie                                                        \
                                      --enable-default-ssp                                                        \
                                      --disable-nls                                                               \
                                      --disable-multilib                                                          \
                                      --disable-libatomic                                                         \
                                      --disable-libgomp                                                           \
                                      --disable-libquadmath                                                       \
                                      --disable-libsanitizer                                                      \
                                      --disable-libssp                                                            \
                                      --disable-libvtv                                                            \
                                      --enable-languages=c,c++
    popd
    case $opt_one_job in
      1)
        make -C ${gcc_dir}/${gcc_pkg}
        make -C ${gcc_dir}/${gcc_pkg} DESTDIR=${savelocation} install
      ;;
      *)
        make -C ${gcc_dir}/${gcc_pkg} -j$(nproc)
        make -C ${gcc_dir}/${gcc_pkg} -j$(nproc) DESTDIR=${savelocation} install
    esac
    ln -sv ${gcc_dir}/${gcc_pkg}/gcc ${savelocation}/usr/bin/cc
    # Save progress
    echo "`sed '/save_temp_gcc/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_gcc=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Compiler Collection successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_gcc"
esac

# Chapter 7.2
if [[ -z "$save_chroot_ownership" ]]; then
  save_chroot_ownership=0
fi
case $save_chroot_ownership in
  1)
  ;;
  0)
    chown -R root:root ${savelocation}/{usr,lib,var,etc,bin,sbin,tools}
    case $(uname -m) in
      x86_64)
        chown -R root:root ${savelocation}/lib64 ;;
    esac
    # Save progress
    echo "`sed '/save_chroot_ownership/d'  $fullsavename`" > $fullsavename
    echo -e "save_chroot_ownership=1\n" >> $fullsavename
    echo -e "${success}Ownership routine in chroot is done.${default}"
  ;;
  *)
    save-error "save_chroot_ownership"
esac

# Chapter 7.3
if [[ -z "$save_virtual_filesystems" ]]; then
  save_virtual_filesystems=0
fi
case $save_virtual_filesystems in
  1)
  ;;
  0)
    mkdir -pv $savelocation/{dev,proc,sys,run}
    mount -v --bind  /dev  ${savelocation}/dev
    mount -vt devpts devpts -o gid=5,mode=0620 ${savelocation}/dev/pts
    mount -vt proc   proc  ${savelocation}/proc
    mount -vt sysfs  sysfs ${savelocation}/sys
    mount -vt tmpfs  tmpfs ${savelocation}/run
    if [ -h ${savelocation}/dev/shm ]; then
      install -v -d -m 1777 ${savelocation}$(realpath /dev/shm)
    else
      mount -vt tmpfs -o nosuid,nodev tmpfs ${savelocation}/dev/shm
    fi
    # Save progress
    echo "`sed '/save_virtual_filesystems/d'  $fullsavename`" > $fullsavename
    echo -e "save_virtual_filesystems=1\n" >> $fullsavename
    echo -e "${success}Ownership routine in chroot is done.${default}"
  ;;
  *)
    save-error "save_virtual_filesystems"
esac

# Download missing sources to chroot directory ($savelocation).
if [[ -z "$save_download_additional" ]]; then
  save_download_additional=0
fi
case $save_download_additional in
  1)
  ;;
  0)
    # GNU gettext utilities
    gettext_dir=${savelocation}/sources/gettext
    mkdir -pv $gettext_dir
    gettext_repo="https://ftp.gnu.org/gnu/gettext/"
    gettext_latest=$(curl -s "${gettext_repo}" | grep -Eo '(gettext-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${gettext_repo}/$gettext_latest --output ${gettext_dir}/${gettext_latest}
    checksum=`sha512sum ${gettext_dir}/${gettext_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/gettext.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $gettext_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$gettext_latest' might have malicious content inside.${default}"
      gettext_invalid_func() {
        read -p "Proceed anyway? (y,N):" gettext_invalid
        if [[ -z "$gettext_invalid" ]]; then
          gettext_invalid=n
        fi
        case $gettext_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) temporary GNU gettext utilities.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            gettext_invalid_func
        esac
      }
      gettext_invalid_func
    fi
    cd $gettext_dir
    echo -e "${info}Extracting $gettext_latest contents...${default}"
    tar -xf ${gettext_dir}/${gettext_latest}
    cd $OLDPWD
    # GNU Bison
    bison_dir=${savelocation}/sources/bison
    mkdir -pv $bison_dir
    bison_repo="https://ftp.gnu.org/gnu/bison/"
    bison_latest=$(curl -s "${bison_repo}" | grep -Eo '(bison-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${bison_repo}/$bison_latest --output ${bison_dir}/${bison_latest}
    checksum=`sha512sum ${bison_dir}/${bison_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/bison.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $bison_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$bison_latest' might have malicious content inside.${default}"
      bison_invalid_func() {
        read -p "Proceed anyway? (y,N):" bison_invalid
        if [[ -z "$bison_invalid" ]]; then
          bison_invalid=n
        fi
        case $bison_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) temporary GNU Bison.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            bison_invalid_func
        esac
      }
      bison_invalid_func
    fi
    cd $bison_dir
    echo -e "${info}Extracting $bison_latest contents...${default}"
    tar -xf ${bison_dir}/${bison_latest}
    cd $OLDPWD
    # Perl programming language
    perl_dir=${savelocation}/sources/perl
    mkdir -pv $perl_dir
    # Fixed version again
    perl_repo="https://www.cpan.org/src/5.0/perl-5.38.2.tar.xz"
    perl_pkg=perl-5.38.2
    curl ${perl_repo} --output ${perl_dir}/${perl_pkg}.tar.xz
    checksum=`sha512sum ${perl_dir}/${perl_pkg}.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/perl.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of ${perl_pkg}.tar.xz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '${perl_pkg}.tar.xz' might have malicious content inside.${default}"
      perl_invalid_func() {
        read -p "Proceed anyway? (y,N):" perl_invalid
        if [[ -z "$perl_invalid" ]]; then
          perl_invalid=n
        fi
        case $perl_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) temporary Perl programming language.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            perl_invalid_func
        esac
      }
      perl_invalid_func
    fi
    cd $perl_dir
    echo -e "${info}Extracting ${perl_pkg}.tar.xz contents...${default}"
    tar -xf ${perl_dir}/${perl_pkg}.tar.xz
    cd $OLDPWD
    # Python programming language
    python_dir=${savelocation}/sources/python
    mkdir -pv $python_dir
    # And another fixed version
    python_repo="https://www.python.org/ftp/python/3.12.2/Python-3.12.2.tar.xz"
    python_pkg=python-3.12.2
    curl ${python_repo} --output ${python_dir}/${python_pkg}.tar.xz
    checksum=`sha512sum ${python_dir}/${python_pkg}.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/python.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of ${python_pkg}.tar.xz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '${python_pkg}.tar.xz' might have malicious content inside.${default}"
      python_invalid_func() {
        read -p "Proceed anyway? (y,N):" python_invalid
        if [[ -z "$python_invalid" ]]; then
          python_invalid=n
        fi
        case $python_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) temporary Python programming language.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            python_invalid_func
        esac
      }
      python_invalid_func
    fi
    cd $python_dir
    echo -e "${info}Extracting ${python_pkg}.tar.xz contents...${default}"
    tar -xf ${python_dir}/${python_pkg}.tar.xz
    cd $OLDPWD
    # GNU Texinfo documentation system
    texinfo_dir=${savelocation}/sources/texinfo
    mkdir -pv $texinfo_dir
    texinfo_repo="https://ftp.gnu.org/gnu/texinfo/"
    texinfo_latest=$(curl -s "${texinfo_repo}" | grep -Eo '(texinfo-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${texinfo_repo}/$texinfo_latest --output ${texinfo_dir}/${texinfo_latest}
    checksum=`sha512sum ${texinfo_dir}/${texinfo_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/texinfo.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $texinfo_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$texinfo_latest' might have malicious content inside.${default}"
      texinfo_invalid_func() {
        read -p "Proceed anyway? (y,N):" texinfo_invalid
        if [[ -z "$texinfo_invalid" ]]; then
          texinfo_invalid=n
        fi
        case $texinfo_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) temporary GNU Texinfo documentation system.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            texinfo_invalid_func
        esac
      }
      texinfo_invalid_func
    fi
    cd $texinfo_dir
    echo -e "${info}Extracting $texinfo_latest contents...${default}"
    tar -xf ${texinfo_dir}/${texinfo_latest}
    cd $OLDPWD
    # util-linux package
    util_linux_dir=${savelocation}/sources/util-linux
    mkdir -pv $util_linux_dir
    # And yet another fixed version
    util_linux_repo="https://www.kernel.org/pub/linux/utils/util-linux/v2.39/util-linux-2.39.3.tar.xz"
    util_linux_pkg=util_linux-2.39.3
    curl ${util_linux_repo} --output ${util_linux_dir}/${util_linux_pkg}.tar.xz
    checksum=`sha512sum ${util_linux_dir}/${util_linux_pkg}.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/util-linux.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of ${util_linux_pkg}.tar.xz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '${util_linux_pkg}.tar.xz' might have malicious content inside.${default}"
      util_linux_invalid_func() {
        read -p "Proceed anyway? (y,N):" util_linux_invalid
        if [[ -z "$util_linux_invalid" ]]; then
          util_linux_invalid=n
        fi
        case $util_linux_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) temporary util-linux package.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            util_linux_invalid_func
        esac
      }
      util_linux_invalid_func
    fi
    cd $util_linux_dir
    echo -e "${info}Extracting ${util_linux_pkg}.tar.xz contents...${default}"
    tar -xf ${util_linux_dir}/${util_linux_pkg}.tar.xz
    cd $OLDPWD
    # Save progress
    echo "`sed '/save_download_additional/d'  $fullsavename`" > $fullsavename
    echo -e "save_download_additional=1\n" >> $fullsavename
    echo -e "${success}Done downloading additional temporary tools.${default}"
  ;;
  *)
    save-error "save_download_additional"
esac

# Download final Linux From Scratch packages
if [[ -z "$save_download_final" ]]; then
  save_download_final=0
fi
case $save_download_final in
  1)
  ;;
  0)
    # Linux Man-pages (2400 pages of various documentation related to Linux programming and maintaining the system)
    man_pages_dir=${savelocation}/sources/man-pages
    mkdir -pv $man_pages_dir
    man_pages_repo="https://mirrors.edge.kernel.org/pub/linux/docs/man-pages/"
    man_pages_latest=$(curl -s "${man_pages_repo}" | grep -Eo '(man-pages-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${man_pages_repo}/$man_pages_latest --output ${man_pages_dir}/${man_pages_latest}
    checksum=`sha512sum ${man_pages_dir}/${man_pages_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/man-pages.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $man_pages_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$man_pages_latest' might have malicious content inside.${default}"
      man_pages_invalid_func() {
        read -p "Proceed anyway? (y,N):" man_pages_invalid
        if [[ -z "$man_pages_invalid" ]]; then
          man_pages_invalid=n
        fi
        case $man_pages_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) temporary Linux Man-pages.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            man_pages_invalid_func
        esac
      }
      man_pages_invalid_func
    fi
    cd $man_pages_dir
    echo -e "${info}Extracting $man_pages_latest contents...${default}"
    tar -xf ${man_pages_dir}/${man_pages_latest}
    cd $OLDPWD
    # Iana-Etc package
    iana_etc_dir=${savelocation}/sources/iana-etc
    mkdir -pv $iana_etc_dir
    # Fixed version
    iana_etc_repo="https://github.com/Mic92/iana-etc/releases/download/20240125/iana-etc-20240125.tar.gz"
    iana_etc_latest=iana-etc-20240125
    curl $iana_etc_repo --output ${iana_etc_dir}/${iana_etc_latest}.tar.gz
    checksum=`sha512sum ${iana_etc_dir}/${iana_etc_latest}.tar.gz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/iana-etc.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of ${iana_etc_latest}.tar.gz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '${iana_etc_latest}.tar.gz' might have malicious content inside.${default}"
      iana_etc_invalid_func() {
        read -p "Proceed anyway? (y,N):" iana_etc_invalid
        if [[ -z "$iana_etc_invalid" ]]; then
          iana_etc_invalid=n
        fi
        case $iana_etc_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) temporary Iana-Etc package.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            iana_etc_invalid_func
        esac
      }
      iana_etc_invalid_func
    fi
    cd $iana_etc_dir
    echo -e "${info}Extracting ${iana_etc_latest}.tar.gz contents...${default}"
    tar -xf ${iana_etc_dir}/${iana_etc_latest}.tar.gz
    cd $OLDPWD
    # Time Zone Database
    tzd_dir=${savelocation}/sources/tzd
    mkdir -pv $tzd_dir
    tzd_repo="https://data.iana.org/time-zones/releases/"
    tzd_latest=$(curl -s "${tzd_repo}" | grep -Eo '(tzdata[0-9]+[a-z]*.tar.gz' | sort -V | tail -1)
    # Remove an unexpected newline from the beginning
    tzd_latest=${tzd_latest#\n}
    curl ${tzd_repo}/$tzd_latest --output ${tzd_dir}/${tzd_latest}
    checksum=`sha512sum ${tzd_dir}/${tzd_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/tzd.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $tzd_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$tzd_latest' might have malicious content inside.${default}"
      tzd_invalid_func() {
        read -p "Proceed anyway? (y,N):" tzd_invalid
        if [[ -z "$tzd_invalid" ]]; then
          tzd_invalid=n
        fi
        case $tzd_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Time Zone Database.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            tzd_invalid_func
        esac
      }
      tzd_invalid_func
    fi
    cd $tzd_dir
    echo -e "${info}Extracting $tzd_latest contents...${default}"
    tar -xf ${tzd_dir}/${tzd_latest}
    cd $OLDPWD
    # Zlib, A Massively Spiffy Yet Delicately Unobtrusive Compression Library
    zlib_dir=${savelocation}/sources/zlib
    mkdir -pv $zlib_dir
    zlib_repo="https://www.zlib.net/fossils/"
    zlib_latest=$(curl -s "${zlib_repo}" | grep -Eo '(zlib-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${zlib_repo}/$zlib_latest --output ${zlib_dir}/${zlib_latest}
    checksum=`sha512sum ${zlib_dir}/${zlib_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/zlib.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $zlib_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$zlib_latest' might have malicious content inside.${default}"
      zlib_invalid_func() {
        read -p "Proceed anyway? (y,N):" zlib_invalid
        if [[ -z "$zlib_invalid" ]]; then
          zlib_invalid=n
        fi
        case $zlib_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Zlib, A Massively Spiffy Yet Delicately Unobtrusive Compression Library.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            zlib_invalid_func
        esac
      }
      zlib_invalid_func
    fi
    cd $zlib_dir
    echo -e "${info}Extracting $zlib_latest contents...${default}"
    tar -xf ${zlib_dir}/${zlib_latest}
    cd $OLDPWD
    # bzip2 data compressor
    bzip2_dir=${savelocation}/sources/bzip2
    mkdir -pv $bzip2_dir
    bzip2_repo="https://sourceware.org/pub/bzip2/"
    bzip2_latest=$(curl -s "${bzip2_repo}" | grep -Eo '(bzip2-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${bzip2_repo}/$bzip2_latest --output ${bzip2_dir}/${bzip2_latest}
    checksum=`sha512sum ${bzip2_dir}/${bzip2_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/bzip2.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $bzip2_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$bzip2_latest' might have malicious content inside.${default}"
      bzip2_invalid_func() {
        read -p "Proceed anyway? (y,N):" bzip2_invalid
        if [[ -z "$bzip2_invalid" ]]; then
          bzip2_invalid=n
        fi
        case $bzip2_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) bzip2 data compressor.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            bzip2_invalid_func
        esac
      }
      bzip2_invalid_func
    fi
    cd $bzip2_dir
    echo -e "${info}Extracting $bzip2_latest contents...${default}"
    tar -xf ${bzip2_dir}/${bzip2_latest}
    cd $OLDPWD
    # Zstandard data compression algorithm
    zstd_dir=${savelocation}/sources/zstd
    mkdir -pv $zstd_dir
    zstd_repo="https://github.com/facebook/zstd/releases"
    # GitHub should provide oversimplified sites for downloading just like https://ftp.gnu.org/ did
    zstd_latest=$(curl -s "${zstd_repo}" | grep -Eo 'Zstandard v([0-9]+([.][0-9]*)*)+' | sort -V | tail -1)
    zstd_latest=${zstd_latest#Zstandard }
    zstd_latest=${zstd_latest%'<'}
    zstd_ver=${zstd_latest#v}
    curl ${zstd_repo}/download/${zstd_latest}/zstd-${zstd_ver}.tar.gz --output ${zstd_dir}/zstd-${zstd_ver}.tar.gz
    checksum=`sha512sum ${zstd_dir}/zstd-${zstd_ver} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/zstd.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of zstd-${zstd_ver}.tar.gz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball 'zstd-${zstd_ver}.tar.gz' might have malicious content inside.${default}"
      zstd_invalid_func() {
        read -p "Proceed anyway? (y,N):" zstd_invalid
        if [[ -z "$zstd_invalid" ]]; then
          zstd_invalid=n
        fi
        case $zstd_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Zstandard data compression algorithm.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            zstd_invalid_func
        esac
      }
      zstd_invalid_func
    fi
    cd $zlib_dir
    echo -e "${info}Extracting zstd-${zstd_ver}.tar.gz contents...${default}"
    tar -xf ${zstd_dir}/zstd-${zstd_ver}.tar.gz
    cd $OLDPWD
    # GNU Readline library
    readline_dir=${savelocation}/sources/readline
    mkdir -pv $readline_dir
    readline_repo="https://ftp.gnu.org/gnu/readline/"
    readline_latest=$(curl -s "${readline_repo}" | grep -Eo '(readline-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${readline_repo}/$readline_latest --output ${readline_dir}/${readline_latest}
    checksum=`sha512sum ${readline_dir}/${readline_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/readline.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $readline_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$readline_latest' might have malicious content inside.${default}"
      readline_invalid_func() {
        read -p "Proceed anyway? (y,N):" readline_invalid
        if [[ -z "$readline_invalid" ]]; then
          readline_invalid=n
        fi
        case $readline_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Readline library.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            readline_invalid_func
        esac
      }
      readline_invalid_func
    fi
    cd $readline_dir
    echo -e "${info}Extracting $readline_latest contents...${default}"
    tar -xf ${readline_dir}/${readline_latest}
    cd $OLDPWD
    readline_patch_dir=$(basename "$readline_latest" .tar.gz)
    readline_patch_repo="https://www.linuxfromscratch.org/patches/lfs/12.1/readline-8.2-upstream_fixes-3.patch"
    readline_patch_name=readline-8.2-upstream_fixes-3.patch
    patch_checksum=`sha512sum ${readline_dir}/${readline_patch_dir}/${readline_patch_name} | awk '{print $1}'`
    curl ${readline_patch_repo} --output ${readline_dir}/${readline_patch_dir}/$readline_patch_name
    if [ "$checksum" != "`cat /etc/lfs-install/readline-patch.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $readline_patch_name does not match the trusted one."
      echo    "This means the patch was updated recently, or the repository was attacked."
      echo -e "$readline_patch_name might have malicious content inside.${default}"
      readline_patch_invalid_func() {
        read -p "Proceed anyway? (y,N):" readline_patch_invalid
        if [[ -z "$readline_patch_invalid" ]]; then
          readline_patch_invalid=n
        fi
        case $readline_patch_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Readline library.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            readline_patch_invalid_func
        esac
      }
      readline_patch_invalid_func
    fi
    # GNU bc arbitrary precision numeric processing language
    bc_dir=${savelocation}/sources/bc
    mkdir -pv $bc_dir
    bc_repo="https://ftp.gnu.org/gnu/bc/"
    bc_latest=$(curl -s "${bc_repo}" | grep -Eo '(bc-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${bc_repo}/$bc_latest --output ${bc_dir}/${bc_latest}
    checksum=`sha512sum ${bc_dir}/${bc_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/bc.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $bc_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$bc_latest' might have malicious content inside.${default}"
      bc_invalid_func() {
        read -p "Proceed anyway? (y,N):" bc_invalid
        if [[ -z "$bc_invalid" ]]; then
          bc_invalid=n
        fi
        case $bc_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU bc arbitrary precision numeric processing language.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            bc_invalid_func
        esac
      }
      bc_invalid_func
    fi
    cd $bc_dir
    echo -e "${info}Extracting $bc_latest contents...${default}"
    tar -xf ${bc_dir}/${bc_latest}
    cd $OLDPWD
    # flex, the Fast Lexical Analyzer
    flex_dir=${savelocation}/sources/flex
    mkdir -pv $flex_dir
    # pain
    flex_repo="https://github.com/westes/flex/releases"
    flex_latest=$(curl -s "${flex_repo}" | grep -Eo 'flex v([0-9]+([.][0-9]*)*)+' | sort -V | tail -1)
    flex_latest=${flex_latest#flex }
    flex_latest=${flex_latest%'<'}
    flex_ver=${flex_latest#v}
    curl ${flex_repo}/download/${flex_latest}/flex-${flex_ver}.tar.gz --output ${flex_dir}/flex-${flex_ver}.tar.gz
    checksum=`sha512sum ${flex_dir}/flex-${flex_ver} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/flex.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of flex-${flex_ver}.tar.gz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball 'flex-${flex_ver}.tar.gz' might have malicious content inside.${default}"
      flex_invalid_func() {
        read -p "Proceed anyway? (y,N):" flex_invalid
        if [[ -z "$flex_invalid" ]]; then
          flex_invalid=n
        fi
        case $flex_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) flex, the Fast Lexical Analyzer.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            flex_invalid_func
        esac
      }
      flex_invalid_func
    fi
    cd $flex_dir
    echo -e "${info}Extracting flex-${flex_ver}.tar.gz contents...${default}"
    tar -xf ${flex_dir}/flex-${flex_ver}.tar.gz
    cd $OLDPWD
    # Tool Command Language
    tcl_dir=${savelocation}/sources/tcl
    mkdir -pv $tcl_dir
    # SourceForge turns out to be even more difficult than GitHub,
    # because people here usually name version folders in format "X.X.X",
    # and this messes up searching via `curl -s <repo>' even more
    tcl_repo="https://downloads.sourceforge.net/tcl/tcl8.6.13-src.tar.gz"
    tcl_latest=tcl8.6.13-src
    curl --location ${tcl_repo} --output ${tcl_dir}/${tcl_latest}.tar.gz
    checksum=`sha512sum ${tcl_dir}/${tcl_latest}.tar.gz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/tcl.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of ${tcl_latest}.tar.gz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '${tcl_latest}.tar.gz' might have malicious content inside.${default}"
      tcl_invalid_func() {
        read -p "Proceed anyway? (y,N):" tcl_invalid
        if [[ -z "$tcl_invalid" ]]; then
          tcl_invalid=n
        fi
        case $tcl_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Tool Command Language.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            tcl_invalid_func
        esac
      }
      tcl_invalid_func
    fi
    cd $tcl_dir
    echo -e "${info}Extracting ${tcl_latest}.tar.gz contents...${default}"
    tar -xf ${tcl_dir}/${tcl_latest}.tar.gz
    cd $OLDPWD
    # Expect package
    expect_dir=${savelocation}/sources/expect
    mkdir -pv $expect_dir
    expect_repo="https://prdownloads.sourceforge.net/expect/expect5.45.4.tar.gz"
    expect_latest=expect5.45.4
    curl --location ${expect_repo} --output ${expect_dir}/${expect_latest}.tar.gz
    checksum=`sha512sum ${expect_dir}/${expect_latest}.tar.gz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/expect.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of ${expect_latest}.tar.gz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '${expect_latest}.tar.gz' might have malicious content inside.${default}"
      expect_invalid_func() {
        read -p "Proceed anyway? (y,N):" expect_invalid
        if [[ -z "$expect_invalid" ]]; then
          expect_invalid=n
        fi
        case $expect_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Expect package.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            expect_invalid_func
        esac
      }
      expect_invalid_func
    fi
    cd $expect_dir
    echo -e "${info}Extracting ${expect_latest}.tar.gz contents...${default}"
    tar -xf ${expect_dir}/${expect_latest}.tar.gz
    cd $OLDPWD
    # DejaGNU framework
    dejagnu_dir=${savelocation}/sources/dejagnu
    mkdir -pv $dejagnu_dir
    dejagnu_repo="https://ftp.gnu.org/gnu/dejagnu/"
    dejagnu_latest=$(curl -s "${dejagnu_repo}" | grep -Eo '(dejagnu-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${dejagnu_repo}/$dejagnu_latest --output ${dejagnu_dir}/${dejagnu_latest}
    checksum=`sha512sum ${dejagnu_dir}/${dejagnu_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/dejagnu.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $dejagnu_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$dejagnu_latest' might have malicious content inside.${default}"
      dejagnu_invalid_func() {
        read -p "Proceed anyway? (y,N):" dejagnu_invalid
        if [[ -z "$dejagnu_invalid" ]]; then
          dejagnu_invalid=n
        fi
        case $dejagnu_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) DejaGNU framework.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            dejagnu_invalid_func
        esac
      }
      dejagnu_invalid_func
    fi
    cd $dejagnu_dir
    echo -e "${info}Extracting $dejagnu_latest contents...${default}"
    tar -xf ${dejagnu_dir}/${dejagnu_latest}
    cd $OLDPWD
    # Pkgconf package
    pkgconf_dir=${savelocation}/sources/pkgconf
    mkdir -pv $pkgconf_dir
    pkgconf_repo="https://distfiles.ariadne.space/pkgconf/"
    pkgconf_latest=$(curl -s "${pkgconf_repo}" | grep -Eo '(pkgconf-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${pkgconf_repo}/$pkgconf_latest --output ${pkgconf_dir}/${pkgconf_latest}
    checksum=`sha512sum ${pkgconf_dir}/${pkgconf_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/pkgconf.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $pkgconf_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$pkgconf_latest' might have malicious content inside.${default}"
      pkgconf_invalid_func() {
        read -p "Proceed anyway? (y,N):" pkgconf_invalid
        if [[ -z "$pkgconf_invalid" ]]; then
          pkgconf_invalid=n
        fi
        case $pkgconf_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Pkgconf package.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            pkgconf_invalid_func
        esac
      }
      pkgconf_invalid_func
    fi
    cd $pkgconf_dir
    echo -e "${info}Extracting $pkgconf_latest contents...${default}"
    tar -xf ${pkgconf_dir}/${pkgconf_latest}
    cd $OLDPWD
    # Attr, Commands for Manipulating Filesystem Extended Attributes
    attr_dir=${savelocation}/sources/attr
    mkdir -pv $attr_dir
    attr_repo="https://download.savannah.gnu.org/releases/attr/"
    attr_latest=$(curl -s "${attr_repo}" | grep -Eo '(attr-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${attr_repo}/$attr_latest --output ${attr_dir}/${attr_latest}
    checksum=`sha512sum ${attr_dir}/${attr_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/attr.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $attr_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$attr_latest' might have malicious content inside.${default}"
      attr_invalid_func() {
        read -p "Proceed anyway? (y,N):" attr_invalid
        if [[ -z "$attr_invalid" ]]; then
          attr_invalid=n
        fi
        case $attr_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Attr, Commands for Manipulating Filesystem Extended Attributes.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            attr_invalid_func
        esac
      }
      attr_invalid_func
    fi
    cd $attr_dir
    echo -e "${info}Extracting $attr_latest contents...${default}"
    tar -xf ${attr_dir}/${attr_latest}
    cd $OLDPWD
    # Acl, Commands for Manipulating POSIX Access Control Lists
    acl_dir=${savelocation}/sources/acl
    mkdir -pv $acl_dir
    acl_repo="https://download.savannah.gnu.org/releases/acl/"
    acl_latest=$(curl -s "${acl_repo}" | grep -Eo '(acl-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${acl_repo}/$acl_latest --output ${acl_dir}/${acl_latest}
    checksum=`sha512sum ${acl_dir}/${acl_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/acl.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $acl_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$acl_latest' might have malicious content inside.${default}"
      acl_invalid_func() {
        read -p "Proceed anyway? (y,N):" acl_invalid
        if [[ -z "$acl_invalid" ]]; then
          acl_invalid=n
        fi
        case $acl_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Acl, Commands for Manipulating POSIX Access Control Lists.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            acl_invalid_func
        esac
      }
      acl_invalid_func
    fi
    cd $acl_dir
    echo -e "${info}Extracting $acl_latest contents...${default}"
    tar -xf ${acl_dir}/${acl_latest}
    cd $OLDPWD
    # Libcap, an implementation of the userspace interface to the POSIX 1003.1e capabilities
    libcap_dir=${savelocation}/sources/libcap
    mkdir -pv $libcap_dir
    libcap_repo="https://mirrors.edge.kernel.org/pub/linux/libs/security/linux-privs/libcap2/"
    libcap_latest=$(curl -s "${libcap_repo}" | grep -Eo '(libcap-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${libcap_repo}/$libcap_latest --output ${libcap_dir}/${libcap_latest}
    checksum=`sha512sum ${libcap_dir}/${libcap_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/libcap.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $libcap_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$libcap_latest' might have malicious content inside.${default}"
      libcap_invalid_func() {
        read -p "Proceed anyway? (y,N):" libcap_invalid
        if [[ -z "$libcap_invalid" ]]; then
          libcap_invalid=n
        fi
        case $libcap_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Libcap, an implementation of the userspace interface to the POSIX 1003.1e capabilities.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            libcap_invalid_func
        esac
      }
      libcap_invalid_func
    fi
    cd $libcap_dir
    echo -e "${info}Extracting $libcap_latest contents...${default}"
    tar -xf ${libcap_dir}/${libcap_latest}
    cd $OLDPWD
    # Libxcrypt, a modern library for one-way hashing of passwords
    libxcrypt_dir=${savelocation}/sources/libxcrypt
    mkdir -pv $libxcrypt_dir
    libxcrypt_repo="https://github.com/besser82/libxcrypt/releases"
    libxcrypt_latest=$(curl -s "${libxcrypt_repo}" | grep -Eo 'v([0-9]+([.][0-9]*)*)+' | sort -V | tail -1)
    libxcrypt_ver=${libxcrypt_latest#v}
    curl ${libxcrypt_repo}/download/${libxcrypt_latest}/libxcrypt-${libxcrypt_ver}.tar.xz --output ${libxcrypt_dir}/libxcrypt-${libxcrypt_ver}.tar.xz
    libxcrypt_latest=libxcrypt-${libxcrypt_ver}
    unset libxcrypt_ver
    checksum=`sha512sum ${libxcrypt_dir}/${libxcrypt_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/libxcrypt.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $libxcrypt_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$libxcrypt_latest' might have malicious content inside.${default}"
      libxcrypt_invalid_func() {
        read -p "Proceed anyway? (y,N):" libxcrypt_invalid
        if [[ -z "$libxcrypt_invalid" ]]; then
          libxcrypt_invalid=n
        fi
        case $libxcrypt_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Libxcrypt, a modern library for one-way hashing of passwords.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            libxcrypt_invalid_func
        esac
      }
      libxcrypt_invalid_func
    fi
    cd $libxcrypt_dir
    echo -e "${info}Extracting ${libxcrypt_latest}.tar.xz contents...${default}"
    tar -xf ${libxcrypt_dir}/${libxcrypt_latest}.tar.xz
    cd $OLDPWD
    # Shadow, programs for handling passwords in a secure way
    shadow_dir=${savelocation}/sources/shadow
    mkdir -pv $shadow_dir
    shadow_repo="https://github.com/shadow-maint/shadow/releases/"
    shadow_latest=$(curl -s "${shadow_repo}" | grep -Eo '([0-9]+([.][0-9]*)*)+:' | sort -V | tail -1)
    shadow_latest=${shadow_latest%':'}
    curl ${shadow_repo}/download/${shadow_latest}/shadow-${shadow_latest}.tar.xz --output ${shadow_dir}/shadow-${shadow_latest}.tar.xz
    shadow_latest=shadow-${shadow_latest}
    checksum=`sha512sum ${shadow_dir}/${shadow_latest}.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/shadow.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $shadow_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$shadow_latest' might have malicious content inside.${default}"
      shadow_invalid_func() {
        read -p "Proceed anyway? (y,N):" shadow_invalid
        if [[ -z "$shadow_invalid" ]]; then
          shadow_invalid=n
        fi
        case $shadow_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Shadow, programs for handling passwords in a secure way.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            shadow_invalid_func
        esac
      }
      shadow_invalid_func
    fi
    cd $shadow_dir
    echo -e "${info}Extracting ${shadow_latest}.tar.xz contents...${default}"
    tar -xf ${shadow_dir}/${shadow_latest}.tar.xz
    cd $OLDPWD
    # Psmisc, miscellaneous utilities that use the proc filesystem
    psmisc_dir=${savelocation}/sources/psmisc
    mkdir -pv $psmisc_dir
    # Linux From Scratch doesn't offer the latest version,
    # but I'm still paying huge respect to Psmisc SourceForge repository maintainer(s) for comfortable file organization,
    # as version checking will be very useful for updating LinuxHome repository.
    psmisc_repo="https://sourceforge.net/projects/psmisc/files/psmisc/psmisc-23.6.tar.xz"
    psmisc_latest=psmisc-23.6
    curl --location ${psmisc_repo} --output ${pscmisc_dir}/${psmisc_latest}.tar.xz
    checksum=`sha512sum ${psmisc_dir}/${psmisc_latest}.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/psmisc.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $psmisc_latest.tar.xz does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$psmisc_latest.tar.xz' might have malicious content inside.${default}"
      psmisc_invalid_func() {
        read -p "Proceed anyway? (y,N):" psmisc_invalid
        if [[ -z "$psmisc_invalid" ]]; then
          psmisc_invalid=n
        fi
        case $psmisc_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Psmisc, miscellaneous utilities that use the proc filesystem.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            psmisc_invalid_func
        esac
      }
      psmisc_invalid_func
    fi
    cd $psmisc_dir
    echo -e "${info}Extracting ${psmisc_latest}.tar.xz contents...${default}"
    tar -xf ${psmisc_dir}/${psmisc_latest}.tar.xz
    cd $OLDPWD

    # GNU Bash shell LFS patch
    bash_dir=/sources/bash
    bash_pkg=$(basename "`ls $bash_dir | grep bash*/`" /)
    bash_patch_repo=https://www.linuxfromscratch.org/patches/lfs/12.1/bash-5.2.21-upstream_fixes-1.patch
    curl $bash_patch_repo --output ${bash_dir}/${bash_pkg}/bash-5.2.21-upstream_fixes-1.patch
    checksum=`sha512sum ${bash_dir}/${bash_pkg}/bash-5.2.21-upstream_fixes-1.patch | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/bash-patch.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of bash-5.2.21-upstream-fixes-1.patch does not match the trusted one."
      echo    "This means the patch was updated recently, or the repository was attacked."
      echo -e "bash-5.2.21-upstream_fixes-1.patch might have malicious content inside.${default}"
      bash_patch_invalid_func() {
        read -p "Proceed anyway? (y,N):" bash_patch_invalid
        if [[ -z "$bash_patch_invalid" ]]; then
          bash_patch_invalid=n
        fi
        case $bash_patch_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Bash shell LFS patch.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            bash_patch_invalid_func
        esac
      }
      bash_patch_invalid_func
    fi

    # GNU Libtool generic library support script
    libtool_dir=${savelocation}/sources/libtool
    mkdir -pv $libtool_dir
    libtool_repo="https://ftp.gnu.org/gnu/libtool/"
    libtool_latest=$(curl -s "${libtool_repo}" | grep -Eo '(libtool-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${libtool_repo}/$libtool_latest --output ${libtool_dir}/${libtool_latest}
    checksum=`sha512sum ${libtool_dir}/${libtool_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/libtool.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $libtool_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$libtool_latest' might have malicious content inside.${default}"
      libtool_invalid_func() {
        read -p "Proceed anyway? (y,N):" libtool_invalid
        if [[ -z "$libtool_invalid" ]]; then
          libtool_invalid=n
        fi
        case $libtool_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Libtool generic library support script.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            libtool_invalid_func
        esac
      }
      libtool_invalid_func
    fi
    cd $libtool_dir
    echo -e "${info}Extracting $libtool_latest contents...${default}"
    tar -xf ${libtool_dir}/${libtool_latest}
    cd $OLDPWD
    # GNU Database Manager
    gdbm_dir=${savelocation}/sources/gdbm
    mkdir -pv $gdbm_dir
    gdbm_repo="https://ftp.gnu.org/gnu/gdbm/"
    gdbm_latest=$(curl -s "${gdbm_repo}" | grep -Eo '(gdbm-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${gdbm_repo}/$gdbm_latest --output ${gdbm_dir}/${gdbm_latest}
    checksum=`sha512sum ${gdbm_dir}/${gdbm_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/gdbm.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $gdbm_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$gdbm_latest' might have malicious content inside.${default}"
      gdbm_invalid_func() {
        read -p "Proceed anyway? (y,N):" gdbm_invalid
        if [[ -z "$gdbm_invalid" ]]; then
          gdbm_invalid=n
        fi
        case $gdbm_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Database Manager.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            gdbm_invalid_func
        esac
      }
      gdbm_invalid_func
    fi
    cd $gdbm_dir
    echo -e "${info}Extracting $gdbm_latest contents...${default}"
    tar -xf ${gdbm_dir}/${gdbm_latest}
    cd $OLDPWD
    # GNU gperf, a perfect hash function generator
    gperf_dir=${savelocation}/sources/gperf
    mkdir -pv $gperf_dir
    gperf_repo="https://ftp.gnu.org/gnu/gperf/"
    gperf_latest=$(curl -s "${gperf_repo}" | grep -Eo '(gperf-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${gperf_repo}/$gperf_latest --output ${gperf_dir}/${gperf_latest}
    checksum=`sha512sum ${gperf_dir}/${gperf_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/gperf.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $gperf_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$gperf_latest' might have malicious content inside.${default}"
      gperf_invalid_func() {
        read -p "Proceed anyway? (y,N):" gperf_invalid
        if [[ -z "$gperf_invalid" ]]; then
          gperf_invalid=n
        fi
        case $gperf_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU gperf, a perfect hash function generator.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            gperf_invalid_func
        esac
      }
      gperf_invalid_func
    fi
    cd $gperf_dir
    echo -e "${info}Extracting $gperf_latest contents...${default}"
    tar -xf ${gperf_dir}/${gperf_latest}
    cd $OLDPWD
    # Expat, a stream-oriented XML parser library
    expat_dir=${savelocation}/sources/expat
    mkdir -pv $expat_dir
    # The version '2.6.0', which is included in the Book,
    # is considered vulnerable by Expat maintainer(s),
    # so we download '2.6.2'
    expat_repo="https://prdownloads.sourceforge.net/expat/expat-2.6.2.tar.xz"
    expat_latest=expat-2.6.2.tar.xz
    curl --location $expat_repo --output ${expat_dir}/${expat_latest}
    checksum=`sha512sum ${expat_dir}/${expat_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/expat.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $expat_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$expat_latest' might have malicious content inside.${default}"
      expat_invalid_func() {
        read -p "Proceed anyway? (y,N):" expat_invalid
        if [[ -z "$expat_invalid" ]]; then
          expat_invalid=n
        fi
        case $expat_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Expat, a stream-oriented XML parser library.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            expat_invalid_func
        esac
      }
      expat_invalid_func
    fi
    cd $expat_dir
    echo -e "${info}Extracting $expat_latest contents...${default}"
    tar -xf ${expat_dir}/${expat_latest}
    cd $OLDPWD
    # GNU Inetutils, a collection of common network programs
    inetutils_dir=${savelocation}/sources/inetutils
    mkdir -pv $inetutils_dir
    inetutils_repo="https://ftp.gnu.org/gnu/inetutils/"
    inetutils_latest=$(curl -s "${inetutils_repo}" | grep -Eo '(inetutils-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${inetutils_repo}/$inetutils_latest --output ${inetutils_dir}/${inetutils_latest}
    checksum=`sha512sum ${inetutils_dir}/${inetutils_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/inetutils.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $inetutils_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$inetutils_latest' might have malicious content inside.${default}"
      inetutils_invalid_func() {
        read -p "Proceed anyway? (y,N):" inetutils_invalid
        if [[ -z "$inetutils_invalid" ]]; then
          inetutils_invalid=n
        fi
        case $inetutils_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Inetutils, a collection of common network programs.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            inetutils_invalid_func
        esac
      }
      inetutils_invalid_func
    fi
    cd $inetutils_dir
    echo -e "${info}Extracting $inetutils_latest contents...${default}"
    tar -xf ${inetutils_dir}/${inetutils_latest}
    cd $OLDPWD
    # GNU Less, a file pager
    less_dir=${savelocation}/sources/less
    mkdir -pv $less_dir
    less_repo="https://ftp.gnu.org/gnu/less/"
    less_latest=$(curl -s "${less_repo}" | grep -Eo 'less-[0-9]+.tar.gz' | sort -V | tail -1)
    curl ${less_repo}/$less_latest --output ${less_dir}/${less_latest}
    checksum=`sha512sum ${less_dir}/${less_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/less.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $less_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$less_latest' might have malicious content inside.${default}"
      less_invalid_func() {
        read -p "Proceed anyway? (y,N):" less_invalid
        if [[ -z "$less_invalid" ]]; then
          less_invalid=n
        fi
        case $less_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Less, a file pager.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            less_invalid_func
        esac
      }
      less_invalid_func
    fi
    cd $less_dir
    echo -e "${info}Extracting $less_latest contents...${default}"
    tar -xf ${less_dir}/${less_latest}
    cd $OLDPWD
    # XML::Parser, a Perl module for parsing XML documents
    xml_parser_dir=${savelocation}/sources/xml::parser
    mkdir -pv $xml_parser_dir
    xml_parser_repo="https://cpan.metacpan.org/authors/id/T/TO/TODDR/"
    xml_parser_latest=$(curl -s "${xml_parser_repo}" | grep -Eo '(XML-Parser-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${xml_parser_repo}/$xml_parser_latest --output ${xml_parser_dir}/${xml_parser_latest}
    checksum=`sha512sum ${xml_parser_dir}/${xml_parser_latest} | awk '{print $1}'`
    # Windows naming limitations
    if [ "$checksum" != "`cat /etc/lfs-install/xml-parser.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $xml_parser_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$xml_parser_latest' might have malicious content inside.${default}"
      xml_parser_invalid_func() {
        read -p "Proceed anyway? (y,N):" xml_parser_invalid
        if [[ -z "$xml_parser_invalid" ]]; then
          xml_parser_invalid=n
        fi
        case $xml_parser_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) XML::Parser, a Perl module for parsing XML documents.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            xml_parser_invalid_func
        esac
      }
      xml_parser_invalid_func
    fi
    cd $xml_parser_dir
    echo -e "${info}Extracting $xml_parser_latest contents...${default}"
    tar -xf ${xml_parser_dir}/${xml_parser_latest}
    cd $OLDPWD
    # Intltool, an internationalization tool for extracting translatable strings from source files
    intltool_dir=${savelocation}/sources/intltool
    mkdir -pv $intltool_dir
    intltool_repo="https://launchpad.net/intltool/trunk/"
    intltool_latest=$(curl -s "${intltool_repo}" | grep -Eo "Latest version is" | awk '{print $4}')
    curl "${intltool_repo}/${intltool_latest}/+download/intltool-${intltool_latest}.tar.gz" --output ${intltool_dir}/intltool-${intltool_latest}.tar.gz
    intltool_latest=intltool-${intltool_latest}.tar.gz
    checksum=`sha512sum ${intltool_dir}/${intltool_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/intltool.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $intltool_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$intltool_latest' might have malicious content inside.${default}"
      intltool_invalid_func() {
        read -p "Proceed anyway? (y,N):" intltool_invalid
        if [[ -z "$intltool_invalid" ]]; then
          intltool_invalid=n
        fi
        case $intltool_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Intltool,"
            echo -e "an internationalization tool for extracting translatable strings from source files.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            intltool_invalid_func
        esac
      }
      intltool_invalid_func
    fi
    cd $intltool_dir
    echo -e "${info}Extracting $intltool_latest contents...${default}"
    tar -xf ${intltool_dir}/${intltool_latest}
    cd $OLDPWD
    # GNU Autoconf, programs for producing "configure" shell scripts
    autoconf_dir=${savelocation}/sources/autoconf
    mkdir -pv $autoconf_dir
    autoconf_repo="https://ftp.gnu.org/gnu/autoconf/"
    autoconf_latest=$(curl -s "${autoconf_repo}" | grep -Eo '(autoconf-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${autoconf_repo}/$autoconf_latest --output ${autoconf_dir}/${autoconf_latest}
    checksum=`sha512sum ${autoconf_dir}/${autoconf_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/autoconf.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $autoconf_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$autoconf_latest' might have malicious content inside.${default}"
      autoconf_invalid_func() {
        read -p "Proceed anyway? (y,N):" autoconf_invalid
        if [[ -z "$autoconf_invalid" ]]; then
          autoconf_invalid=n
        fi
        case $autoconf_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Autoconf, programs for producing 'configure' shell scripts.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            autoconf_invalid_func
        esac
      }
      autoconf_invalid_func
    fi
    cd $autoconf_dir
    echo -e "${info}Extracting $autoconf_latest contents...${default}"
    tar -xf ${autoconf_dir}/${autoconf_latest}
    cd $OLDPWD
    # GNU Automake, a tool for automatically generating "Makefile.in" files
    automake_dir=${savelocation}/sources/automake
    mkdir -pv $automake_dir
    automake_repo="https://ftp.gnu.org/gnu/automake/"
    automake_latest=$(curl -s "${automake_repo}" | grep -Eo '(automake-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${automake_repo}/$automake_latest --output ${automake_dir}/${automake_latest}
    checksum=`sha512sum ${automake_dir}/${automake_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/automake.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $automake_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$automake_latest' might have malicious content inside.${default}"
      automake_invalid_func() {
        read -p "Proceed anyway? (y,N):" automake_invalid
        if [[ -z "$automake_invalid" ]]; then
          automake_invalid=n
        fi
        case $automake_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Automake, a tool for automatically generating 'Makefile.in' files.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            automake_invalid_func
        esac
      }
      automake_invalid_func
    fi
    cd $automake_dir
    echo -e "${info}Extracting $automake_latest contents...${default}"
    tar -xf ${automake_dir}/${automake_latest}
    cd $OLDPWD
    # OpenSSL, a toolkit for general-purpose cryptography and secure communication
    openssl_dir=${savelocation}/sources/openssl
    mkdir -pv $openssl_dir
    openssl_repo="https://openssl.org/source/"
    openssl_latest=$(curl -s "${openssl_repo}" | grep -Eo '(openssl-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${openssl_repo}/$openssl_latest --output ${openssl_dir}/${openssl_latest}
    checksum=`sha512sum ${openssl_dir}/${openssl_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/openssl.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $openssl_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$openssl_latest' might have malicious content inside.${default}"
      openssl_invalid_func() {
        read -p "Proceed anyway? (y,N):" openssl_invalid
        if [[ -z "$openssl_invalid" ]]; then
          openssl_invalid=n
        fi
        case $openssl_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) OpenSSL, a toolkit for general-purpose cryptography and secure communication.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            openssl_invalid_func
        esac
      }
      openssl_invalid_func
    fi
    cd $openssl_dir
    echo -e "${info}Extracting $openssl_latest contents...${default}"
    tar -xf ${openssl_dir}/${openssl_latest}
    cd $OLDPWD
    # kmod, a Linux kernel module handler
    kmod_dir=${savelocation}/sources/kmod
    mkdir -pv $kmod_dir
    kmod_repo="https://mirrors.edge.kernel.org/pub/linux/utils/kernel/kmod/"
    kmod_latest=$(curl -s "${kmod_repo}" | grep -Eo 'kmod-[0-9]+.tar.xz' | sort -V | tail -1)
    curl ${kmod_repo}/$kmod_latest --output ${kmod_dir}/${kmod_latest}
    checksum=`sha512sum ${kmod_dir}/${kmod_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/kmod.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $kmod_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$kmod_latest' might have malicious content inside.${default}"
      kmod_invalid_func() {
        read -p "Proceed anyway? (y,N):" kmod_invalid
        if [[ -z "$kmod_invalid" ]]; then
          kmod_invalid=n
        fi
        case $kmod_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) kmod, a Linux kernel module handler.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            kmod_invalid_func
        esac
      }
      kmod_invalid_func
    fi
    cd $kmod_dir
    echo -e "${info}Extracting $kmod_latest contents...${default}"
    tar -xf ${kmod_dir}/${kmod_latest}
    cd $OLDPWD
    # GNU Elfutils (only Libelf will be installed, Elfutils seems to be fully installed only in Beyond Linux From Scratch)
    elfutils_dir=${savelocation}/sources/elfutils
    mkdir -pv $elfutils_dir
    # Fixed version
    elfutils_repo="https://sourceware.org/ftp/elfutils/0.190/elfutils-0.190.tar.bz2"
    elfutils_latest=elfutils-0.190.tar.bz2
    curl ${elfutils_repo} --output ${elfutils_dir}/${elfutils_latest}
    checksum=`sha512sum ${elfutils_dir}/${elfutils_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/elfutils.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $elfutils_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$elfutils_latest' might have malicious content inside.${default}"
      elfutils_invalid_func() {
        read -p "Proceed anyway? (y,N):" elfutils_invalid
        if [[ -z "$elfutils_invalid" ]]; then
          elfutils_invalid=n
        fi
        case $elfutils_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) ELF utilities.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            elfutils_invalid_func
        esac
      }
      elfutils_invalid_func
    fi
    cd $elfutils_dir
    echo -e "${info}Extracting $elfutils_latest contents...${default}"
    tar -xf ${elfutils_dir}/${elfutils_latest}
    cd $OLDPWD
    # Foreign Function Interface Library
    libffi_dir=${savelocation}/sources/libffi
    mkdir -pv $libffi_dir
    # And another fixed version
    libffi_repo="https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz"
    libffi_latest=libffi-3.4.4.tar.gz
    curl ${libffi_repo} --output ${libffi_dir}/${libffi_latest}
    checksum=`sha512sum ${libffi_dir}/${libffi_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/libffi.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $libffi_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$libffi_latest' might have malicious content inside.${default}"
      libffi_invalid_func() {
        read -p "Proceed anyway? (y,N):" libffi_invalid
        if [[ -z "$libffi_invalid" ]]; then
          libffi_invalid=n
        fi
        case $libffi_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Foreign Function Interface Library.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            libffi_invalid_func
        esac
      }
      libffi_invalid_func
    fi
    cd $libffi_dir
    echo -e "${info}Extracting $libffi_latest contents...${default}"
    tar -xf ${libffi_dir}/${libffi_latest}
    cd $OLDPWD
    # Flit-core, the distribution-building parts of Flit
    flit_core_dir=${savelocation}/sources/flit-core
    mkdir -pv $flit_core_dir
    # No releases on GitHub, and 'https://pypi.org/project/flit-core/#history' doesn't provide an efficient way of version naming
    flit_core_repo="https://pypi.org/packages/source/f/flit-core/flit_core-3.9.0.tar.gz"
    flit_core_latest=flit_core-3.9.0.tar.gz
    curl ${flit_core_repo} --output ${flit_core_dir}/${flit_core_latest}
    checksum=`sha512sum ${flit_core_dir}/${flit_core_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/flit-core.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $flit_core_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$flit_core_latest' might have malicious content inside.${default}"
      flit_core_invalid_func() {
        read -p "Proceed anyway? (y,N):" flit_core_invalid
        if [[ -z "$flit_core_invalid" ]]; then
          flit_core_invalid=n
        fi
        case $flit_core_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Flit-core, the distribution-building parts of Flit.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            flit_core_invalid_func
        esac
      }
      flit_core_invalid_func
    fi
    cd $flit_core_dir
    echo -e "${info}Extracting $flit_core_latest contents...${default}"
    tar -xf ${flit_core_dir}/${flit_core_latest}
    cd $OLDPWD
    # Wheel, a built-package format for Python
    wheel_dir=${savelocation}/sources/wheel
    mkdir -pv $wheel_dir
    # Fixed version
    wheel_repo="https://pypi.org/packages/source/w/wheel/wheel-0.42.0.tar.gz"
    wheel_latest=wheel-0.42.0.tar.gz
    curl ${wheel_repo} --output ${wheel_dir}/${wheel_latest}
    checksum=`sha512sum ${wheel_dir}/${wheel_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/wheel.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $wheel_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$wheel_latest' might have malicious content inside.${default}"
      wheel_invalid_func() {
        read -p "Proceed anyway? (y,N):" wheel_invalid
        if [[ -z "$wheel_invalid" ]]; then
          wheel_invalid=n
        fi
        case $wheel_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Wheel, a built-package format for Python.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            wheel_invalid_func
        esac
      }
      wheel_invalid_func
    fi
    cd $wheel_dir
    echo -e "${info}Extracting $wheel_latest contents...${default}"
    tar -xf ${wheel_dir}/${wheel_latest}
    cd $OLDPWD
    # Setuptools, a tool for Python package management
    setuptools_dir=${savelocation}/sources/setuptools
    mkdir -pv $setuptools_dir
    # Another fixed version
    setuptools_repo="https://pypi.org/packages/source/s/setuptools/setuptools-69.1.0.tar.gz"
    setuptools_latest=setuptools-69.1.0.tar.gz
    curl ${wheel_repo} --output ${setuptools_dir}/${setuptools_latest}
    checksum=`sha512sum ${setuptools_dir}/${setuptools_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/setuptools.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $setuptools_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$setuptools_latest' might have malicious content inside.${default}"
      setuptools_invalid_func() {
        read -p "Proceed anyway? (y,N):" setuptools_invalid
        if [[ -z "$setuptools_invalid" ]]; then
          setuptools_invalid=n
        fi
        case $setuptools_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Setuptools, a tool for Python package management.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            setuptools_invalid_func
        esac
      }
      setuptools_invalid_func
    fi
    cd $setuptools_dir
    echo -e "${info}Extracting $setuptools_latest contents...${default}"
    tar -xf ${setuptools_dir}/${setuptools_latest}
    cd $OLDPWD
    # Ninja, a small build system with a focus on speed
    ninja_dir=${savelocation}/sources/ninja
    mkdir -pv $ninja_dir
    ninja_repo="https://files.pythonhosted.org/packages/37/2c/d717d13a413d6f7579cdaa1e28e6e2c98de95461549b08d311c8a5bf4c51/ninja-1.11.1.1.tar.gz"
    ninja_latest=ninja-1.11.1.tar.gz
    curl ${ninja_repo} --output ${ninja_dir}/${ninja_latest}
    checksum=`sha512sum ${ninja_dir}/${ninja_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/ninja.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $ninja_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$ninja_latest' might have malicious content inside.${default}"
      ninja_invalid_func() {
        read -p "Proceed anyway? (y,N):" ninja_invalid
        if [[ -z "$ninja_invalid" ]]; then
          ninja_invalid=n
        fi
        case $ninja_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Ninja, a small build system with a focus on speed.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            ninja_invalid_func
        esac
      }
      ninja_invalid_func
    fi
    cd $ninja_dir
    echo -e "${info}Extracting $ninja_latest contents...${default}"
    tar -xf ${ninja_dir}/${ninja_latest}
    cd $OLDPWD
    # Meson, a build system designed to be extremely fast and as user friendly as possible
    meson_dir=${savelocation}/sources/meson
    mkdir -pv $meson_dir
    # Fixed version
    meson_repo="https://github.com/mesonbuild/meson/releases/download/1.3.2/meson-1.3.2.tar.gz"
    meson_latest=meson-1.3.2.tar.gz
    curl ${meson_repo} --output ${meson_dir}/${meson_latest}
    checksum=`sha512sum ${meson_dir}/${meson_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/meson.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $meson_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$meson_latest' might have malicious content inside.${default}"
      meson_invalid_func() {
        read -p "Proceed anyway? (y,N):" meson_invalid
        if [[ -z "$meson_invalid" ]]; then
          meson_invalid=n
        fi
        case $meson_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Meson, a build system designed to be extremely fast and as user friendly as possible.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            meson_invalid_func
        esac
      }
      meson_invalid_func
    fi
    cd $meson_dir
    echo -e "${info}Extracting $meson_latest contents...${default}"
    tar -xf ${meson_dir}/${meson_latest}
    cd $OLDPWD
    # Coreutils internationalization fixes LFS patch
    coreutils_dir=/sources/coreutils
    coreutils_pkg=$(basename "`ls $coreutils_dir | grep coreutils*/`" /)
    coreutils_patch_repo="https://www.linuxfromscratch.org/patches/lfs/12.1/coreutils-9.4-i18n-1.patch"
    curl ${coreutils_patch_repo} --output ${coreutils_dir}/${coreutils_pkg}/coreutils-9.4-i18n-1.patch
    checksum=`sha512sum ${coreutils_dir}/${coreutils_pkg}/coreutils-9.4-i18n-1.patch | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/coreutils-patch.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of coreutils-9.4-i18n-1.patch does not match the trusted one."
      echo    "This means the patch was updated recently, or the repository was attacked."
      echo -e "coreutils-9.4-i18n-1.patch might have malicious content inside.${default}"
      coreutils_patch_invalid_func() {
        read -p "Proceed anyway? (y,N):" coreutils_patch_invalid
        if [[ -z "$coreutils_patch_invalid" ]]; then
          coreutils_patch_invalid=n
        fi
        case $coreutils_patch_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU Coreutils internationalization fixes LFS patch.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            coreutils_patch_invalid_func
        esac
      }
      coreutils_patch_invalid_func
    fi
    # Check, a unit testing framework for C programming language
    check_dir=${savelocation}/sources/check
    mkdir -pv $check_dir
    # Fixed version
    check_repo="https://github.com/libcheck/check/releases"
    check_latest=$(curl -s "${check_repo}" | grep -Eo 'Check ([0-9]+([.][0-9]*)*)+' | sort -V | tail -1)
    check_latest="${check_latest#Check }"
    curl ${check_repo}/download/${check_latest}/check-${check_latest}.tar.gz --output ${check_dir}/check-${check_latest}.tar.gz
    check_latest=check-${check_latest}.tar.gz
    checksum=`sha512sum ${check_dir}/${check_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/check.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $check_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$check_latest' might have malicious content inside.${default}"
      check_invalid_func() {
        read -p "Proceed anyway? (y,N):" check_invalid
        if [[ -z "$check_invalid" ]]; then
          check_invalid=n
        fi
        case $check_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Check, a unit testing framework for C programming language.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            check_invalid_func
        esac
      }
      check_invalid_func
    fi
    cd $check_dir
    echo -e "${info}Extracting $check_latest contents...${default}"
    tar -xf ${check_dir}/${check_latest}
    cd $OLDPWD
    # GNU roff, programs for processing and formatting text and images
    groff_dir=${savelocation}/sources/groff
    mkdir -pv $groff_dir
    groff_repo="https://ftp.gnu.org/gnu/groff/"
    groff_latest=$(curl -s "${groff_repo}" | grep -Eo '(groff-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${groff_repo}/$groff_latest --output ${groff_dir}/${groff_latest}
    checksum=`sha512sum ${groff_dir}/${groff_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/groff.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $groff_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$groff_latest' might have malicious content inside.${default}"
      groff_invalid_func() {
        read -p "Proceed anyway? (y,N):" groff_invalid
        if [[ -z "$groff_invalid" ]]; then
          groff_invalid=n
        fi
        case $groff_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU roff, programs for processing and formatting text and images.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            groff_invalid_func
        esac
      }
      groff_invalid_func
    fi
    cd $groff_dir
    echo -e "${info}Extracting $groff_latest contents...${default}"
    tar -xf ${groff_dir}/${groff_latest}
    cd $OLDPWD
    # GNU GRand Unified Bootloader
    grub_dir=${savelocation}/sources/grub
    mkdir -pv $grub_dir
    grub_repo="https://ftp.gnu.org/gnu/grub/"
    grub_latest=$(curl -s "${grub_repo}" | grep -Eo '(grub-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${grub_repo}/$grub_latest --output ${grub_dir}/${grub_latest}
    checksum=`sha512sum ${grub_dir}/${grub_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/grub.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $grub_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$grub_latest' might have malicious content inside.${default}"
      grub_invalid_func() {
        read -p "Proceed anyway? (y,N):" grub_invalid
        if [[ -z "$grub_invalid" ]]; then
          grub_invalid=n
        fi
        case $grub_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) GNU GRand Unified Bootloader.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            grub_invalid_func
        esac
      }
      grub_invalid_func
    fi
    cd $grub_dir
    echo -e "${info}Extracting $grub_latest contents...${default}"
    tar -xf ${grub_dir}/${grub_latest}
    cd $OLDPWD
    # IPRoute2, Linux programs for IPV4-based networking
    iproute2_dir=${savelocation}/sources/iproute2
    mkdir -pv $iproute2_dir
    iproute2_repo="https://mirrors.edge.kernel.org/pub/linux/utils/net/iproute2/"
    iproute2_latest=$(curl -s "${iproute2_repo}" | grep -Eo '(iproute2-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${iproute2_repo}/$iproute2_latest --output ${iproute2_dir}/${iproute2_latest}
    checksum=`sha512sum ${iproute2_dir}/${iproute2_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/iproute2.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $iproute2_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$iproute2_latest' might have malicious content inside.${default}"
      iproute2_invalid_func() {
        read -p "Proceed anyway? (y,N):" iproute2_invalid
        if [[ -z "$iproute2_invalid" ]]; then
          iproute2_invalid=n
        fi
        case $iproute2_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) IPRoute2, programs for IPV4-based networking.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            iproute2_invalid_func
        esac
      }
      iproute2_invalid_func
    fi
    cd $iproute2_dir
    echo -e "${info}Extracting $iproute2_latest contents...${default}"
    tar -xf ${iproute2_dir}/${iproute2_latest}
    cd $OLDPWD
    # Kbd, Linux keyboard utilities
    kbd_dir=${savelocation}/sources/kbd
    mkdir -pv $kbd_dir
    kbd_repo="https://mirrors.edge.kernel.org/pub/linux/utils/kbd/"
    kbd_latest=$(curl -s "${kbd_repo}" | grep -Eo '(kbd-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${kbd_repo}/$kbd_latest --output ${kbd_dir}/${kbd_latest}
    checksum=`sha512sum ${kbd_dir}/${kbd_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/kbd.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $kbd_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$kbd_latest' might have malicious content inside.${default}"
      kbd_invalid_func() {
        read -p "Proceed anyway? (y,N):" kbd_invalid
        if [[ -z "$kbd_invalid" ]]; then
          kbd_invalid=n
        fi
        case $kbd_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Kbd, Linux keyboard utilities.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            kbd_invalid_func
        esac
      }
      kbd_invalid_func
    fi
    cd $kbd_dir
    echo -e "${info}Extracting $kbd_latest contents...${default}"
    tar -xf ${kbd_dir}/${kbd_latest}
    cd $OLDPWD
    # Kbd Backspace/Delete Fix LFS patch
    kbd_patch_repo="https://www.linuxfromscratch.org/patches/lfs/12.1/kbd-2.6.4-backspace-1.patch"
    kbd_patch_dir=$(basename "`ls $kbd_dir | grep kbd*/`" /)
    curl $kbd_patch_repo --output ${kbd_dir}/${kdb_patch_dir}/kbd-2.6.4-backspace-1.patch
    checksum=`sha512sum ${kbd_dir}/${kbd_patch_dir}/kbd-2.6.4-backspace-1.patch | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/kbd-patch.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of kbd-2.6.4-backspace-1.patch does not match the trusted one."
      echo    "This means the patch was updated recently, or the repository was attacked."
      echo -e "kbd-2.6.4-backspace-1.patch might have malicious content inside.${default}"
      kbd_patch_invalid_func() {
        read -p "Proceed anyway? (y,N):" kbd_patch_invalid
        if [[ -z "$kbd_patch_invalid" ]]; then
          kbd_patch_invalid=n
        fi
        case $kbd_patch_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Kbd Backspace/Delete Fix LFS patch.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            kbd_patch_invalid_func
        esac
      }
      kbd_patch_invalid_func
    fi
    # Pipeline manipulation library
    libpipeline_dir=${savelocation}/sources/libpipeline
    mkdir -pv $libpipeline_dir
    libpipeline_repo="https://download.savannah.gnu.org/releases/libpipeline/"
    libpipeline_latest=$(curl -s "${libpipeline_repo}" | grep -Eo '(libpipeline-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${libpipeline_repo}/$libpipeline_latest --output ${libpipeline_dir}/${libpipeline_latest}
    checksum=`sha512sum ${libpipeline_dir}/${libpipeline_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/libpipeline.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $libpipeline_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$libpipeline_latest' might have malicious content inside.${default}"
      libpipeline_invalid_func() {
        read -p "Proceed anyway? (y,N):" libpipeline_invalid
        if [[ -z "$libpipeline_invalid" ]]; then
          libpipeline_invalid=n
        fi
        case $libpipeline_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Pipeline manipulation library (libpipeline).${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            libpipeline_invalid_func
        esac
      }
      libpipeline_invalid_func
    fi
    cd $libpipeline_dir
    echo -e "${info}Extracting $libpipeline_latest contents...${default}"
    tar -xf ${libpipeline_dir}/${libpipeline_latest}
    cd $OLDPWD
    # Vim, a powerful text editor
    vim_dir=${savelocation}/sources/vim
    mkdir -pv $vim_dir
    # Fixed version (downgrade)
    vim_repo="https://www.mirrorservice.org/pub/vim/unix/vim-9.0.tar.bz2"
    vim_latest=vim-9.0.tar.bz2
    curl ${vim_repo} --output ${vim_dir}/${vim_latest}
    checksum=`sha512sum ${vim_dir}/${vim_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/vim.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $vim_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$vim_latest' might have malicious content inside.${default}"
      vim_invalid_func() {
        read -p "Proceed anyway? (y,N):" vim_invalid
        if [[ -z "$vim_invalid" ]]; then
          vim_invalid=n
        fi
        case $vim_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Vim, a powerful text editor.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            vim_invalid_func
        esac
      }
      vim_invalid_func
    fi
    cd $vim_dir
    echo -e "${info}Extracting $vim_latest contents...${default}"
    tar -xf ${vim_dir}/${vim_latest}
    cd $OLDPWD
    # MarkupSafe, an implementation of XML/HTML/XHTML Markup safe string
    markupsafe_dir=${savelocation}/sources/MarkupSafe
    mkdir -pv $markupsafe_dir
    # Untrusted extension: 'whl', no time to test
    markupsafe_repo="https://pypi.org/packages/source/M/MarkupSafe/MarkupSafe-2.1.5.tar.gz"
    markupsafe_latest=MarkupSafe-2.1.5.tar.gz
    curl ${markupsafe_repo} --output ${markupsafe_dir}/${markupsafe_latest}
    checksum=`sha512sum ${markupsafe_dir}/${markupsafe_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/markupsafe.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $markupsafe_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$markupsafe_latest' might have malicious content inside.${default}"
      markupsafe_invalid_func() {
        read -p "Proceed anyway? (y,N):" markupsafe_invalid
        if [[ -z "$markupsafe_invalid" ]]; then
          markupsafe_invalid=n
        fi
        case $markupsafe_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) MarkupSafe, an implementation of XML/HTML/XHTML Markup safe string.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            markupsafe_invalid_func
        esac
      }
      markupsafe_invalid_func
    fi
    cd $markupsafe_dir
    echo -e "${info}Extracting $markupsafe_latest contents...${default}"
    tar -xf ${markupsafe_dir}/${markupsafe_latest}
    cd $OLDPWD
    # Jinja2, a simple templating engine for Python
    jinja2_dir=${savelocation}/sources/jinja2
    mkdir -pv $jinja2_dir
    # There's only a version (X.X.X) in the release names
    jinja2_repo="https://pypi.org/packages/source/J/Jinja2/Jinja2-3.1.3.tar.gz"
    jinja2_latest=Jinja2-3.1.3.tar.gz
    curl ${jinja2_repo} --output ${jinja2_dir}/${jinja2_latest}
    checksum=`sha512sum ${jinja2_dir}/${jinja2_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/jinja2.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $jinja2_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$jinja2_latest' might have malicious content inside.${default}"
      jinja2_invalid_func() {
        read -p "Proceed anyway? (y,N):" jinja2_invalid
        if [[ -z "$jinja2_invalid" ]]; then
          jinja2_invalid=n
        fi
        case $jinja2_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Jinja2, a simple templating engine for Python.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            jinja2_invalid_func
        esac
      }
      jinja2_invalid_func
    fi
    cd $jinja2_dir
    echo -e "${info}Extracting $jinja2_latest contents...${default}"
    tar -xf ${jinja2_dir}/${jinja2_latest}
    cd $OLDPWD
    # Systemd (only Udev will be installed)
    systemd_dir=${savelocation}/sources/systemd
    mkdir -pv $systemd_dir
    systemd_repo="https://github.com/systemd/systemd/releases"
    systemd_latest=$(curl -s "${systemd_repo}" | grep -Eo 'v[0-9]+' | sort -V | tail -1)
    systemd_latest=${systemd_latest#v}
    curl --location ${systemd_repo}/archive/refs/tags/v${systemd_latest}.tar.gz --output ${systemd_dir}/systemd-${systemd_latest}.tar.gz
    systemd_latest=systemd-${systemd_latest}.tar.gz
    checksum=`sha512sum ${systemd_dir}/${systemd_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/systemd.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $systemd_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$systemd_latest' might have malicious content inside.${default}"
      systemd_invalid_func() {
        read -p "Proceed anyway? (y,N):" systemd_invalid
        if [[ -z "$systemd_invalid" ]]; then
          systemd_invalid=n
        fi
        case $systemd_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Systemd system and service manager.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            systemd_invalid_func
        esac
      }
      systemd_invalid_func
    fi
    cd $systemd_dir
    echo -e "${info}Extracting $systemd_latest contents...${default}"
    tar -xf ${systemd_dir}/${systemd_latest}
    cd $OLDPWD
    # Udev-lfs, a set of Udev rules special for Linux From Scratch
    udev_lfs_repo="https://anduin.linuxfromscratch.org/LFS/udev-lfs-20230818.tar.xz"
    systemd_pkg=$(basename "`ls $systemd_dir | grep systemd*/`" /)
    curl $udev_lfs_repo --output ${systemd_dir}/${systemd_pkg}/udev-lfs-20230818.tar.xz
    checksum=`sha512sum ${systemd_dir}/${systemd_pkg}/udev-lfs-20230818.tar.xz | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/udev-lfs.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of udev-lfs-20230818.tar.xz does not match the trusted one."
      echo    "This means the tarball was updated recently, or the repository was attacked."
      echo -e "udev-lfs-20230818.tar.xz might have malicious content inside.${default}"
      udev_lfs_invalid_func() {
        read -p "Proceed anyway? (y,N):" udev_lfs_invalid
        if [[ -z "$udev_lfs_invalid" ]]; then
          udev_lfs_invalid=n
        fi
        case $udev_lfs_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Udev-lfs, a set of Udev rules special for Linux From Scratch.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            udev_lfs_invalid_func
        esac
      }
      udev_lfs_invalid_func
    fi
    cd ${systemd_dir}/${systemd_pkg}
    echo -e "${info}Extracting udev-lfs-20230818.tar.xz contents...${default}"
    tar -xf ${systemd_dir}/${systemd_pkg}/udev-lfs-20230818.tar.xz
    cd $OLDPWD
    # Man-DB, a 'man' implementation with Berkeley DB database
    man_db_dir=${savelocation}/sources/man-db
    mkdir -pv $man_db_dir
    man_db_repo="https://download.savannah.gnu.org/releases/man-db/"
    man_db_latest=$(curl -s "${man_db_repo}" | grep -Eo '(man-db-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl ${man_db_repo}/$man_db_latest --output ${man_db_dir}/${man_db_latest}
    checksum=`sha512sum ${man_db_dir}/${man_db_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/man-db.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $man_db_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$man_db_latest' might have malicious content inside.${default}"
      man_db_invalid_func() {
        read -p "Proceed anyway? (y,N):" man_db_invalid
        if [[ -z "$man_db_invalid" ]]; then
          man_db_invalid=n
        fi
        case $man_db_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Man-DB, a 'man' implementation with Berkeley DB database.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            man_db_invalid_func
        esac
      }
      man_db_invalid_func
    fi
    cd $man_db_dir
    echo -e "${info}Extracting $man_db_latest contents...${default}"
    tar -xf ${man_db_dir}/${man_db_latest}
    cd $OLDPWD
    # Procps-ng, command line utilities for browsing procfs filesystem
    procps_ng_dir=${savelocation}/sources/procps-ng
    mkdir -pv $procps_ng_dir
    procps_ng_repo="https://sourceforge.net/projects/procps-ng/files/Production/"
    procps_ng_latest=$(curl -s "${procps_ng_repo}" | grep -Eo '(procps-ng-[0-9]+([.][0-9]*)*)+.tar.xz' | sort -V | tail -1)
    curl --location ${procps_ng_repo}/$procps_ng_latest/ --output ${procps_ng_dir}/${procps_ng_latest}
    checksum=`sha512sum ${procps_ng_dir}/${procps_ng_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/procps-ng.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $procps_ng_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$procps_ng_latest' might have malicious content inside.${default}"
      procps_ng_invalid_func() {
        read -p "Proceed anyway? (y,N):" procps_ng_invalid
        if [[ -z "$procps_ng_invalid" ]]; then
          procps_ng_invalid=n
        fi
        case $procps_ng_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Procps-ng, command line utilities for browsing procfs filesystem.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            procps_ng_invalid_func
        esac
      }
      procps_ng_invalid_func
    fi
    cd $procps_ng_dir
    echo -e "${info}Extracting $procps_ng_latest contents...${default}"
    tar -xf ${procps_ng_dir}/${procps_ng_latest}
    cd $OLDPWD
    # E2fsprogs, utilities for Ext* filesystems
    e2fsprogs_dir=${savelocation}/sources/e2fsprogs
    mkdir -pv $e2fsprogs_dir
    e2fsprogs_dir_repo="https://sourceforge.net/projects/e2fsprogs/files/e2fsprogs/"
    e2fsprogs_latest=$(curl -s "${e2fsprogs_repo}" | grep -Eo '(v[0-9]+([.][0-9]*)*)+' | sort -V | tail -1)
    e2fsprogs_latest=${e2fsprogs_latest#v}
    curl --location ${e2fsprogs_repo}/v${e2fsprogs_latest}/e2fsprogs-${e2fsprogs_latest}.tar.gz --output ${e2fsprogs_dir}/e2fsprogs-${e2fsprogs_latest}.tar.gz
    e2fsprogs_latest=e2fsprogs-${e2fsprogs_latest}.tar.gz
    checksum=`sha512sum ${e2fsprogs_dir}/${e2fsprogs_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/e2fsprogs.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $e2fsprogs_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$e2fsprogs_latest' might have malicious content inside.${default}"
      e2fsprogs_invalid_func() {
        read -p "Proceed anyway? (y,N):" e2fsprogs_invalid
        if [[ -z "$e2fsprogs_invalid" ]]; then
          e2fsprogs_invalid=n
        fi
        case $e2fsprogs_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) E2fsprogs, utilities for Ext* filesystems.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            e2fsprogs_invalid_func
        esac
      }
      e2fsprogs_invalid_func
    fi
    cd $e2fsprogs_dir
    echo -e "${info}Extracting $e2fsprogs_latest contents...${default}"
    tar -xf ${e2fsprogs_dir}/${e2fsprogs_latest}
    cd $OLDPWD
    # Sysklogd, programs for logging system messages
    sysklogd_dir=${savelocation}/sources/sysklogd
    mkdir -pv $sysklogd_dir
    sysklogd_repo="https://www.infodrom.org/projects/sysklogd/download/"
    sysklogd_latest=$(curl -s "${sysklogd_repo}" | grep -Eo '(sysklogd-[0-9]+([.][0-9]*)*)+.tar.gz' | sort -V | tail -1)
    curl ${sysklogd_repo}/$sysklogd_latest/ --output ${sysklogd_dir}/${sysklogd_latest}
    checksum=`sha512sum ${sysklogd_dir}/${sysklogd_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/sysklogd.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $sysklogd_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$sysklogd_latest' might have malicious content inside.${default}"
      sysklogd_invalid_func() {
        read -p "Proceed anyway? (y,N):" sysklogd_invalid
        if [[ -z "$sysklogd_invalid" ]]; then
          sysklogd_invalid=n
        fi
        case $sysklogd_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) Sysklogd, programs for logging system messages.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            sysklogd_invalid_func
        esac
      }
      sysklogd_invalid_func
    fi
    cd $sysklogd_dir
    echo -e "${info}Extracting $sysklogd_latest contents...${default}"
    tar -xf ${sysklogd_dir}/${sysklogd_latest}
    cd $OLDPWD
    # SysVinit, a classic initialization program
    sysvinit_dir=${savelocation}/sources/sysvinit
    mkdir -pv $sysvinit_dir
    # Now I've seen everything.
    sysvinit_repo="https://github.com/slicer69/sysvinit/releases/download/3.08/sysvinit-3.08.tar.xz"
    sysvinit_latest=sysvinit-3.08.tar.xz
    curl ${sysvinit_repo} --output ${sysvinit_dir}/${sysvinit_latest}
    checksum=`sha512sum ${sysvinit_dir}/${sysvinit_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/sysvinit.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $sysvinit_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$sysvinit_latest' might have malicious content inside.${default}"
      sysvinit_invalid_func() {
        read -p "Proceed anyway? (y,N):" sysvinit_invalid
        if [[ -z "$sysvinit_invalid" ]]; then
          sysvinit_invalid=n
        fi
        case $sysvinit_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) SysVinit, a classic initialization program.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            sysvinit_invalid_func
        esac
      }
      sysvinit_invalid_func
    fi
    cd $sysvinit_dir
    echo -e "${info}Extracting $sysvinit_latest contents...${default}"
    tar -xf ${sysvinit_dir}/${sysvinit_latest}
    cd $OLDPWD
    # SysVinit Consolidated LFS patch
    sysvinit_patch_repo="https://www.linuxfromscratch.org/patches/lfs/12.1/sysvinit-3.08-consolidated-1.patch"
    sysvinit_pkg=$(basename "`ls $sysvinit_dir | grep sysvinit*/`" /)
    curl $sysvinit_patch_repo --output ${sysvinit_dir}/${sysvinit_pkg}/sysvinit-3.08-consolidated-1.patch
    checksum=`sha512sum ${sysvinit_dir}/${sysvinit_pkg}/sysvinit-3.08-consolidated-1.patch | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/sysvinit-patch.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of sysvinit-3.08-consolidated-1.patch does not match the trusted one."
      echo    "This means the patch was updated recently, or the repository was attacked."
      echo -e "sysvinit-3.08-consolidated-1.patch might have malicious content inside.${default}"
      sysvinit_patch_invalid_func() {
        read -p "Proceed anyway? (y,N):" sysvinit_patch_invalid
        if [[ -z "$sysvinit_patch_invalid" ]]; then
          sysvinit_patch_invalid=n
        fi
        case $sysvinit_patch_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) SysVinit Consolidated LFS patch.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            sysvinit_patch_invalid_func
        esac
      }
      sysvinit_patch_invalid_func
    fi
    # LFS-Bootscripts
    lfs_bootscripts_dir=${savelocation}/sources/lfs-bootscripts
    mkdir -pv lfs_bootscripts_dir
    lfs_bootscripts_repo="https://www.linuxfromscratch.org/lfs/downloads/12.1/lfs-bootscripts-20230728.tar.xz"
    lfs_bootscripts_latest=lfs-bootscripts-20230728.tar.xz
    curl ${lfs_bootscripts_repo} --output ${lfs_bootscripts_dir}/${lfs_bootscripts_latest}
    checksum=`sha512sum ${lfs_bootscripts_dir}/${lfs_bootscripts_latest} | awk '{print $1}'`
    if [ "$checksum" != "`cat /etc/lfs-install/lfs-bootscripts.sha512`" ]; then
      echo -e "${warning}Warning: the SHA-512 checksum of $lfs_bootscripts_latest does not match the trusted one."
      echo    "This means the package was updated recently, or the repository was attacked."
      echo -e "The tarball '$lfs_bootscripts_latest' might have malicious content inside.${default}"
      lfs_bootscripts_invalid_func() {
        read -p "Proceed anyway? (y,N):" lfs_bootscripts_invalid
        if [[ -z "$lfs_bootscripts_invalid" ]]; then
          lfs_bootscripts_invalid=n
        fi
        case $lfs_bootscripts_invalid in
          [Yy])
            echo -e "${warning}Keeping unstable (or unsafe) LFS-Bootscripts.${default}"
          ;;
          [Nn])
            exit 1
          ;;
          *)
            lfs_bootscripts_invalid_func
        esac
      }
      lfs_bootscripts_invalid_func
    fi
    cd $lfs_bootscripts_dir
    echo -e "${info}Extracting $lfs_bootscripts_latest contents...${default}"
    tar -xf ${lfs_bootscripts_dir}/${lfs_bootscripts_latest}
    cd $OLDPWD
    # Save progress
    echo "`sed '/save_download_final/d'  $fullsavename`" > $fullsavename
    echo -e "save_download_final=1\n" >> $fullsavename
    echo -e "${success}Done downloading final Linux From Scratch packages!${default}"
  ;;
  *)
    save-error "save_download_final"
esac

# Perform lfs-install routines to continue installing in chroot
if [[ -z "$save_chroot" ]]; then
  save_chroot=0
fi
case $save_chroot in
  1)
  ;;
  0)
    echo  -e    "${info}Copying /etc/lfs-install/lfs-install-chroot and the License to the chroot system...${default}"
    cp    -vf   /etc/lfs-install/lfs-install-chroot          ${savelocation}/usr/bin/lfs-install-chroot
    mkdir -v    ${savelocation}/usr/share/doc/lfs-install || true
    cp    -vf   /usr/share/doc/lfs-install/LICENSE           ${savelocation}/usr/share/doc/lfs-install/LICENSE
    chmod a+rwx ${savelocation}/usr/bin/lfs-install-chroot
    echo  -e    "${info}Saving progress...${default}"
    # Save progress
    echo "`sed '/save_chroot/d'  $fullsavename`" > $fullsavename
    echo -e "save_chroot=1\n" >> $fullsavename
    echo -e "${success}Done!${default}"
    echo -e "${info}We're now entering the chroot (your future system) environment."
    echo -e "You can exit it anytime by running 'exit' via the chroot shell.${default}"
    # A pretty huge chunk of code to decide which options should be passed to lfs-install-chroot
    chroot_options=""
    if [[ -z "$opt_debug" ]]; then
      chroot_options="$chroot_options -d $opt_debug"
    fi
    case $opt_full_save in
      1)
        chroot_options="$chroot_options -f"
    esac
    case $opt_one_job in
      1)
        chroot_options="$chroot_options -j"
    esac
    case $opt_keep_going in
      1)
        chroot_options="$chroot_options -k"
    esac
    if [[ -z "$opt_save_file" ]]; then
      chroot_options="$chroot_options -s ${opt_save_file#$savelocation}"
    fi
    chroot "$savelocation" /usr/bin/env -i             \
                           HOME=/root                  \
                           TERM="$TERM"                \
                           PS1='(lfs chroot) \u:\w\$ ' \
                           PATH=/usr/bin:/usr/sbin     \
                           /bin/bash --login /usr/bin/lfs-install-chroot $chroot_options
  ;;
  *)
    save-error "save_chroot"
esac