#! /bin/bash
# lfs-install-chroot - final system installation
# Copyright (C) 2023 Beloglazov Mark <justaguy3331@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
set -e
# Color codes for texts
success="\e[0;96m" # High intensity cyan
warning="\e[0;93m" # High intensity yellow
error="\e[0;91m"   # High intensity red
info="\e[0;97m"    # High intensity white
default="\e[0m"    # White unless you modify the default shell color

# Read the arguments for lfs-install
if [ -f /usr/bin/getopt ]; then
  args=$(getopt -a --options d:fhjks:l --long "debug:,full-save,help,one-job,keep-going,save-file:,license" -- "$@")
  if [ $? -ne 0 ]; then
    echo "Run 'lfs-install -h' or 'lfs-install --help' for usage."
    exit 1
  fi
  eval set -- "$args"

  while true; do
    case "$1" in
  # -d <var> --debug <var>
    -d|--debug)
      case "$2" in
        xv)
          set -xv
        ;;
        vx)
          set -vx
        ;;
        x)
          set -x
        ;;
        v)
          set -v
        ;;
        n)
          set +vx
      esac
      shift 2;;

# -h --help
    -h|--help)
      echo "Usage:"
      echo " lfs-install-chroot [-d <opt_debug>] [-h] [-j] [-i] [-k] [-s <filename>] [-l]"
      echo ""
      echo "Finish installing Linux From Scratch to the current drive."
      echo ""
      echo "Options:"
      echo " -d, --debug <opt_debug>    filter debug messages by a desired level"
      echo " -h, --help                 display this help and exit"
      echo " -j, --one-job              do not use 'make -j\$(nproc)' option while building, should be used for debugging"
      echo " -k, --keep-going           keep going if any error happens, very dangerous option"
      echo " -s, --save-file <filename> define a filename or path to save file, or start with a new save file"
      echo " -l, --license              show script license"
      echo ""
      echo "The 'opt_debug' argument can be:"
      echo "'vx' or 'xv' (a combination of the two below),"
      echo "'x'          (print every command with command substitutions and variable expansions),"
      echo "'v'          (print every command as they're executed),"
      echo "'n'          (print no debugging information, default mode)."
      echo ""
      echo "The 'filename' argument can be a path to existing savefile, or a path to a new one."
      echo "lfs-install will prompt user for creating new file (recursively) if it doesn't exist"
      echo "while also informing of nonexistent directories."
      exit 0;;

# -j --one-job
    -j|--one-job)
      opt_one_job=1
      shift 1;;

# -k --keep-going
    -k|--keep-going)
      set +eu
      shift 1;;

# -s <var> --save-file <var>
# Note that this works only if your internal storage is complete.
# If not, the script will store the var and wait.
    -s|--save-file)
      opt_save_file="$2"
      shift 2;;

# -l --license
    -l|--license)
      echo -e "${info}Please note that you can always exit by pressing 'q'.${default}"
      read -p "Press enter to continue."
      if [ -f /usr/bin/less ]; then
        less /usr/local/share/doc/lfs-install/LICENSE
      else
        bash-pager /usr/local/share/doc/lfs-install/LICENSE
      fi
      exit 0;;
    --)
    break;;
  esac
done
else
  echo -e "${info}The script does not currently support passing arguments from the chroot environment itself."
  echo -e "you have to install util-linux package (pending) to enable this feature.${default}"
fi

# Handle arguments passed from the lfs-install.
case $opt_debug in
  xv)
    set -xv
  ;;
  vx)
    set -vx
  ;;
  x)
    set -x
  ;;
  v)
    set -v
  ;;
  n)
    set +vx
esac
case $opt_keep_going in
  1)
    set +eu
fi

echo "lfs-install-chroot Copyright (C) 2023 Beloglazov Mark <justaguy3331@gmail.com>

This program comes with ABSOLUTELY NO WARRANTY;
for details use '-l' or '--license' options.
This is free software, and you are welcome to redistribute it
under certain conditions; use '-l' or '--license' options for details.
"

# Simple error function to reduce code size
error() {
  echo -e "${error}Error:" $1
  exit 1
}

# Corrupted save file error, '$1' is the save value that is not valid
save-error() {
  echo -e "${error}Error: this save file is corrupted"
  echo -e "(\$$1 is equal to neither 1 or 0).${default}"
  echo -e "${info}You might want to edit the save file using 'nano $opt_save_file' outside of chroot."
  echo -e "Please note that "1" means the stage is done, and "0" means the stage is not done.${default}"
  exit 1
}

# Load save file if it exists
if [ -f $opt_save_file ] && [[ ! -z "$opt_save_file" ]]; then
  source $opt_save_file
  fullsavename=$opt_save_file
  if [[ -z "`cat /proc/swaps | grep ${savedevice}1`" ]]; then
    swapon ${savedevice}1 || if [ -f ${savedevice}1 ]; then error "something very strange happened."; fi; exit 1
  fi
else
  if [[ ! -z "$opt_save_file" ]]; then
    error "No save file found, aborting."
  fi
fi

# Chroot checks
if [[ -z "$save_chroot" ]]; then
  save_chroot=0
fi
case $save_chroot in
  1)
    if [ "$(stat -c %d:%i /)" = "$(stat -c %d:%i /proc/1/root/.)" ]; then
      if [[ -z "$save_final_finish" ]]; then
        save_final_finish=0
      fi
      case $save_final_finish in
        1)
          echo -e "${info}You would like to remove lfs-install remains from the system."
          echo    "Issue the following to do so:"
          echo    "rm -v /usr/bin/lfs-install-chroot"
          echo    "If you also want to remove the lfs-install license:"
          echo -e "rm -vr /usr/share/doc/lfs-install${default}"
          exit 0
        ;;
        0)
          error "You must run this script in a chroot environment.${default}"
        ;;
        *)
          save-error "save_final_finish"
      esac
    fi
  ;;
  0)
    error "You must not run this script before the \$save_chroot stage.${default}"
  ;;
  *)
    save-error "save_chroot"
esac

# Chapter 7.5
if [[ -z "$save_chroot_dirs" ]]; then
  save_chroot_dirs=0
fi
case $save_chroot_dirs in
  1)
  ;;
  0)
    mkdir   -pv  /{boot,home,mnt,opt,srv}
    mkdir   -pv  /etc/{opt,sysconfig}
    mkdir   -pv  /lib/firmware
    mkdir   -pv  /media/{floppy,cdrom}
    mkdir   -pv  /usr/{,local/}{include,src}
    mkdir   -pv  /usr/local/{bin,lib,sbin}
    mkdir   -pv  /usr/{,local/}share/{color,dict,doc,info,locale,man}
    mkdir   -pv  /usr/{,local/}share/{misc,terminfo,zoneinfo}
    mkdir   -pv  /usr/{,local/}share/man/man{1..8}
    mkdir   -pv  /var/{cache,local,log,mail,opt,spool}
    mkdir   -pv  /var/lib/{color,misc,locate}
    ln      -sfv ../run      /var/run
    ln      -sfv ../run/lock /var/lock
    install -dv -m 0750      /root
    install -dv -m 1777      /tmp /var/tmp
    # Save progress
    echo "`sed '/save_chroot_dirs/d'  $fullsavename`" > $fullsavename
    echo -e "save_chroot_dirs=1\n" >> $fullsavename
    echo -e "${success}Minimal File Hierarchy System directories created.${default}"
  ;;
  *)
    save-error "save_chroot_dirs"
esac

# Chapter 7.6
if [[ -z "$save_chroot_files" ]]; then
  save_chroot_files=0
fi
case $save_chroot_files in
  1)
  ;;
  0)
    ln -sv ../proc/self/mounts /etc/mtab
    # Create /etc/hosts
    echo -e "${info}Creating /etc/hosts...${default}"
    echo '127.0.0.1 localhost $(hostname)' >  /etc/hosts
    echo '::1       localhost'             >> /etc/hosts
    # Create /etc/passwd
    echo -e "${info}Creating /etc/passwd...${default}"
    echo 'root:x:0:0:root:/root:/bin/bash'                                       >  /etc/passwd
    echo 'bin:x:1:1:bin:/dev/null:/usr/bin/false'                                >> /etc/passwd
    echo 'daemon:x:6:6:Daemon User:/dev/null:/usr/bin/false'                     >> /etc/passwd
    echo 'messagebus:x:18:18:D-Bus Message Daemon User:/run/dbus:/usr/bin/false' >> /etc/passwd
    echo 'uuidd:x:80:80:UUID Generation Daemon User:/dev/null:/usr/bin/false'    >> /etc/passwd
    echo 'nobody:x:65534:65534:Unprivileged User:/dev/null:/usr/bin/false'       >> /etc/passwd
    # Create /etc/group
    echo -e "${info}Creating /etc/group...${default}"
    echo 'root:x:0:'        >  /etc/group
    echo 'bin:x:1:daemon'   >> /etc/group
    echo 'sys:x:2:'         >> /etc/group
    echo 'kmem:x:3:'        >> /etc/group
    echo 'tape:x:4:'        >> /etc/group
    echo 'tty:x:5:'         >> /etc/group
    echo 'daemon:x:6:'      >> /etc/group
    echo 'floppy:x:7:'      >> /etc/group
    echo 'disk:x:8:'        >> /etc/group
    echo 'lp:x:9:'          >> /etc/group
    echo 'dialout:x:10:'    >> /etc/group
    echo 'audio:x:11:'      >> /etc/group
    echo 'video:x:12:'      >> /etc/group
    echo 'utmp:x:13:'       >> /etc/group
    echo 'cdrom:x:15:'      >> /etc/group
    echo 'adm:x:16:'        >> /etc/group
    echo 'messagebus:x:18:' >> /etc/group
    echo 'input:x:24:'      >> /etc/group
    echo 'mail:x:34:'       >> /etc/group
    echo 'kvm:x:61:'        >> /etc/group
    echo 'uuidd:x:80:'      >> /etc/group
    echo 'wheel:x:97:'      >> /etc/group
    echo 'users:x:999:'     >> /etc/group
    echo 'nogroup:x:65534:' >> /etc/group
    # Creating a regular user
    echo -e "${info}Creating a regular temporary user...${default}"
    echo "TrustedInstaller:x:101:101::/home/TrustedInstaller:/bin/bash" >> /etc/passwd
    echo "TrustedInstaller:x:101:" >> /etc/group
    install -o TrustedInstaller -d /home/TrustedInstaller
    # Save progress
    echo "`sed '/save_chroot_files/d'  $fullsavename`" > $fullsavename
    echo -e "save_chroot_files=1\n" >> $fullsavename
    echo -e "${success}Done!${default}"
    echo -e "${info}Restarting the shell...${default}"
    # Here we go again
    chroot_options=""
    if [[ ! -z "$opt_debug" ]]; then
      chroot_options="$chroot_options -d $opt_debug"
    fi
    case $opt_full_save in
      1)
        chroot_options="$chroot_options -f"
    esac
    case $opt_one_job in
      1)
        chroot_options="$chroot_options -j"
    esac
    case $opt_keep_going in
      1)
        chroot_options="$chroot_options -k"
    esac
    if [[ ! -z "$opt_save_file" ]]; then
      chroot_options="$chroot_options -s ${opt_save_file#$savelocation}"
    fi
    exec /usr/bin/bash --login lfs-install-chroot $chroot_options
  ;;
  *)
    save-error "save_chroot_files"
esac

# Chapter 7.6, after shell restart
if [[ -z "$save_chroot_files_restart" ]]; then
  save_chroot_files_restart=0
fi
case $save_chroot_files_restart in
  1)
  ;;
  0)
    echo -e "${success}Done!${default}"
    touch /var/log/{btmp,lastlog,faillog,wtmp}
    chgrp -v utmp /var/log/lastlog
    chmod -v 664  /var/log/lastlog
    chmod -v 600  /var/log/btmp
    # Save progress
    echo "`sed '/save_chroot_files_restart/d'  $fullsavename`" > $fullsavename
    echo -e "save_chroot_files_restart=1\n" >> $fullsavename
    echo -e "${success}Done creating essential files.${default}"
  ;;
  *)
    save-error "save_chroot_files_restart"
esac

# GNU gettext utilities
if [[ -z "$save_temp_gettext" ]]; then
  save_temp_gettext=0
fi
case $save_temp_gettext in
  1)
  ;;
  0)
    gettext_dir=/sources/gettext
    gettext_pkg=$(ls $gettext_dir | grep .tar.xz)
    gettext_pkg=$(basename ${gettext_dir}/$gettext_pkg .tar.xz)
    pushd ${gettext_dir}/$gettext_pkg
      ${gettext_dir}/${gettext_pkg}/configure --disable-shared
    popd
    case $opt_one_job in
      1)
        make -C ${gettext_dir}/$gettext_pkg
      ;;
      *)
        make -C ${gettext_dir}/$gettext_pkg -j$(nproc)
    esac
    cp -v ${gettext_dir}/${gettext_pkg}/gettext-tools/src/{msgfmt,msgmerge,xgettext} /usr/bin
    # Save progress
    echo "`sed '/save_temp_gettext/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_gettext=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU gettext utilities successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_gettext"
esac

# GNU Bison
if [[ -z "$save_temp_bison" ]]; then
  save_temp_bison=0
fi
case $save_temp_bison in
  1)
  ;;
  0)
    bison_dir=/sources/bison
    bison_pkg=$(ls $bison_dir | grep .tar.xz)
    bison_pkg=$(basename ${bison_dir}/$bison_pkg .tar.xz)
    pushd ${bison_dir}/$bison_pkg
      ${bison_dir}/${bison_pkg}/configure --prefix=/usr \
                                          --docdir=/usr/share/doc/$bison_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${bison_dir}/$bison_pkg
        make -C ${bison_dir}/$bison_pkg install
      ;;
      *)
        make -C ${bison_dir}/$bison_pkg -j$(nproc)
        make -C ${bison_dir}/$bison_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_temp_bison/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_bison=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Bison successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_bison"
esac

# Perl programming language
if [[ -z "$save_temp_perl" ]]; then
  save_temp_perl=0
fi
case $save_temp_perl in
  1)
  ;;
  0)
    perl_dir=/sources/perl
    perl_pkg=$(ls $perl_dir | grep .tar.xz)
    perl_pkg=$(basename ${perl_dir}/$perl_pkg .tar.xz)
    # Perl seems to have its own configure script, but still not going to trust it where to put build configuration files in
    pushd ${perl_dir}/$perl_pkg
      sh ${perl_dir}/${perl_pkg}/Configure -des                                        \
                                           -Dprefix=/usr                               \
                                           -Dvendorprefix=/usr                         \
                                           -Duseshrplib                                \
                                           -Dprivlib=/usr/lib/perl5/5.38/core_perl     \
                                           -Darchlib=/usr/lib/perl5/5.38/core_perl     \
                                           -Dsitelib=/usr/lib/perl5/5.38/site_perl     \
                                           -Dsitearch=/usr/lib/perl5/5.38/site_perl    \
                                           -Dvendorlib=/usr/lib/perl5/5.38/vendor_perl \
                                           -Dvendorarch=/usr/lib/perl5/5.38/vendor_perl
    popd
    case $opt_one_job in
      1)
        make -C ${perl_dir}/$perl_pkg
        make -C ${perl_dir}/$perl_pkg install
      ;;
      *)
        make -C ${perl_dir}/$perl_pkg -j$(nproc)
        make -C ${perl_dir}/$perl_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_temp_perl/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_perl=1\n" >> $fullsavename
    echo -e "${success}Temporary Perl programming language successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_perl"
esac

# Python programming language
if [[ -z "$save_temp_python" ]]; then
  save_temp_python=0
fi
case $save_temp_python in
  1)
  ;;
  0)
    python_dir=/sources/python
    python_pkg=$(ls $python_dir | grep .tar.xz)
    python_pkg=$(basename ${python_dir}/$python_pkg .tar.xz)
    python_pkg=Python${python_pkg#python}
    pushd ${python_dir}/$python_pkg
      ${python_dir}/${python_pkg}/configure --prefix=/usr   \
                                            --enable-shared \
                                            --without-ensurepip
    popd
    case $opt_one_job in
      1)
        make -C ${python_dir}/$python_pkg
        make -C ${python_dir}/$python_pkg install
      ;;
      *)
        make -C ${python_dir}/$python_pkg -j$(nproc)
        make -C ${python_dir}/$python_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_temp_python/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_python=1\n" >> $fullsavename
    echo -e "${success}Temporary Python programming language successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_python"
esac

# GNU Texinfo documentation system
if [[ -z "$save_temp_texinfo" ]]; then
  save_temp_texinfo=0
fi
case $save_temp_texinfo in
  1)
  ;;
  0)
    texinfo_dir=/sources/texinfo
    texinfo_pkg=$(ls $texinfo_dir | grep .tar.xz)
    texinfo_pkg=$(basename ${texinfo_dir}/$texinfo_pkg .tar.xz)
    pushd ${texinfo_dir}/$texinfo_pkg
      ${texinfo_dir}/${texinfo_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${texinfo_dir}/$texinfo_pkg
        make -C ${texinfo_dir}/$texinfo_pkg install
      ;;
      *)
        make -C ${texinfo_dir}/$texinfo_pkg -j$(nproc)
        make -C ${texinfo_dir}/$texinfo_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_temp_texinfo/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_texinfo=1\n" >> $fullsavename
    echo -e "${success}Temporary GNU Texinfo documentation system successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_texinfo"
esac

# util-linux package
if [[ -z "$save_temp_util_linux" ]]; then
  save_temp_util_linux=0
fi
case $save_temp_util_linux in
  1)
  ;;
  0)
    util_linux_dir=/sources/util-linux
    util_linux_pkg=$(ls $util_linux_dir | grep .tar.xz)
    util_linux_pkg=$(basename ${util_linux_dir}/$util_linux_pkg .tar.xz)
    pushd ${util_linux_dir}/$util_linux_pkg
      ${util_linux_dir}/${util_linux_pkg}/configure --libdir=/usr/lib                     \
                                                    --runstatedir=/run                    \
                                                    --disable-chfn-chsh                   \
                                                    --disable-login                       \
                                                    --disable-nologin                     \
                                                    --disable-su                          \
                                                    --disable-setpriv                     \
                                                    --disable-runuser                     \
                                                    --disable-pylibmount                  \
                                                    --disable-static                      \
                                                    --without-python                      \
                                                    ADJTIME_PATH=/var/lib/hwclock/adjtime \
                                                    --docdir=/usr/share/doc/$util_linux_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${util_linux_dir}/$util_linux_pkg
        make -C ${util_linux_dir}/$util_linux_pkg install
      ;;
      *)
        make -C ${util_linux_dir}/$util_linux_pkg -j$(nproc)
        make -C ${util_linux_dir}/$util_linux_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_temp_util_linux/d'  $fullsavename`" > $fullsavename
    echo -e "save_temp_util_linux=1\n" >> $fullsavename
    echo -e "${success}Temporary util-linux package successfully installed.${default}"
  ;;
  *)
    save-error "save_temp_util_linux"
esac

# Chapter 7.13
if [[ -z "$save_chroot_cleanup" ]]; then
  save_chroot_cleanup=0
fi
case $save_chroot_cleanup in
  1)
  ;;
  0)
    echo -e "${info}Removing the currently installed documentation files...${default}"
    # Do not delete 'lfs-install' in /usr/share/doc
    mv -v  /usr/share/doc/lfs-install /usr/share/lfs-install
    rm -rf /usr/share/{info,man,doc}/*
    mv -v  /usr/share/lfs-install     /usr/share/doc/lfs-install
    echo -e "${info}Removing libtool .la files...${default}"
    find /usr/{lib,libexec} -name \*.la -delete
    echo -e "${info}Removing the /tools directory...${default}"
    rm -rf /tools
    # Save progress
    echo "`sed '/save_chroot_cleanup/d'  $fullsavename`" > $fullsavename
    echo -e "save_chroot_cleanup=1\n" >> $fullsavename
    echo -e "${success}Done cleaning up the chroot system.${default}"
  ;;
  *)
    save-error "save_chroot_cleanup"
esac

# Linux Man-pages (2400 pages of various documentation related to Linux programming and maintaining the system)
if [[ -z "$save_final_man_pages" ]]; then
  save_final_man_pages=0
fi
case $save_final_man_pages in
  1)
  ;;
  0)
    man_pages_dir=/sources/man-pages
    man_pages_pkg=$(ls $man_pages_dir | grep .tar.xz)
    man_pages_pkg=$(basename ${man_pages_dir}/$man_pages_pkg .tar.xz)
    # Chapter 8.3.1
    rm -v ${man_pages_dir}/${man_pages_pkg}/man3/crypt* || true
    if [[ -f ${man_pages_dir}/${man_pages_pkg}/man3/crypt* ]]; then
      exit 1
    fi
    case $opt_one_job in
      1)
        make -C ${man_pages_dir}/$man_pages_pkg prefix=/usr install
      ;;
      *)
        make -C ${man_pages_dir}/$man_pages_pkg -j$(nproc) prefix=/usr install
    esac
    # Save progress
    echo "`sed '/save_final_man_pages/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_man_pages=1\n" >> $fullsavename
    echo -e "${success}Linux Man-pages successfully installed.${default}"
    echo -e "${info}Removing ${man_pages_dir}/${man_pages_pkg}, please do not cancel this process...${default}"
    rm -r ${man_pages_dir}/${man_pages_pkg} || true
  ;;
  *)
    save-error "save_final_man_pages"
esac

# Iana-Etc package
if [[ -z "$save_final_iana_etc" ]]; then
  save_final_iana_etc=0
fi
case $save_final_iana_etc in
  1)
  ;;
  0)
    iana_etc_dir=/sources/iana-etc
    iana_etc_pkg=$(ls $iana_etc_dir | grep .tar.gz)
    iana_etc_pkg=$(basename ${iana_etc_dir}/$iana_etc_pkg .tar.gz)
    # Chapter 8.4.1
    cp -v ${iana_etc_dir}/${iana_etc_pkg}/{services,protocols} /etc
    # Save progress
    echo "`sed '/save_final_iana_etc/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_iana_etc=1\n" >> $fullsavename
    echo -e "${success}Iana-Etc package successfully installed.${default}"
    echo -e "${info}Removing ${iana_etc_dir}/${iana_etc_pkg}, please do not cancel this process...${default}"
    rm -r ${iana_etc_dir}/${iana_etc_pkg} || true
  ;;
  *)
    save-error "save_final_iana_etc"
esac

# GNU C library
if [[ -z "$save_final_glibc" ]]; then
  save_final_glibc=0
fi
case $save_final_glibc in
  1)
  ;;
  0)
    glibc_dir=/sources/glibc
    glibc_pkg=$(ls $glibc_dir | grep .tar.xz)
    glibc_pkg=$(basename ${glibc_dir}/$glibc_pkg .tar.xz)
    # In case there's no 'build' directory
    mkdir -pv ${glibc_dir}/build
    # Cleaning up after previous build
    case $opt_one_job in
      1)
        make -C ${glibc_dir}/build distclean || true
      ;;
      *)
        make -C ${glibc_dir}/build -j$(nproc) distclean || true
    esac
    # Chapter 8.5.1 (this would still not be the final distro, so it doesn't matter if I install Linux From Scratch Glibc)
    pushd ${glibc_dir}/${glibc_pkg}
      patch -Np1 -i ${glibc_dir}/${glibc_pkg}/glibc-2.39-fhs-1.patch || true
    popd
    echo "rootsbindir=/usr/sbin" > ${glibc_dir}/${glibc_pkg}/configparms
    pushd ${glibc_dir}/build
      ${glibc_dir}/${glibc_pkg}/configure --prefix=/usr                            \
                                          --disable-werror                         \
                                          --enable-kernel=4.19                     \
                                          --enable-stack-protector=strong          \
                                          --disable-nscd                           \
                                          libc_cv_slibdir=/usr/lib
    popd
    case $opt_one_job in
      1)
        make -C ${glibc_dir}/build
        echo -e "${warning}Building tests can take too long and too much storage space.${default}"
        glibc_check_func() {
          read -p "Are you sure you want to check GNU Glibc for sanity? (y/N)" glibc_check
          if [[ -z "$glibc_check" ]]; then
            glibc_check=n
          fi
          case $glibc_check in
            [Yy])
              make -C ${glibc_dir}/build TIMEOUTFACTOR=15 check || true
            ;;
            [Nn])
            ;;
            *)
              glibc_check_func
          esac
        }
        glibc_check_func
      ;;
      *)
        make -C ${glibc_dir}/build -j$(nproc)
        glibc_check_func() {
          read -p "Are you sure you want to check GNU Glibc for sanity? (y/N)" glibc_check
          if [[ -z "$glibc_check" ]]; then
            glibc_check=n
          fi
          case $glibc_check in
            [Yy])
              make -C ${glibc_dir}/build -j$(nproc) TIMEOUTFACTOR=15 check || true
            ;;
            [Nn])
            ;;
            *)
              glibc_check_func
          esac
        }
        glibc_check_func
    esac
    touch /etc/ld.so.conf
    sed '/test-installation/s@$(PERL)@echo not running@' -i ${glibc_dir}/build/Makefile
    case $opt_one_job in
      1)
        make -C ${glibc_dir}/build install
      ;;
      *)
        make -C ${glibc_dir}/build -j$(nproc) install
    esac
    sed '/RTLDLIST=/s@/usr@@g' -i /usr/bin/ldd
    mkdir -pv /usr/lib/locale
    localedef -i C          -f UTF-8       C.UTF-8
    localedef -i cs_CZ      -f UTF-8       cs_CZ.UTF-8
    localedef -i de_DE      -f ISO-8859-1  de_DE
    localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
    localedef -i de_DE      -f UTF-8       de_DE.UTF-8
    localedef -i el_GR      -f ISO-8859-7  el_GR
    localedef -i en_GB      -f ISO-8859-1  en_GB
    localedef -i en_GB      -f UTF-8       en_GB.UTF-8
    localedef -i en_HK      -f ISO-8859-1  en_HK
    localedef -i en_PH      -f ISO-8859-1  en_PH
    localedef -i en_US      -f ISO-8859-1  en_US
    localedef -i en_US      -f UTF-8       en_US.UTF-8
    localedef -i es_ES      -f ISO-8859-15 es_ES@euro
    localedef -i es_MX      -f ISO-8859-1  es_MX
    localedef -i fa_IR      -f UTF-8       fa_IR
    localedef -i fr_FR      -f ISO-8859-1  fr_FR
    localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
    localedef -i fr_FR      -f UTF-8       fr_FR.UTF-8
    localedef -i is_IS      -f ISO-8859-1  is_IS
    localedef -i is_IS      -f UTF-8       is_IS.UTF-8
    localedef -i it_IT      -f ISO-8859-1  it_IT
    localedef -i it_IT      -f ISO-8859-15 it_IT@euro
    localedef -i it_IT      -f UTF-8       it_IT.UTF-8
    localedef -i ja_JP      -f EUC-JP      ja_JP
    localedef -i ja_JP      -f SHIFT_JIS   ja_JP.SJIS 2> /dev/null || true
    localedef -i ja_JP      -f UTF-8       ja_JP.UTF-8
    localedef -i nl_NL@euro -f ISO-8859-15 nl_NL@euro
    localedef -i ru_RU      -f KOI8-R      ru_RU.KOI8-R
    localedef -i ru_RU      -f UTF-8       ru_RU.UTF-8
    localedef -i se_NO      -f UTF-8       se_NO.UTF-8
    localedef -i ta_IN      -f UTF-8       ta_IN.UTF-8
    localedef -i tr_TR      -f UTF-8       tr_TR.UTF-8
    localedef -i zh_CN      -f GB18030     zh_CN.GB18030
    localedef -i zh_HK      -f BIG5-HKSCS  zh_HK.BIG5-HKSCS
    localedef -i zh_TW      -f UTF-8       zh_TW.UTF-8
    case $opt_one_job in
      1)
        make -C ${glibc_dir}/build localedata/install-locales
      ;;
      *)
        make -C ${glibc_dir}/build -j$(nproc) localedata/install-locales
    esac
    localedef -i C     -f UTF-8     C.UTF-8
    localedef -i ja_JP -f SHIFT_JIS ja_JP.SJIS 2> /dev/null || true
    echo -e "${info}Creating /etc/nsswitch.conf...${default}"
    echo 'passwd: files'    >  /etc/nsswitch.conf
    echo 'group: files'     >> /etc/nsswitch.conf
    echo 'shadow: files'    >> /etc/nsswitch.conf
    echo ''                 >> /etc/nsswitch.conf
    echo 'hosts: files dns' >> /etc/nsswitch.conf
    echo 'networks: files'  >> /etc/nsswitch.conf
    echo ''                 >> /etc/nsswitch.conf
    echo 'protocols: files' >> /etc/nsswitch.conf
    echo 'services: files'  >> /etc/nsswitch.conf
    echo 'ethers: files'    >> /etc/nsswitch.conf
    echo 'rpc: files'       >> /etc/nsswitch.conf
    # Install Time Zone Database
    tzd_dir=/sources/tzd
    ZONEINFO=/usr/share/zoneinfo
    mkdir -pv $ZONEINFO/{posix,right}
    for tz in ${tzd_dir}/etcetera     \
              ${tzd_dir}/southamerica \
              ${tzd_dir}/northamerica \
              ${tzd_dir}/europe       \
              ${tzd_dir}/africa       \
              ${tzd_dir}/antarctica   \
              ${tzd_dir}/asia         \
              ${tzd_dir}/australasia  \
              ${tzd_dir}/backward; do
      zic -L /dev/null                            -d $ZONEINFO       ${tz}
      zic -L /dev/null                            -d $ZONEINFO/posix ${tz}
      zic -L ${tzd_dir}/leapseconds               -d $ZONEINFO/right ${tz}
    done
    cp -v ${tzd_dir}/zone.tab ${tzd_dir}/zone1970.tab ${tzd_dir}/iso3166.tab $ZONEINFO
    zic -d $ZONEINFO -p America/New_York
    unset ZONEINFO
    TZ_TEMP=`tzselect | tail -1`
    ln -sfv ../usr/share/zoneinfo/$TZ_TEMP /etc/localtime
    echo -e "${info}Creating /etc/ld.so.conf...${default}"
    echo '/usr/local/lib'                   >  /etc/ld.so.conf
    echo '/opt/lib'                         >> /etc/ld.so.conf
    echo 'include /etc/ld.so.conf.d/*.conf' >> /etc/ld.so.conf
    mkdir -pv /etc/ld.so.conf.d
    # Save progress
    echo "`sed '/save_final_glibc/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_glibc=1\n" >> $fullsavename
    echo -e "${success}GNU C library successfully installed.${default}"
    echo -e "${info}Removing ${glibc_dir}/${glibc_pkg} and ${glibc_dir}/build, please do not cancel this process...${default}"
    rm -r ${glibc_dir}/${glibc_pkg} || true
    rm -r ${glibc_dir}/build        || true
  ;;
  *)
    save-error "save_final_glibc"
esac

# Zlib, A Massively Spiffy Yet Delicately Unobtrusive Compression Library
if [[ -z "$save_final_zlib" ]]; then
  save_final_zlib=0
fi
case $save_final_zlib in
  1)
  ;;
  0)
    zlib_dir=/sources/zlib
    zlib_pkg=$(ls $zlib_dir | grep .tar.gz)
    zlib_pkg=$(basename ${zlib_dir}/$zlib_pkg .tar.gz)
    pushd ${zlib_dir}/${zlib_pkg}
      ${zlib_dir}/${zlib_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${zlib_dir}/${zlib_pkg}
        make -C ${zlib_dir}/${zlib_pkg} check || true
        make -C ${zlib_dir}/${zlib_pkg} install
      ;;
      *)
        make -C ${zlib_dir}/${zlib_pkg} -j$(nproc)
        make -C ${zlib_dir}/${zlib_pkg} -j$(nproc) check || true
        make -C ${zlib_dir}/${zlib_pkg} -j$(nproc) install
    esac
    rm -fv /usr/lib/libz.a
    # Save progress
    echo "`sed '/save_final_zlib/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_zlib=1\n" >> $fullsavename
    echo -e "${success}Zlib, A Massively Spiffy Yet Delicately Unobtrusive Compression Library successfully installed.${default}"
    echo -e "${info}Removing ${zlib_dir}/${zlib_pkg}, please do not cancel this process...${default}"
    rm -r ${zlib_dir}/${zlib_pkg} || true
  ;;
  *)
    save-error "save_final_zlib"
esac

# bzip2 data compressor
if [[ -z "$save_final_bzip2" ]]; then
  save_final_bzip2=0
fi
case $save_final_bzip2 in
  1)
  ;;
  0)
    bzip2_dir=/sources/bzip2
    bzip2_pkg=$(ls $bzip2_dir | grep .tar.gz)
    bzip2_pkg=$(basename ${bzip2_dir}/$bzip2_pkg .tar.gz)
    # Chapter 8.7.1
    sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@'   ${bzip2_dir}/${bzip2_pkg}/Makefile
    sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" ${bzip2_dir}/${bzip2_pkg}/Makefile
    case $opt_one_job in
      1)
        make -C ${bzip2_dir}/${bzip2_pkg} -f          Makefile-libbz2_so
        make -C ${bzip2_dir}/${bzip2_pkg}             clean
        make -C ${bzip2_dir}/${bzip2_pkg}
        make -C ${bzip2_dir}/${bzip2_pkg} PREFIX=/usr install
      ;;
      *)
        make -C ${bzip2_dir}/${bzip2_pkg} -j$(nproc) -f          Makefile-libbz2_so
        make -C ${bzip2_dir}/${bzip2_pkg} -j$(nproc)             clean
        make -C ${bzip2_dir}/${bzip2_pkg} -j$(nproc)
        make -C ${bzip2_dir}/${bzip2_pkg} -j$(nproc) PREFIX=/usr install
    esac
    cp -av ${bzip2_dir}/${bzip2_pkg}/libbz2.so.*     /usr/lib
    ln -sv ./libbz2.so.1.0.8                         /usr/lib/libbz2.so
    cp -v  ${bzip2_dir}/${bzip2_pkg}/bzip2-shared    /usr/bin/bzip2
    for i in /usr/bin/{bzcat,bunzip2}; do
      ln -sfv ./bzip2 $i
    done
    rm -fv /usr/lib/libbz2.a
    # Save progress
    echo "`sed '/save_final_bzip2/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_bzip2=1\n" >> $fullsavename
    echo -e "${success}bzip2 data compressor successfully installed.${default}"
    echo -e "${info}Removing ${bzip2_dir}/${bzip2_pkg}, please do not cancel this process...${default}"
    rm -r ${bzip2_dir}/${bzip2_pkg} || true
  ;;
  *)
    save-error "save_final_bzip2"
esac

# Xz Utils
if [[ -z "$save_final_xz" ]]; then
  save_final_xz=0
fi
case $save_final_xz in
  1)
  ;;
  0)
    xz_dir=/sources/xz
    xz_pkg=$(ls $xz_dir | grep .tar.xz)
    xz_pkg=$(basename ${xz_dir}/$xz_pkg .tar.xz)
    pushd ${xz_dir}/${xz_pkg}
      ${xz_dir}/${xz_pkg}/configure --prefix=/usr    \
                  --disable-static \
                  --docdir=/usr/share/doc/$xz_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${xz_dir}/build distclean || true
        rm  -rv ${xz_dir}/build || true
        make -C ${xz_dir}/${xz_pkg}
        make -C ${xz_dir}/${xz_pkg} check || true
        make -C ${xz_dir}/${xz_pkg} install
      ;;
      *)
        make -C ${xz_dir}/build distclean || true
        rm  -rv ${xz_dir}/build || true
        make -C ${xz_dir}/${xz_pkg} -j$(nproc)
        make -C ${xz_dir}/${xz_pkg} -j$(nproc) check || true
        make -C ${xz_dir}/${xz_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_xz/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_xz=1\n" >> $fullsavename
    echo -e "${success}Xz Utils successfully installed.${default}"
    echo -e "${info}Removing ${xz_dir}/${xz_pkg}, please do not cancel this process...${default}"
    rm -r ${xz_dir}/${xz_pkg} || true
  ;;
  *)
    save-error "save_final_xz"
esac

# Zstandard data compression algorithm
if [[ -z "$save_final_zstd" ]]; then
  save_final_zstd=0
fi
case $save_final_zstd in
  1)
  ;;
  0)
    zstd_dir=/sources/zstd
    zstd_pkg=$(ls $zstd_dir | grep .tar.gz)
    zstd_pkg=$(basename ${zstd_dir}/$zstd_pkg .tar.gz)
    case $opt_one_job in
      1)
        make -C ${zstd_dir}/${zstd_pkg} prefix=/usr
        make -C ${zstd_dir}/${zstd_pkg}             check || true
        make -C ${zstd_dir}/${zstd_pkg} prefix=/usr install
      ;;
      *)
        make -C ${zstd_dir}/${zstd_pkg} -j$(nproc) prefix=/usr
        make -C ${zstd_dir}/${zstd_pkg} -j$(nproc)             check || true
        make -C ${zstd_dir}/${zstd_pkg} -j$(nproc) prefix=/usr install
    esac
    # Save progress
    echo "`sed '/save_final_zstd/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_zstd=1\n" >> $fullsavename
    echo -e "${success}Zstandard data compression algorithm successfully installed.${default}"
    echo -e "${info}Removing ${zstd_dir}/${zstd_pkg}, please do not cancel this process...${default}"
    rm -r ${zstd_dir}/${zstd_pkg} || true
  ;;
  *)
    save-error "save_final_zstd"
esac

# Ian Darwin's Free File Command
if [[ -z "$save_final_file" ]]; then
  save_final_file=0
fi
case $save_final_file in
  1)
  ;;
  0)
    file_dir=/sources/file
    file_pkg=$(ls $file_dir | grep .tar.gz)
    file_pkg=$(basename ${file_dir}/$file_pkg .tar.gz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${file_dir}/${file_pkg} distclean || true
      ;;
      *)
        make -C ${file_dir}/${file_pkg} -j$(nproc) distclean || true
    esac
    # Build again & install
    pushd  ${file_dir}/${file_pkg}
      ${file_dir}/${file_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${file_dir}/${file_pkg}
        make -C ${file_dir}/${file_pkg} check || true
        make -C ${file_dir}/${file_pkg} install
      ;;
      *)
        make -C ${file_dir}/${file_pkg} -j$(nproc)
        make -C ${file_dir}/${file_pkg} -j$(nproc) check || true
        make -C ${file_dir}/${file_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_file/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_file=1\n" >> $fullsavename
    echo -e "${success}Ian Darwin's Free File Command successfully installed.${default}"
    echo -e "Removing ${file_dir}/${file_pkg}, please do not cancel this process..."
    rm -r ${file_dir}/${file_pkg} || true
  ;;
  *)
    save-error "save_final_file"
esac

# GNU Readline library
if [[ -z "$save_final_readline" ]]; then
  save_final_readline=0
fi
case $save_final_readline in
  1)
  ;;
  0)
    readline_dir=/sources/readline
    readline_pkg=$(ls $readline_dir | grep .tar.gz)
    readline_pkg=$(basename ${readline_dir}/$readline_pkg .tar.gz)
    # Chapter 8.11.1
    sed -i '/MV.*old/d'    ${readline_dir}/${readline_pkg}/Makefile.in
    sed -i '/{OLDSUFF}/c:' ${readline_dir}/${readline_pkg}/support/shlib-install
    pushd ${readline_dir}/${readline_pkg}
      patch -Np1 -i ${readline_dir}/${readline_pkg}/readline-8.2-upstream_fixes-3.patch
      ${readline_dir}/${readline_pkg}/configure --prefix=/usr    \
                                                --disable-static \
                                                --with-curses    \
                                                --docdir=/usr/share/doc/$readline_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${readline_dir}/${readline_pkg} SHLIB_LIBS="-lncursesw"
        make -C ${readline_dir}/${readline_pkg} SHLIB_LIBS="-lncursesw" install
      ;;
      *)
        make -C ${readline_dir}/${readline_pkg} -j$(nproc) SHLIB_LIBS="-lncursesw"
        make -C ${readline_dir}/${readline_pkg} -j$(nproc) SHLIB_LIBS="-lncursesw" install
    esac
    install -v -m644 ${readline_dir}/${readline_pkg}/doc/*.{ps,pdf,html,dvi} /usr/share/doc/$readline_pkg
    # Save progress
    echo "`sed '/save_final_readline/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_readline=1\n" >> $fullsavename
    echo -e "${success}GNU Readline library successfully installed.${default}"
    echo -e "Removing ${readline_dir}/${readline_pkg}, please do not cancel this process..."
    rm -r ${readline_dir}/${readline_pkg} || true
  ;;
  *)
    save-error "save_final_readline"
esac

# GNU M4 macroprocessor
if [[ -z "$save_final_m4" ]]; then
  save_final_m4=0
fi
case $save_final_m4 in
  1)
  ;;
  0)
    m4_dir=/sources/m4
    m4_pkg=$(ls $m4_dir | grep .tar.xz)
    m4_pkg=$(basename ${m4_dir}/$m4_pkg .tar.xz)
    case $opt_one_job in
      1)
        make -C ${m4_dir}/${m4_pkg} distclean || true
      ;;
      *)
        make -C ${m4_dir}/${m4_pkg} -j$(nproc) distclean || true
    esac
    pushd ${m4_dir}/${m4_pkg}
      ${m4_dir}/${m4_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${m4_dir}/${m4_pkg}
        make -C ${m4_dir}/${m4_pkg} check || true
        make -C ${m4_dir}/${m4_pkg} install
      ;;
      *)
        make -C ${m4_dir}/${m4_pkg} -j$(nproc)
        make -C ${m4_dir}/${m4_pkg} -j$(nproc) check || true
        make -C ${m4_dir}/${m4_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_m4/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_m4=1\n" >> $fullsavename
    echo -e "${success}GNU M4 macroprocessor successfully installed.${default}"
    echo -e "Removing ${m4_dir}/${m4_pkg}, please do not cancel this process..."
    rm -r ${m4_dir}/${m4_pkg} || true
  ;;
  *)
    save-error "save_final_m4"
esac

# GNU bc arbitrary precision numeric processing language
if [[ -z "$save_final_bc" ]]; then
  save_final_bc=0
fi
case $save_final_bc in
  1)
  ;;
  0)
    bc_dir=/sources/bc
    bc_pkg=$(ls $bc_dir | grep .tar.gz)
    bc_pkg=$(basename ${bc_dir}/$bc_pkg .tar.gz)
    pushd ${bc_dir}/${bc_pkg}
      ${bc_dir}/${bc_pkg}/configure --prefix=/usr -G -O3 -r
    popd
    case $opt_one_job in
      1)
        make -C ${bc_dir}/${bc_pkg}
        make -C ${bc_dir}/${bc_pkg} check || true
        make -C ${bc_dir}/${bc_pkg} install
      ;;
      *)
        make -C ${bc_dir}/${bc_pkg} -j$(nproc)
        make -C ${bc_dir}/${bc_pkg} -j$(nproc) check || true
        make -C ${bc_dir}/${bc_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_bc/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_bc=1\n" >> $fullsavename
    echo -e "${success}GNU bc arbitrary precision numeric processing language successfully installed.${default}"
    echo -e "Removing ${bc_dir}/${bc_pkg}, please do not cancel this process..."
    rm -r ${bc_dir}/${bc_pkg} || true
  ;;
  *)
    save-error "save_final_bc"
esac

# flex, the Fast Lexical Analyzer
if [[ -z "$save_final_flex" ]]; then
  save_final_flex=0
fi
case $save_final_flex in
  1)
  ;;
  0)
    flex_dir=/sources/flex
    flex_pkg=$(ls $flex_dir | grep .tar.gz)
    flex_pkg=$(basename ${flex_dir}/$flex_pkg .tar.gz)
    pushd ${flex_dir}/${flex_pkg}
      ${flex_dir}/${flex_pkg}/configure --prefix=/usr                       \
                                        --docdir=/usr/share/doc/${flex_pkg} \
                                        --disable-static
    popd
    case $opt_one_job in
      1)
        make -C ${flex_dir}/${flex_pkg}
        make -C ${flex_dir}/${flex_pkg} check || true
        make -C ${flex_dir}/${flex_pkg} install
      ;;
      *)
        make -C ${flex_dir}/${flex_pkg} -j$(nproc)
        make -C ${flex_dir}/${flex_pkg} -j$(nproc) check || true
        make -C ${flex_dir}/${flex_pkg} -j$(nproc) install
    esac
    ln -sv ./flex   /usr/bin/lex
    ln -sv ./flex.1 /usr/share/man/man1/lex.1
    # Save progress
    echo "`sed '/save_final_flex/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_flex=1\n" >> $fullsavename
    echo -e "${success}flex, the Fast Lexical Analyzer successfully installed.${default}"
    echo -e "Removing ${flex_dir}/${flex_pkg}, please do not cancel this process..."
    rm -r ${flex_dir}/${flex_pkg} || true
  ;;
  *)
    save-error "save_final_flex"
esac

# Tool Command Language
if [[ -z "$save_final_tcl" ]]; then
  save_final_tcl=0
fi
case $save_final_tcl in
  1)
  ;;
  0)
    tcl_dir=/sources/tcl
    tcl_pkg=$(ls $tcl_dir | grep .tar.gz)
    tcl_pkg=$(basename ${tcl_dir}/$tcl_pkg .tar.gz)
    # Chapter 8.15.1
    pushd ${tcl_dir}/${tcl_pkg}/unix
      SRCDIR=${tcl_dir}/${tcl_pkg}
      ${tcl_dir}/${tcl_pkg}/unix/configure --prefix=/usr           \
                                           --mandir=/usr/share/man
    popd
    case $opt_one_job in
      1)
        make -C ${tcl_dir}/${tcl_pkg}/unix
      ;;
      *)
        make -C ${tcl_dir}/${tcl_pkg}/unix -j$(nproc)
    esac
    sed -e "s|$SRCDIR/unix|/usr/lib|" \
        -e "s|$SRCDIR|/usr/include|"  \
        -i ${tcl_dir}/${tcl_pkg}/unix/tclConfig.sh

    sed -e "s|$SRCDIR/unix/pkgs/tdbc1.1.5|/usr/lib/tdbc1.1.5|" \
        -e "s|$SRCDIR/pkgs/tdbc1.1.5/generic|/usr/include|"    \
        -e "s|$SRCDIR/pkgs/tdbc1.1.5/library|/usr/lib/${tcl_pkg}|" \
        -e "s|$SRCDIR/pkgs/tdbc1.1.5|/usr/include|"            \
        -i ${tcl_dir}/${tcl_pkg}/unix/pkgs/tdbc1.1.5/tdbcConfig.sh

    sed -e "s|$SRCDIR/unix/pkgs/itcl4.2.3|/usr/lib/itcl4.2.3|" \
        -e "s|$SRCDIR/pkgs/itcl4.2.3/generic|/usr/include|"    \
        -e "s|$SRCDIR/pkgs/itcl4.2.3|/usr/include|"            \
        -i ${tcl_dir}/${tcl_pkg}/unix/pkgs/itcl4.2.3/itclConfig.sh
    unset SRCDIR
    case $opt_one_job in
      1)
        make -C ${tcl_dir}/${tcl_pkg}/unix check || true
        make -C ${tcl_dir}/${tcl_pkg}/unix install
      ;;
      *)
        make -C ${tcl_dir}/${tcl_pkg}/unix -j$(nproc) check || true
        make -C ${tcl_dir}/${tcl_pkg}/unix -j$(nproc) install
    esac
    chmod -v u+w /usr/lib/libtcl8.6.so
    case $opt_one_job in
      1)
        make -C ${tcl_dir}/${tcl_pkg} install-private-headers
      ;;
      *)
        make -C ${tcl_dir}/${tcl_pkg} -j$(nproc) install-private-headers
    esac
    ln -sfv ./tclsh8.6 /usr/bin/tclsh
    mv /usr/share/man/man3/{Thread,Tcl_Thread}.3
    # Save progress
    echo "`sed '/save_final_tcl/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_tcl=1\n" >> $fullsavename
    echo -e "${success}Tool Command Language successfully installed.${default}"
    echo -e "Removing ${tcl_dir}/${tcl_pkg}, please do not cancel this process..."
    rm -r ${tcl_dir}/${tcl_pkg} || true
  ;;
  *)
    save-error "save_final_tcl"
esac

# Expect package
if [[ -z $save_final_expect ]]; then
  save_final_expect=0
fi
case $save_final_expect in
  1)
  ;;
  0)
    python3 -c 'from pty import spawn; spawn(["echo", "PTYs are working fine"])'
    expect_dir=/sources/expect
    expect_pkg=$(ls $expect_dir | grep .tar.gz)
    expect_pkg=$(basename ${expect_dir}/$expect_pkg .tar.gz)
    pushd ${expect_dir}/${expect_pkg}
      ${expect_dir}/${expect_pkg}/configure --prefix=/usr           \
                                            --with-tcl=/usr/lib     \
                                            --enable-shared         \
                                            --mandir=/usr/share/man \
                                            --with-tclinclude=/usr/include
    case $opt_one_job in
      1)
        make -C ${expect_dir}/${expect_pkg}
        make -C ${expect_dir}/${expect_pkg} test || true
        make -C ${expect_dir}/${expect_pkg} install
      ;;
      *)
        make -C ${expect_dir}/${expect_pkg} -j$(nproc)
        make -C ${expect_dir}/${expect_pkg} -j$(nproc) test || true
        make -C ${expect_dir}/${expect_pkg} -j$(nproc) install
    esac
    ln -svf ./expect5.45.4/libexpect5.45.4.so /usr/lib/libxexpect5.45.4.so
    # Save progress
    echo "`sed '/save_final_expect/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_expect=1\n" >> $fullsavename
    echo -e "${success}Expect package successfully installed.${default}"
    echo -e "Removing ${expect_dir}/${expect_pkg}, please do not cancel this process..."
    rm -r ${expect_dir}/${expect_pkg} || true
  ;;
  *)
    save-error "save_final_expect"
esac

# DejaGNU framework
if [[ -z "$save_final_dejagnu" ]]; then
  save_final_dejagnu=0
fi
case $save_final_dejagnu in
  1)
  ;;
  0)
    dejagnu_dir=/sources/dejagnu
    dejagnu_pkg=$(ls $dejagnu_dir | grep .tar.gz)
    dejagnu_pkg=$(basename ${dejagnu_dir}/$dejagnu_pkg .tar.gz)
    mkdir -v ${dejagnu_dir}/${dejagnu_pkg}/build || true
    pushd ${dejagnu_dir}/${dejagnu_pkg}/build
      ${dejagnu_dir}/${dejagnu_pkg}/configure --prefix=/usr
    popd
    makeinfo --html --no-split -o ${dejagnu_dir}/${dejagnu_pkg}/build/doc/dejagnu.html \
                                  ${dejagnu_dir}/${dejagnu_pkg}/doc/dejagnu.texi
    makeinfo --plaintext       -o ${dejagnu_dir}/${dejagnu_pkg}/doc/dejagnu.txt        \
                                  ${dejagnu_dir}/${dejagnu_pkg}/doc/dejagnu.texi
    case $opt_one_job in
      1)
        make -C ${dejagnu_dir}/${dejagnu_pkg} check || true
        make -C ${dejagnu_dir}/${dejagnu_pkg} install
      ;;
      *)
        make -C ${dejagnu_dir}/${dejagnu_pkg} -j$(nproc) check || true
        make -C ${dejagnu_dir}/${dejagnu_pkg} -j$(nproc) install
    esac
    install -v -dm755  /usr/share/doc/dejagnu-1.6.3
    install -v -m644   ${dejagnu_dir}/${dejagnu_pkg}/build/doc/dejagnu.{html,txt} /usr/share/doc/${dejagnu_pkg}
    # Save progress
    echo "`sed '/save_final_dejagnu/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_dejagnu=1\n" >> $fullsavename
    echo -e "${success}DejaGNU framework successfully installed.${default}"
    echo -e "Removing ${dejagnu_dir}/${dejagnu_pkg}, please do not cancel this process..."
    rm -r ${dejagnu_dir}/${dejagnu_pkg} || true
  ;;
  *)
    save-error "save_final_dejagnu"
esac

# Pkgconf package
if [[ -z "$save_final_pkgconf" ]]; then
  save_final_pkgconf=0
fi
case $save_final_pkgconf in
  1)
  ;;
  0)
    pkgconf_dir=/sources/pkgconf
    pkgconf_pkg=$(ls $pkgconf_dir | grep .tar.xz)
    pkgconf_pkg=$(basename ${pkgconf_dir}/$pkgconf_pkg .tar.xz)
    pushd ${pkgconf_dir}/$pkgconf_pkg
      ${pkgconf_dir}/${pkgconf_pkg}/configure --prefix=/usr              \
                                              --disable-static           \
                                              --docdir=/usr/share/doc/${pkgconf_pkg}
    popd
    case $opt_one_job in
      1)
        make -C ${pkgconf_dir}/${pkgconf_pkg}
        make -C ${pkgconf_dir}/${pkgconf_pkg} install
      ;;
      *)
        make -C ${pkgconf_dir}/${pkgconf_pkg} -j$(nproc)
        make -C ${pkgconf_dir}/${pkgconf_pkg} -j$(nproc) install
    esac
    ln -sv ./pkgconf   /usr/bin/pkg-config
    ln -sv ./pkgconf.1 /usr/share/man/man1/pkg-config.1
    # Save progress
    echo "`sed '/save_final_pkgconf/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_pkgconf=1\n" >> $fullsavename
    echo -e "${success}Pkgconf package successfully installed.${default}"
    echo -e "Removing ${pkgconf_dir}/${pkgconf_pkg}, please do not cancel this process..."
    rm -r ${pkgconf_dir}/${pkgconf_pkg} || true
  ;;
  *)
    save-error "save_final_pkgconf"
esac

# GNU Binutils
if [[ -z "$save_final_binutils" ]]; then
  save_final_binutils=0
fi
case $save_final_binutils in
  1)
  ;;
  0)
    binutils_dir=/sources/binutils
    binutils_pkg=$(ls $binutils_dir | grep .tar.xz)
    binutils_pkg=$(basename ${binutils_dir}/$binutils_pkg .tar.xz)
    case $opt_one_job in
      1)
        make -C ${binutils_dir}/${binutils_pkg} distclean || true
        make -C ${binutils_dir}/build           distclean || true
      ;;
      *)
        make -C ${binutils_dir}/${binutils_pkg} -j $(nproc) distclean || true
        make -C ${binutils_dir}/build           -j $(nproc) distclean || true
    esac
    mkdir -v ${binutls_dir}/build
    pushd ${binutils_dir}/build
      ${binutils_dir}/${binutils_pkg}/configure --prefix=/usr       \
                                                --sysconfdir=/etc   \
                                                --enable-gold       \
                                                --enable-ld=default \
                                                --enable-plugins    \
                                                --enable-shared     \
                                                --disable-werror    \
                                                --enable-64-bit-bfd \
                                                --with-system-zlib  \
                                                --enable-default-hash-style=gnu
    popd
    case $opt_one_job in
      1)
        make -C ${binutils_dir}/${binutils_pkg} tooldir=/usr
        make -C ${binutils_dir}/${binutils_pkg} -k           check || true
        make -C ${binutils_dir}/${binutils_pkg} tooldir=/usr install
      ;;
      *)
        make -C ${binutils_dir}/${binutils_pkg} -j$(nproc) tooldir=/usr
        make -C ${binutils_dir}/${binutils_pkg} -j$(nproc) -k           check || true
        make -C ${binutils_dir}/${binutils_pkg} -j$(nproc) tooldir=/usr install
    esac
    rm -fv /usr/lib/lib{bfd,ctf,ctf-nobfd,gprofng,opcodes,sframe}.a
    # Save progress
    echo "`sed '/save_final_binutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_binutils=1\n" >> $fullsavename
    echo -e "${success}GNU Binutils successfully installed.${default}"
    echo -e "Removing ${binutils_dir}/${binutils_pkg}, please do not cancel this process..."
    rm -r ${binutils_dir}/${binutils_pkg} || true
  ;;
  *)
    save-error "save_final_binutils"
esac

# GNU Multiple Precision arithmetic library (GMP)
if [[ -z "$save_final_gmp" ]]; then
  save_final_gmp
fi
case $save_final_gmp in
  1)
  ;;
  0)
    gcc_dir=/sources/gcc
    gcc_pkg=$(ls $gcc_dir | grep .tar.xz)
    gcc_pkg=$(basename ${gcc_dir}/$gcc_pkg .tar.xz)
    gmp_dir=${gcc_dir}/${gcc_pkg}/gmp
    gmp_pkg="gmp-$(${gmp_dir}/configure --version | grep "GNU MP configure" | awk '{print $4}')"
    # GMP is located at GCC source code directory
    case $opt_one_job in
      1)
        make -C ${gcc_dir}/build distclean || true
      ;;
      *)
        make -C ${gcc_dir}/build -j$(nproc) distclean || true
    esac
    pushd $gmp_dir
      ${gmp_dir}/configure --prefix=/usr    \
                           --enable-cxx     \
                           --disable-static \
                           --docdir=/usr/share/doc/$gmp_pkg
    popd
    case $opt_one_job in
      1)
        make -C $gmp_dir
        make -C $gmp_dir html
        make -C $gmp_dir check 2>&1 | tee /sources/gmp-check-log
        make -C $gmp_dir install
        make -C $gmp_dir install-html
      ;;
      *)
        make -C $gmp_dir -j$(nproc)
        make -C $gmp_dir -j$(nproc) html
        make -C $gmp_dir -j$(nproc) check 2>&1 | tee /sources/gmp-check-log
        make -C $gmp_dir -j$(nproc) install
        make -C $gmp_dir -j$(nproc) install-html
    esac
    # Save progress
    echo "`sed '/save_final_gmp/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_gmp=1\n" >> $fullsavename
    echo -e "${success}GNU Multiple Precision arithmetic library (GMP) successfully installed.${default}"
    echo -e "${info}Moving $gmp_dir to /sources/gmp,${default}"
    echo -e "${warning}DO NOT CANCEL THIS OPERATION, OTHERWISE THE GMP SOURCES WILL BE MESSED UP AND DIFFICULT TO RESTORE!${default}"
    mv $gmp_dir /sources/gmp
  ;;
  *)
    save-error "save_final_gmp"
esac

# GNU Multiple Precision Floating-Point Reliable library (MPFR)
if [[ -z "$save_final_mpfr" ]]; then
  save_final_mpfr=0
fi
case $save_final_mpfr in
  1)
  ;;
  0)
    gcc_dir=/sources/gcc
    gcc_pkg=$(ls $gcc_dir | grep .tar.xz)
    gcc_pkg=$(basename ${gcc_dir}/$gcc_pkg .tar.xz)
    mpfr_dir=${gcc_dir}/${gcc_pkg}/mpfr
    mpfr_pkg="mpfr-$(${mpfr_dir}/configure --version | grep "MPFR configure" | awk '{print $3}')"
    pushd $mpfr_dir
      ${mpfr_dir}/configure --prefix=/usr        \
                            --disable-static     \
                            --enable-thread-safe \
                            --docdir=/usr/share/doc/$mpfr_pkg
    popd
    case $opt_one_job in
      1)
        make -C $mpfr_dir
        make -C $mpfr_dir html
        make -C $mpfr_dir check || true
        make -C $mpfr_dir install
        make -C $mpfr_dir install-html
      ;;
      *)
        make -C $mpfr_dir -j$(nproc)
        make -C $mpfr_dir -j$(nproc) html
        make -C $mpfr_dir -j$(nproc) check || true
        make -C $mpfr_dir -j$(nproc) install
        make -C $mpfr_dir -j$(nproc) install-html
    esac
    # Save progress
    echo "`sed '/save_final_mpfr/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_mpfr=1\n" >> $fullsavename
    echo -e "${success}GNU Multiple Precision Floating-Point Reliable library (MPFR) successfully installed.${default}"
    echo -e "${info}Moving $mpfr_dir to /sources/mpfr,${default}"
    echo -e "${warning}DO NOT CANCEL THIS OPERATION, OTHERWISE THE MPFR SOURCES WILL BE MESSED UP AND DIFFICULT TO RESTORE!${default}"
    mv $mpfr_dir /sources/mpfr
  ;;
  *)
    save-error "save_final_mpfr"
esac

# GNU MPC
if [[ -z "$save_final_mpc" ]]; then
  save_final_mpc=0
fi
case $save_final_mpc in
  1)
  ;;
  0)
    gcc_dir=/sources/gcc
    gcc_pkg=$(ls $gcc_dir | grep .tar.xz)
    gcc_pkg=$(basename ${gcc_dir}/$gcc_pkg .tar.xz)
    mpc_dir=${gcc_dir}/${gcc_pkg}/mpc
    mpc_pkg="mpc-$(${mpc_dir}/configure --version | grep "mpc configure" | awk '{print $3}')"
    pushd $mpc_dir
      ${mpc_dir}/configure --prefix=/usr    \
                           --disable-static \
                           --docdir=/usr/share/doc/$mpc_pkg
    popd
    case $opt_one_job in
      1)
        make -C $mpc_dir
        make -C $mpc_dir html
        make -C $mpc_dir check || true
        make -C $mpc_dir install
        make -C $mpc_dir install-html
      ;;
      *)
        make -C $mpc_dir -j$(nproc)
        make -C $mpc_dir -j$(nproc) html
        make -C $mpc_dir -j$(nproc) check || true
        make -C $mpc_dir -j$(nproc) install
        make -C $mpc_dir -j$(nproc) install-html
    esac
    # Save progress
    echo "`sed '/save_final_mpc/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_mpc=1\n" >> $fullsavename
    echo -e "${success}GNU MPC successfully installed.${default}"
    echo -e "${info}Moving $mpc_dir to /sources/mpc,${default}"
    echo -e "${warning}DO NOT CANCEL THIS OPERATION, OTHERWISE THE MPC SOURCES WILL BE MESSED UP AND DIFFICULT TO RESTORE!${default}"
    mv $mpc_dir /sources/mpc
  ;;
  *)
    save-error "save_final_mpc"
esac

# Attr, Commands for Manipulating Filesystem Extended Attributes
if [[ -z "$save_final_attr" ]]; then
  save_final_attr=0
fi
case $save_final_attr in
  1)
  ;;
  0)
    attr_dir=/sources/attr
    attr_pkg=$(ls $attr_dir | grep .tar.xz)
    attr_pkg=$(basename ${attr_dir}/$attr_pkg .tar.xz)
    pushd ${attr_dir}/$attr_pkg
      ${attr_dir}/${attr_pkg}/configure --prefix=/usr     \
                                        --disable-static  \
                                        --sysconfdir=/etc \
                                        --docdir=/usr/share/doc/$attr_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${attr_dir}/${attr_pkg}
        make -C ${attr_dir}/${attr_pkg} check || true
        make -C ${attr_dir}/${attr_pkg} install
      ;;
      *)
        make -C ${attr_dir}/${attr_pkg} -j$(nproc)
        make -C ${attr_dir}/${attr_pkg} -j$(nproc) check || true
        make -C ${attr_dir}/${attr_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_attr/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_attr=1\n" >> $fullsavename
    echo -e "${success}Attr, Commands for Manipulating Filesystem Extended Attributes successfully installed.${default}"
    echo -e "${info}Removing ${attr_dir}/${attr_pkg}, please do not cancel this process...${default}"
    rm -r ${attr_dir}/${attr_pkg} || true
  ;;
  *)
    save-error "save_final_attr"
esac

# Acl, Commands for Manipulating POSIX Access Control Lists
if [[ -z "$save_final_acl" ]]; then
  save_final_acl=0
fi
case $save_final_acl in
  1)
  ;;
  0)
    acl_dir=/sources/acl
    acl_pkg=$(ls $acl_dir | grep .tar.xz)
    acl_pkg=$(basename ${acl_dir}/$acl_pkg .tar.xz)
    pushd ${acl_dir}/$acl_pkg
      ${acl_dir}/${acl_pkg}/configure --prefix=/usr         \
                                      --disable-static      \
                                      --docdir=/usr/share/doc/$acl_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${acl_dir}/${acl_pkg}
        make -C ${acl_dir}/${acl_pkg} install
      ;;
      *)
        make -C ${acl_dir}/${acl_pkg} -j$(nproc)
        make -C ${acl_dir}/${acl_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_acl/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_acl=1\n" >> $fullsavename
    echo -e "${success}Acl, Commands for Manipulating POSIX Access Control Lists successfully installed.${default}"
    echo -e "${info}Removing ${acl_dir}/${acl_pkg}, please do not cancel this process...${default}"
    rm -r ${acl_dir}/${acl_pkg} || true
  ;;
  *)
    save-error "save_final_acl"
esac

# Libcap, an implementation of the userspace interface to the POSIX 1003.1e capabilities
if [[ -z "$save_final_libcap" ]]; then
  save_final_libcap=0
fi
case $save_final_libcap in
  1)
  ;;
  0)
    libcap_dir=/sources/libcap
    libcap_pkg=$(ls $libcap_dir | grep .tar.xz)
    libcap_pkg=$(basename ${libcap_dir}/$libcap_pkg .tar.xz)
    # Chapter 8.25.1
    sed -i '/install -m.*STA/d' ${libcap_dir}/${libcap_pkg}/libcap/Makefile
    case $opt_one_job in
      1)
        make -C ${libcap_dir}/${libcap_pkg} prefix=/usr lib=lib
        make -C ${libcap_dir}/${libcap_pkg}                     test || true
        make -C ${libcap_dir}/${libcap_pkg} prefix=/usr lib=lib install
      ;;
      *)
        make -C ${libcap_dir}/${libcap_pkg} -j$(nproc) prefix=/usr lib=lib
        make -C ${libcap_dir}/${libcap_pkg} -j$(nproc)                     test || true
        make -C ${libcap_dir}/${libcap_pkg} -j$(nproc) prefix=/usr lib=lib install
    esac
    # Save progress
    echo "`sed '/save_final_libcap/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_libcap=1\n" >> $fullsavename
    echo -e "${success}Libcap, an implementation of the userspace interface to the POSIX 1003.1e capabilities successfully installed.${default}"
    echo -e "${info}Removing ${libcap_dir}/${libcap_pkg}, please do not cancel this process...${default}"
    rm -r ${libcap_dir}/${libcap_pkg} || true
  ;;
  *)
    save-error "save_final_libcap"
esac

# Libxcrypt, a modern library for one-way hashing of passwords
if [[ -z "$save_final_libxcrypt" ]]; then
  save_final_libxcrypt=0
fi
case $save_final_libxcrypt in
  1)
  ;;
  0)
    libxcrypt_dir=/sources/libxcrypt
    libxcrypt_pkg=$(ls $libxcrypt_dir | grep .tar.xz)
    libxcrypt_pkg=$(basename ${libxcrypt_dir}/$libxcrypt_pkg .tar.xz)
    pushd ${libxcrypt_dir}/$libxcrypt_pkg
      ${libxcrypt_dir}/${libxcrypt_pkg}/configure --prefix=/usr                \
                                                  --enable-hashes=strong,glibc \
                                                  --enable-obsolete-api=glibc  \
                                                  --disable-static             \
                                                  --disable-failure-tokens
    popd
    case $opt_one_job in
      1)
        make -C ${libxcrypt_dir}/${libxcrypt_pkg}
        make -C ${libxcrypt_dir}/${libxcrypt_pkg} check || true
        make -C ${libxcrypt_dir}/${libxcrypt_pkg} install
      ;;
      *)
        make -C ${libxcrypt_dir}/${libxcrypt_pkg} -j$(nproc)
        make -C ${libxcrypt_dir}/${libxcrypt_pkg} -j$(nproc) check || true
        make -C ${libxcrypt_dir}/${libxcrypt_pkg} -j$(nproc) install
    esac
    cp -av --remove-destination ${libxcrypt_dir}/${libxcrypt_pkg}/.libs/libcrypt.so.1* /usr/lib
    # Save progress
    echo "`sed '/save_final_libxcrypt/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_libxcrypt=1\n" >> $fullsavename
    echo -e "${success}Libxcrypt, a modern library for one-way hashing of passwords successfully installed.${default}"
    echo -e "${info}Removing ${libxcrypt_dir}/${libxcrypt_pkg}, please do not cancel this process...${default}"
    rm -r ${libxcrypt_dir}/${libxcrypt_pkg} || true
  ;;
  *)
    save-error "save_final_libxcrypt"
esac

# Shadow, programs for handling passwords in a secure way
if [[ -z "$save_final_shadow" ]]; then
  save_final_shadow=0
fi
case $save_final_shadow in
  1)
  ;;
  0)
    shadow_dir=/sources/shadow
    shadow_pkg=$(ls $shadow_dir | grep .tar.xz)
    shadow_pkg=$(basename ${shadow_dir}/$shadow_pkg .tar.xz)
    sed -i 's/groups$(EXEEXT) //' ${shadow_dir}/${shadow_pkg}/src/Makefile.in
    find man -name ${shadow_dir}/${shadow_pkg}/Makefile.in -exec sed -i 's/groups\.1 / /'   {} \;
    find man -name ${shadow_dir}/${shadow_pkg}/Makefile.in -exec sed -i 's/getspnam\.3 / /' {} \;
    find man -name ${shadow_dir}/${shadow_pkg}/Makefile.in -exec sed -i 's/passwd\.5 / /'   {} \;
    sed -e 's:#ENCRYPT_METHOD DES:ENCRYPT_METHOD YESCRYPT:' \
        -e 's:/var/spool/mail:/var/mail:'                   \
        -e '/PATH=/{s@/sbin:@@;s@/bin:@@}'                  \
        -i ${shadow_dir}/${shadow_pkg}/etc/login.defs
    touch /usr/bin/passwd
    pushd ${shadow_dir}/${shadow_pkg}
      ${shadow_dir}/${shadow_pkg}/configure --sysconfdir=/etc   \
                                            --disable-static    \
                                            --with-{b,yes}crypt \
                                            --without-libbsd    \
                                            --with-group-name-max-length=32
    popd
    case $opt_one_job in
      1)
        make -C ${shadow_dir}/${shadow_pkg}
        make -C ${shadow_dir}/${shadow_pkg} exec_prefix=/usr install
        make -C ${shadow_dir}/${shadow_pkg}/man              install-man
      ;;
      *)
        make -C ${shadow_dir}/${shadow_pkg}     -j$(nproc)
        make -C ${shadow_dir}/${shadow_pkg}     -j$(nproc) exec_prefix=/usr install
        make -C ${shadow_dir}/${shadow_pkg}/man -j$(nproc)                  install-man
    esac
    pwconv
    grpconv
    mkdir -pv /etc/default
    useradd -D --gid 999
    shadow_passwd_root_func() {
    read -p "Would you like to set password for root (full rights) user? (Y/n)" shadow_passwd_root
    if [[ -z "$shadow_passwd_root" ]]; then
      shadow_passwd_root=y
    fi
    case $shadow_passwd_root in
      [Yy])
        passwd root
      ;;
      [Nn])
      ;;
      *)
        shadow_passwd_root_func
    esac
    } shadow_passwd_root_func
    # Save progress
    echo "`sed '/save_final_shadow/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_shadow=1\n" >> $fullsavename
    echo -e "${success}Shadow, programs for handling passwords in a secure way successfully installed.${default}"
    echo -e "${info}Removing ${shadow_dir}/${shadow_pkg}, please do not cancel this process...${default}"
    rm -r ${shadow_dir}/${shadow_pkg} || true
  ;;
  *)
    save-error "save_final_shadow"
esac

# GNU Compiler Collection
if [[ -z "$save_final_gcc" ]]; then
  save_final_gcc=0
fi
case $save_final_gcc in
  1)
  ;;
  0)
    gcc_dir=/sources/gcc
    gcc_pkg=$(ls $gcc_dir | grep .tar.xz)
    gcc_pkg=$(basename ${gcc_dir}/$gcc_pkg .tar.xz)
    case $(uname -m) in
      x86_64)
        sed -e      '/m64=/s/lib64/lib/' \
            -i.orig ${gcc_dir}/${gcc_pkg}/gcc/config/i386/t-linux64
      ;;
    esac
    pushd ${gcc_dir}/build
      {gcc_dir}/${gcc_pkg}/configure --prefix=/usr            \
                                     LD=ld                    \
                                     --enable-languages=c,c++ \
                                     --enable-default-pie     \
                                     --enable-default-ssp     \
                                     --disable-multilib       \
                                     --disable-bootstrap      \
                                     --disable-fixincludes    \
                                     --with-system-zlib
    popd
    case $opt_one_job in
      1)
        make -C ${gcc_dir}/build
      ;;
      *)
        make -C ${gcc_dir}/build -j$(nproc)
    esac
    # Chapter 8.28.1
    ulimit -s 32768
    chown -R TrustedInstaller ${gcc_dir}/build
    case $opt_one_job in
      1)
        pushd ${gcc_dir}/build
          su TrustedInstaller -c "PATH=$PATH make -k check || true" || true
        popd
        make -C ${gcc_dir}/build install
      ;;
      *)
        pushd ${gcc_dir}/build
          su TrustedInstaller -c "PATH=$PATH make -k check -j$(nproc) || true" || true
        popd
        make -C ${gcc_dir}/build -j(nproc) install
    esac
    chown -v -R root:root /usr/lib/gcc/$(gcc -dumpmachine)/${gcc_pkg#gcc-}/include{,-fixed}
    ln -svr ../bin/cpp /usr/lib/cpp
    ln -sv  ./gcc.1    /usr/share/man/man1/cc.1
    ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/${gcc_pkg#gcc-}/liblto_plugin.so \
                       /usr/lib/bfd-plugins/liblto_plugin.so
    echo -e "${info}Testing the just built GCC for simple sanity...${default}"
    echo 'int main(){}' > /home/TrustedInstaller/dummy.c
    cc /home/TrustedInstaller/dummy.c -v -Wl,--verbose &> /home/TrustedInstaller/dummy.log
    if [[ `readelf -l /home/TrustedInstaller/a.out | grep ': /lib'` != "[Requesting program interpreter: /lib*/ld-linux-$(uname -m).so.2]" ]]; then
      echo -e "${warning}GCC does not work properly [test 1 failed].${default}"
    fi
    if [[ -z "$(grep -E -o '/usr/lib.*/S?crt[1in].*succeeded' /home/TrustedInstaller/dummy.log)" ]]; then
      echo -e "${warning}GCC does not work properly [test 2 failed].${default}"
    fi
    if [[ -z "`grep -B4 '^ /usr/include' /home/TrustedInstaller/dummy.log`" ]]; then
      echo -e "${warning}GCC does not work properly [test 3 failed].${default}"
    fi
    if [[ -z "`grep 'SEARCH.*/usr/lib' /home/TrustedInstaller/dummy.log |sed 's|; |\n|g' | grep lib`"]]; then
      echo -e "${warning}GCC does not work properly [test 4 failed].${default}"
    fi
    if [[ -z "`grep \"/lib.*/libc.so.6 \" /home/TrustedInstaller/dummy.log | grep succeeded`" ]]; then
      echo -e "${warning}GCC does not work properly [test 5 failed].${default}"
    fi
    if [[ -z "`grep found dummy.log | grep found | grep ld-linux`" ]]; then
      echo -e "${warning}GCC does not work properly [test 6 failed].${default}"
    fi
    rm    -v  /home/TrustedInstaller/{dummy.c,a.out,dummy.log} || true
    mkdir -pv /usr/share/gdb/auto-load/usr/lib
    mv    -v  /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib
    # Save progress
    echo "`sed '/save_final_gcc/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_gcc=1\n" >> $fullsavename
    echo -e "${success}GNU Compiler Collection successfully installed.${default}"
    echo -e "${info}Removing ${gcc_dir}/${gcc_pkg}, please do not cancel this process...${default}"
    rm -r ${gcc_dir}/${gcc_pkg} || true
  ;;
  *)
    save-error "save_final_gcc"
esac

# Ncurses library
if [[ -z $save_final_ncurses ]]; then
  save_final_ncurse=0
fi
case $save_final_ncurses in
  1)
  ;;
  0)
    ncurses_dir=/sources/ncurses
    ncurses_pkg=$(ls $ncurses_dir | grep .tar.gz)
    ncurses_pkg=$(basename ${ncurses_dir}/$ncurses_pkg .tar.gz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${ncurses_dir}/${ncurses_pkg} distclean || true
      ;;
      *)
        make -C ${ncurses_dir}/${ncurses_pkg} -j$(nproc) distclean || true
    esac
    pushd ${ncurses_dir}/${ncurses_pkg}
      ${ncurses_dir}/${ncurses_pkg}/configure --prefix=/usr           \
                                              --mandir=/usr/share/man \
                                              --with-shared           \
                                              --without-debug         \
                                              --without-normal        \
                                              --with-cxx-shared       \
                                              --enable-pc-files       \
                                              --enable-widec          \
                                              --with-pkg-config-libdir=/usr/lib/pkgconfig
    popd
    case $opt_one_job in
      1)
        make -C ${ncurses_dir}/${ncurses_pkg}
        make -C ${ncurses_dir}/${ncurses_pkg} DESTDIR=${ncurses_dir}/${ncurses_pkg}/dest install
      ;;
      *)
        make -C ${ncurses_dir}/${ncurses_pkg} -j$(nproc)
        make -C ${ncurses_dir}/${ncurses_pkg} -j$(nproc) DESTDIR=${ncurses_dir}/${ncurses_pkg}/dest install
    esac
    install -vm755 ${ncurses_dir}/${ncurses_pkg}/dest/usr/lib/libncursesw.so.6.4 /usr/lib
    rm -v          ${ncurses_dir}/${ncurses_pkg}/dest/usr/lib/libncursesw.so.6.4
    sed -e 's/^#if.*XOPEN.*$/#if 1/' \
        -i ${ncurses_dir}/${ncurses_pkg}/dest/usr/include/curses.h
    cp -av ${ncurses_dir}/${ncurses_pkg}/dest/* /
    for lib in ncurses form panel menu ; do
      ln -sfv ./lib${lib}w.so /usr/lib/lib${lib}.so
      ln -sfv ./${lib}w.pc    /usr/lib/pkgconfig/${lib}.pc
    done
    ln -sfv ./libncursesw.so /usr/lib/libcurses.so
    cp -v -R ${ncurses_dir}/${ncurses_pkg}/doc -T /usr/share/doc/$ncurses_pkg
    # Save progress
    echo "`sed '/save_final_ncurses/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_ncurses=1\n" >> $fullsavename
    echo -e "${success}Ncurses library successfully installed.${default}"
    echo -e "${info}Removing ${ncurses_dir}/${ncurses_pkg}, please do not cancel this process...${default}"
    rm -r ${ncurses_dir}/${ncurses_pkg} || true
  ;;
  *)
    save-error "save_final_ncurses"
esac

# GNU Streamline Editor
if [[ -z "$save_final_sed" ]]; then
  save_final_sed=0
fi
case $save_final_sed in
  1)
  ;;
  0)
    sed_dir=/sources/sed
    sed_pkg=$(ls $sed_dir | grep .tar.xz)
    sed_pkg=$(basename ${sed_dir}/$sed_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${sed_dir}/${sed_pkg} distclean || true
      ;;
      *)
        make -C ${sed_dir}/${sed_pkg} -j$(nproc) distclean || true
    esac
    pushd ${sed_dir}/${sed_pkg}
      ${sed_dir}/${sed_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${sed_dir}/${sed_pkg}
        make -C ${sed_dir}/${sed_pkg} html
        chown -R TrustedInstaller ${sed_dir}/$sed_pkg
        pushd ${sed_dir}/$sed_pkg
          su TrustedInstaller -c "PATH=$PATH make check || true" || true
        popd
        make -C ${sed_dir}/${sed_pkg} install
      ;;
      *)
        make -C ${sed_dir}/${sed_pkg} -j$(nproc)
        make -C ${sed_dir}/${sed_pkg} -j$(nproc) html
        chown -R TrustedInstaller ${sed_dir}/$sed_pkg
        pushd ${sed_dir}/$sed_pkg
          su TrustedInstaller -c "PATH=$PATH make -j$(nproc) check || true" || true
        popd
        make -C ${sed_dir}/${sed_pkg} -j$(nproc) install
    esac
    install -d -m755                                 /usr/share/doc/$sed_pkg
    install -m644 ${sed_dir}/${sed_pkg}/doc/sed.html /usr/share/doc/$sed_pkg
    # Save progress
    echo "`sed '/save_final_sed/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_sed=1\n" >> $fullsavename
    echo -e "${success}GNU Streamline Editor successfully installed.${default}"
    echo -e "${info}Removing ${sed_dir}/${sed_pkg}, please do not cancel this process...${default}"
    rm -r ${sed_dir}/${sed_pkg} || true
  ;;
  *)
    save-error "save_final_ncurses"
esac

# Psmisc, miscellaneous utilities that use the proc filesystem
if [[ -z "$save_final_psmisc" ]]; then
  save_final_psmisc=0
fi
case $save_final_psmisc in
  1)
  ;;
  0)
    psmisc_dir=/sources/psmisc
    psmisc_pkg=$(ls $psmisc_dir | grep .tar.xz)
    psmisc_pkg=$(basename ${psmisc_dir}/$psmisc_pkg .tar.xz)
    pushd ${psmisc_dir}/$psmisc_pkg
      ${psmisc_dir}/${psmisc_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${psmisc_dir}/${psmisc_pkg}
        make -C ${psmisc_dir}/${psmisc_pkg} check || true
        make -C ${psmisc_dir}/${psmisc_pkg} install
      ;;
      *)
        make -C ${psmisc_dir}/${psmisc_pkg} -j$(nproc)
        make -C ${psmisc_dir}/${psmisc_pkg} -j$(nproc) check || true
        make -C ${psmisc_dir}/${psmisc_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_psmisc/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_psmisc=1\n" >> $fullsavename
    echo -e "${success}Psmisc, miscellaneous utilities that use the proc filesystem successfully installed.${default}"
    echo -e "${info}Removing ${psmisc_dir}/${psmisc_pkg}, please do not cancel this process...${default}"
    rm -r ${psmisc_dir}/${psmisc_pkg} || true
  ;;
  *)
    save-error "save_final_psmisc"
esac

# GNU gettext utilities
if [[ -z "$save_final_gettext" ]]; then
  save_final_gettext=0
fi
case $save_final_gettext in
  1)
  ;;
  0)
    gettext_dir=/sources/gettext
    gettext_pkg=$(ls $gettext_dir | grep .tar.xz)
    gettext_pkg=$(basename ${gettext_dir}/$gettext_pkg .tar.xz)
    pushd ${gettext_dir}/$gettext_pkg
      ${gettext_dir}/${gettext_pkg}/configure --prefix=/usr    \
                                              --disable-static \
                                              --docdir=/usr/share/doc/$gettext_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${gettext_dir}/${gettext_pkg}
        make -C ${gettext_dir}/${gettext_pkg} check || true
        make -C ${gettext_dir}/${gettext_pkg} install
      ;;
      *)
        make -C ${gettext_dir}/${gettext_pkg} -j$(nproc)
        make -C ${gettext_dir}/${gettext_pkg} -j$(nproc) check || true
        make -C ${gettext_dir}/${gettext_pkg} -j$(nproc) install
    esac
    chmod -v 0755 /usr/lib/preloadable_libintl.so
    # Save progress
    echo "`sed '/save_final_gettext/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_gettext=1\n" >> $fullsavename
    echo -e "${success}GNU gettext utilities successfully installed.${default}"
    echo -e "${info}Removing ${gettext_dir}/${gettext_pkg}, please do not cancel this process...${default}"
    rm -r ${gettext_dir}/${gettext_pkg} || true
  ;;
  *)
    save-error "save_final_gettext"
esac

# GNU Bison
if [[ -z "$save_final_bison" ]]; then
  save_final_bison=0
fi
case $save_final_bison in
  1)
  ;;
  0)
    bison_dir=/sources/bison
    bison_pkg=$(ls $bison_dir | grep .tar.xz)
    bison_pkg=$(basename ${bison_dir}/$bison_pkg .tar.xz)
    pushd ${bison_dir}/$bison_pkg
      ${bison_dir}/$bison_pkg/configure --prefix=/usr \
                                        --docdir=/usr/share/doc/$bison_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${bison_dir}/${bison_pkg}
        make -C ${bison_dir}/${bison_pkg} check || true
        make -C ${bison_dir}/${bison_pkg} install
      ;;
      *)
        make -C ${bison_dir}/${bison_pkg} -j$(nproc)
        make -C ${bison_dir}/${bison_pkg} -j$(nproc) check || true
        make -C ${bison_dir}/${bison_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_bison/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_bison=1\n" >> $fullsavename
    echo -e "${success}GNU Bison successfully installed.${default}"
    echo -e "${info}Removing ${bison_dir}/${bison_pkg}, please do not cancel this process...${default}"
    rm -r ${bison_dir}/${bison_pkg} || true
  ;;
  *)
    save-error "save_final_bison"
esac

# GNU Grep
if [[ -z "$save_final_grep" ]]; then
  save_final_grep=0
fi
case $save_final_grep in
  1)
  ;;
  0)
    grep_dir=/sources/grep
    grep_pkg=$(ls $grep_dir | grep .tar.xz)
    grep_pkg=$(basename ${grep_dir}/$grep_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${grep_dir}/${grep_pkg} distclean || true
      ;;
      *)
        make -C ${grep_dir}/${grep_pkg} -j$(nproc) distclean || true
    esac
    sed -i "s/echo/#echo/" ${grep_dir}/${grep_pkg}/src/egrep.sh
    pushd ${grep_dir}/${grep_pkg}
      ${grep_dir}/${grep_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${grep_dir}/${grep_pkg}
        make -C ${grep_dir}/${grep_pkg} check || true
        make -C ${grep_dir}/${grep_pkg} install
      ;;
      *)
        make -C ${grep_dir}/${grep_pkg} -j$(nproc)
        make -C ${grep_dir}/${grep_pkg} -j$(nproc) check || true
        make -C ${grep_dir}/${grep_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_grep/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_grep=1\n" >> $fullsavename
    echo -e "${success}GNU Grep successfully installed.${default}"
    echo -e "${info}Removing ${grep_dir}/${grep_pkg}, please do not cancel this process...${default}"
    rm -r ${grep_dir}/${grep_pkg} || true
  ;;
  *)
    save-error "save_final_grep"
esac

# GNU Bash shell
if [[ -z "$save_final_bash" ]]; then
  save_final_bash=0
fi
case $save_final_bash in
  1)
  ;;
  0)
    bash_dir=/sources/bash
    bash_pkg=$(ls $bash_dir | grep .tar.gz)
    bash_pkg=$(basename ${bash_dir}/$bash_pkg .tar.gz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${bash_dir}/${bash_pkg} distclean || true
      ;;
      *)
        make -C ${bash_dir}/${bash_pkg} -j$(nproc) distclean || true
    esac
    pushd ${bash_dir}/$bash_pkg
      patch -Np1 -i ${bash_dir}/${bash_pkg}/bash-5.2.21-upstream_fixes-1.patch
      ${bash_dir}/${bash_pkg}/configure --prefix=/usr             \
                                        --without-bash-malloc     \
                                        --with-installed-readline \
                                        --enable-net-redirections
                                        --docdir=/usr/share/doc/$bash_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${bash_dir}/${bash_pkg}
        chown -R TrustedInstaller ${bash_dir}/${bash_pkg}
        pushd ${bash_dir}/${bash_pkg}
          # Sorry about 'EOF' being placed like that, syntax highlighting messes up and possibly this is the way it works
          su -s /usr/bin/expect TrustedInstaller << "EOF"
          set timeout -1
          spawn make tests || true
          expect eof
          lassign [wait] _ _ _ value
          exit $value
EOF       || true
        popd
        make -C ${bash_dir}/${bash_pkg} install
      ;;
      *)
        make -C ${bash_dir}/${bash_pkg} -j$(nproc)
        chown -R TrustedInstaller ${bash_dir}/${bash_pkg}
        pushd ${bash_dir}/${bash_pkg}
          su -s /usr/bin/expect TrustedInstaller << "EOF"
          set timeout -1
          spawn make -j$(nproc) tests || true
          expect eof
          lassign [wait] _ _ _ value
          exit $value
EOF       || true
        popd
        make -C ${bash_dir}/${bash_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_bash/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_bash=1\n" >> $fullsavename
    echo -e "${success}GNU Bash shell successfully installed.${default}"
    echo -e "${info}Removing ${bash_dir}/${bash_pkg}, please do not cancel this process...${default}"
    rm -r ${bash_dir}/${bash_pkg} || true
  ;;
  *)
    save-error "save_final_bash"
esac

# GNU Libtool, a generic library support script
if [[ -z "$save_final_libtool" ]]; then
  save_final_libtool=0
fi
case $save_final_libtool in
  1)
  ;;
  0)
    libtool_dir=/sources/libtool
    libtool_pkg=$(ls $libtool_dir | grep .tar.xz)
    libtool_pkg=$(basename ${libtool_dir}/$libtool_pkg .tar.xz)
    pushd ${libtool_dir}/$libtool_pkg
      ${libtool_dir}/${libtool_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${libtool_dir}/${libtool_pkg}
        make -C ${libtool_dir}/${libtool_pkg} -k check || true
        make -C ${libtool_dir}/${libtool_pkg} install
      ;;
      *)
        make -C ${libtool_dir}/${libtool_pkg} -j$(nproc)
        make -C ${libtool_dir}/${libtool_pkg} -j$(nproc) -k check || true
        make -C ${libtool_dir}/${libtool_pkg} -j$(nproc) install
    esac
    rm -fv /usr/lib/libltdl.a
    # Save progress
    echo "`sed '/save_final_libtool/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_libtool=1\n" >> $fullsavename
    echo -e "${success}GNU Libtool, a generic library support script successfully installed.${default}"
    echo -e "${info}Removing ${libtool_dir}/${libtool_pkg}, please do not cancel this process...${default}"
    rm -r ${libtool_dir}/${libtool_pkg} || true
  ;;
  *)
    save-error "save_final_libtool"
esac

# GNU Database Manager
if [[ -z "$save_final_gdbm" ]]; then
  save_final_gdbm=0
fi
case $save_final_gdbm in
  1)
  ;;
  0)
    gdbm_dir=/sources/gdbm
    gdbm_pkg=$(ls $gdbm_dir | grep .tar.gz)
    gdbm_pkg=$(basename ${gdbm_dir}/$gdbm_pkg .tar.gz)
    pushd ${gdbm_dir}/$gdbm_pkg
      ${gdbm_dir}/${gdbm_pkg}/configure --prefix=/usr    \
                                        --disable-static \
                                        --enable-libgdbm-compat
    popd
    case $opt_one_job in
      1)
        make -C ${gdbm_dir}/${gdbm_pkg}
        make -C ${gdbm_dir}/${gdbm_pkg} check || true
        make -C ${gdbm_dir}/${gdbm_pkg} install
      ;;
      *)
        make -C ${gdbm_dir}/${gdbm_pkg} -j$(nproc)
        make -C ${gdbm_dir}/${gdbm_pkg} -j$(nproc) check || true
        make -C ${gdbm_dir}/${gdbm_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_gdbm/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_gdbm=1\n" >> $fullsavename
    echo -e "${success}GNU Database Manager successfully installed.${default}"
    echo -e "${info}Removing ${gdbm_dir}/${gdbm_pkg}, please do not cancel this process...${default}"
    rm -r ${gdbm_dir}/${gdbm_pkg} || true
  ;;
  *)
    save-error "save_final_gdbm"
esac

# GNU gperf, a perfect hash function generator
if [[ -z "$save_final_gperf" ]]; then
  save_final_gperf=0
fi
case $save_final_gperf in
  1)
  ;;
  0)
    gperf_dir=/sources/gperf
    gperf_pkg=$(ls $gperf_dir | grep .tar.gz)
    gperf_pkg=$(basename ${gperf_dir}/$gperf_pkg .tar.gz)
    pushd ${gperf_dir}/${gperf_pkg}
      ${gperf_dir}/${gperf_pkg}/configure --prefix=/usr \
                                          --docdir=/usr/share/doc/$gperf_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${gperf_dir}/${gperf_pkg}
        make -C ${gperf_dir}/${gperf_pkg} -j1 check || true
        make -C ${gperf_dir}/${gperf_pkg}     install
      ;;
      *)
        make -C ${gperf_dir}/${gperf_pkg} -j$(nproc)
        make -C ${gperf_dir}/${gperf_pkg} -j1        check || true
        make -C ${gperf_dir}/${gperf_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_gperf/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_gperf=1\n" >> $fullsavename
    echo -e "${success}GNU gperf, a perfect hash function generator successfully installed.${default}"
    echo -e "${info}Removing ${gperf_dir}/${gperf_pkg}, please do not cancel this process...${default}"
    rm -r ${gperf_dir}/${gperf_pkg} || true
  ;;
  *)
    save-error "save_final_gperf"
esac

# Expat, a stream-oriented XML parser library
if [[ -z "$save_final_expat" ]]; then
  save_final_expat=0
fi
case $save_final_expat in
  1)
  ;;
  0)
    expat_dir=/sources/expat
    expat_pkg=$(ls $expat_dir | grep .tar.xz)
    expat_pkg=$(basename ${expat_dir}/$expat_pkg .tar.xz)
    pushd ${expat_dir}/$expat_pkg
      ${expat_dir}/${expat_pkg}/configure --prefix=/usr    \
                                          --disable-static \
                                          --docdir=/usr/share/doc/$expat_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${expat_dir}/${expat_pkg}
        make -C ${expat_dir}/${expat_pkg} check || true
        make -C ${expat_dir}/${expat_pkg} install
      ;;
      *)
        make -C ${expat_dir}/${expat_pkg} -j$(nproc)
        make -C ${expat_dir}/${expat_pkg} -j$(nproc) check || true
        make -C ${expat_dir}/${expat_pkg} -j$(nproc) install
    esac
    install -v -m644 ${expat_dir}/${expat_pkg}/doc/*.{html,css} /usr/share/doc/$expat_pkg
    # Save progress
    echo "`sed '/save_final_expat/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_expat=1\n" >> $fullsavename
    echo -e "${success}Expat, a stream-oriented XML parser library successfully installed.${default}"
    echo -e "${info}Removing ${expat_dir}/${expat_pkg}, please do not cancel this process...${default}"
    rm -r ${expat_dir}/${expat_pkg} || true
  ;;
  *)
    save-error "save_final_expat"
esac

# GNU Inetutils, a collection of common network programs
if [[ -z "$save_final_inetutils" ]]; then
  save_final_inetutils=0
fi
case $save_final_inetutils in
  1)
  ;;
  0)
    inetutils_dir=/sources/inetutils
    inetutils_pkg=$(ls $inetutils_dir | grep .tar.xz)
    inetutils_pkg=$(basename ${inetutils_dir}/$inetutils_pkg .tar.xz)
    pushd ${inetutils_dir}/$inetutils_pkg
      ${inetutils_dir}/${inetutils_pkg}/configure --prefix=/usr        \
                                                  --bindir=/usr/bin    \
                                                  --localstatedir=/var \
                                                  --disable-logger     \
                                                  --disable-whois      \
                                                  --disable-rcp        \
                                                  --disable-rexec      \
                                                  --disable-rlogin     \
                                                  --disable-rsh        \
                                                  --disable-servers
    popd
    case $opt_one_job in
      1)
        make -C ${inetutils_dir}/${inetutils_pkg}
        make -C ${inetutils_dir}/${inetutils_pkg} check || true
        make -C ${inetutils_dir}/${inetutils_pkg} install
      ;;
      *)
        make -C ${inetutils_dir}/${inetutils_pkg} -j$(nproc)
        make -C ${inetutils_dir}/${inetutils_pkg} -j$(nproc) check || true
        make -C ${inetutils_dir}/${inetutils_pkg} -j$(nproc) install
    esac
    mv -v /usr/{,s}bin/ifconfig
    # Save progress
    echo "`sed '/save_final_inetutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_inetutils=1\n" >> $fullsavename
    echo -e "${success}GNU Inetutils, a collection of common network programs successfully installed.${default}"
    echo -e "${info}Removing ${inetutils_dir}/${inetutils_pkg}, please do not cancel this process...${default}"
    rm -r ${inetutils_dir}/${inetutils_pkg} || true
  ;;
  *)
    save-error "save_final_inetutils"
esac

# GNU Less, a file pager
if [[ -z "$save_final_less" ]]; then
  save_final_less=0
fi
case $save_final_less in
  1)
  ;;
  0)
    less_dir=/sources/less
    less_pkg=$(ls $less_dir | grep .tar.gz)
    less_pkg=$(basename ${less_dir}/$less_pkg .tar.gz)
    pushd ${less_dir}/$less_pkg
      ${less_dir}/${less_pkg}/configure --prefix=/usr \
                                        --sysconfdir=/etc
    popd
    case $opt_one_job in
      1)
        make -C ${less_dir}/${less_pkg}
        make -C ${less_dir}/${less_pkg} check || true
        make -C ${less_dir}/${less_pkg} install
      ;;
      *)
        make -C ${less_dir}/${less_pkg} -j$(nproc)
        make -C ${less_dir}/${less_pkg} -j$(nproc) check || true
        make -C ${less_dir}/${less_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_less/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_less=1\n" >> $fullsavename
    echo -e "${success}GNU Less, a file pager successfully installed.${default}"
    echo -e "${info}Removing ${less_dir}/${less_pkg}, please do not cancel this process...${default}"
    rm -r ${less_dir}/${less_pkg} || true
  ;;
  *)
    save-error "save_final_less"
esac

# Perl programming language
if [[ -z "$save_final_perl" ]]; then
  save_final_perl=0
fi
case $save_final_perl in
  1)
  ;;
  0)
    perl_dir=/sources/perl
    perl_pkg=$(ls $perl_dir | grep .tar.xz)
    perl_pkg=$(basename ${perl_dir}/$perl_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${perl_dir}/${perl_pkg} distclean || true
      ;;
      *)
        make -C ${perl_dir}/${perl_pkg} -j$(nproc) distclean || true
    esac
    export BUILD_ZLIB=False
    export BUILD_BZIP2=0
    pushd ${perl_dir}/$perl_pkg
      sh ${perl_dir}/${perl_pkg}/Configure -des                                                      \
                                           -Dprefix=/usr                                             \
                                           -Dvendorprefix=/usr                                       \
                                           -Dprivlib=/usr/lib/perl5/${perl_pkg#perl-}/core_perl      \
                                           -Darchlib=/usr/lib/perl5/${perl_pkg#perl-}/core_perl      \
                                           -Dsitelib=/usr/lib/perl5/${perl_pkg#perl-}/site_perl      \
                                           -Dsitearch=/usr/lib/perl5/${perl_pkg#perl-}/site_perl     \
                                           -Dvendorlib=/usr/lib/perl5/${perl_pkg#perl-}/vendor_perl  \
                                           -Dvendorarch=/usr/lib/perl5/${perl_pkg#perl-}/vendor_perl \
                                           -Dman1dir=/usr/share/man/man1                             \
                                           -Dman3dir=/usr/share/man/man3                             \
                                           -Dpager="/usr/bin/less -isR"                              \
                                           -Duseshrplib                                              \
                                           -Dusethreads
    popd
    case $opt_one_job in
      1)
        make -C ${perl_dir}/${perl_pkg}
        make -C ${perl_dir}/${perl_pkg} test_harness || true
        make -C ${perl_dir}/${perl_pkg} install
      ;;
      *)
        make -C ${perl_dir}/${perl_pkg} -j$(nproc)
        make -C ${perl_dir}/${perl_pkg} TEST_JOBS=$(nproc) test_harness || true
        make -C ${perl_dir}/${perl_pkg} -j$(nproc) install
    esac
    unset BUILD_ZLIB BUILD_BZIP2
    # Save progress
    echo "`sed '/save_final_perl/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_perl=1\n" >> $fullsavename
    echo -e "${success}Perl programming language successfully installed.${default}"
    echo -e "${info}Removing ${perl_dir}/${perl_pkg}, please do not cancel this process...${default}"
    rm -r ${perl_dir}/${perl_pkg} || true
  ;;
  *)
    save-error "save_final_perl"
esac

# XML::Parser, a Perl module for parsing XML documents
if [[ -z "$save_final_xml_parser" ]]; then
  save_final_xml_parser=0
fi
case $save_final_xml_parser in
  1)
  ;;
  0)
    xml_parser_dir=/sources/xml::parser
    xml_parser_pkg=$(ls $xml_parser_dir | grep .tar.gz)
    xml_parser_pkg=$(basename ${xml_parser_dir}/$xml_parser_pkg .tar.gz)
    pushd ${xml_parser_dir}/$xml_parser_pkg
      perl ${xml_parser_dir}/${xml_parser_pkg}/Makefile.PL
    popd
    case $opt_one_job in
      1)
        make -C ${xml_parser_dir}/${xml_parser_pkg}
        make -C ${xml_parser_dir}/${xml_parser_pkg} test || true
        make -C ${xml_parser_dir}/${xml_parser_pkg} install
      ;;
      *)
        make -C ${xml_parser_dir}/${xml_parser_pkg} -j$(nproc)
        make -C ${xml_parser_dir}/${xml_parser_pkg} -j$(nproc) test || true
        make -C ${xml_parser_dir}/${xml_parser_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_xml_parser/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_xml_parser=1\n" >> $fullsavename
    echo -e "${success}XML::Parser, a Perl module for parsing XML documents successfully installed.${default}"
    echo -e "${info}Removing ${xml_parser_dir}/${xml_parser_pkg}, please do not cancel this process...${default}"
    rm -r ${xml_parser_dir}/${xml_parser_pkg} || true
  ;;
  *)
    save-error "save_final_xml_parser"
esac

# Intltool, an internationalization tool for extracting translatable strings from source files
if [[ -z "$save_final_intltool" ]]; then
  save_final_intltool=0
fi
case $save_final_intltool in
  1)
  ;;
  0)
    intltool_dir=/sources/intltool
    intltool_pkg=$(ls $intltool_dir | grep .tar.gz)
    intltool_pkg=$(basename ${intltool_dir}/$intltool_pkg .tar.gz)
    # Chapter 8.44.1
    sed -i 's:\\\${:\\\$\\{:' ${intltool_dir}/${intltool_pkg}/intltool-update.in
    pushd ${intltool_dir}/${intltool_pkg}
      ${intltool_dir}/${intltool_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${intltool_dir}/${intltool_pkg}
        make -C ${intltool_dir}/${intltool_pkg} check || true
        make -C ${intltool_dir}/${intltool_pkg} install
      ;;
      *)
        make -C ${intltool_dir}/${intltool_pkg} -j$(nproc)
        make -C ${intltool_dir}/${intltool_pkg} -j$(nproc) check || true
        make -C ${intltool_dir}/${intltool_pkg} -j$(nproc) install
    esac
    install -v -Dm644 ${intltool_dir}/${intltool_pkg}/doc/I18N-HOWTO /usr/share/doc/${intltool_pkg}/I18N-HOWTO
    # Save progress
    echo "`sed '/save_final_intltool/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_intltool=1\n" >> $fullsavename
    echo -e "${success}Intltool, an internationalization tool for extracting translatable strings from source files successfully installed.${default}"
    echo -e "${info}Removing ${intltool_dir}/${intltool_pkg}, please do not cancel this process...${default}"
    rm -r ${intltool_dir}/${intltool_pkg} || true
  ;;
  *)
    save-error "save_final_intltool"
esac

# GNU Autoconf, programs for producing "configure" shell scripts
if [[ -z "$save_final_autoconf" ]]; then
  save_final_autoconf=0
fi
case $save_final_autoconf in
  1)
  ;;
  0)
    autoconf_dir=/sources/autoconf
    autoconf_pkg=$(ls $autoconf_dir | grep .tar.xz)
    autoconf_pkg=$(basename ${autoconf_dir}/$autoconf_pkg .tar.xz)
    pushd ${autoconf_dir}/${autoconf_pkg}
      ${autoconf_dir}/${autoconf_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${autoconf_dir}/${autoconf_pkg}
        make -C ${autoconf_dir}/${autoconf_pkg} check || true
        make -C ${autoconf_dir}/${autoconf_pkg} install
      ;;
      *)
        make -C ${autoconf_dir}/${autoconf_pkg} -j$(nproc)
        make -C ${autoconf_dir}/${autoconf_pkg} -j$(nproc) check || true
        make -C ${autoconf_dir}/${autoconf_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_autoconf/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_autoconf=1\n" >> $fullsavename
    echo -e "${success}GNU Autoconf, programs for producing "configure" shell scripts successfully installed.${default}"
    echo -e "${info}Removing ${autoconf_dir}/${autoconf_pkg}, please do not cancel this process...${default}"
    rm -r ${autoconf_dir}/${autoconf_pkg} || true
  ;;
  *)
    save-error "save_final_autoconf"
esac

# GNU Automake, a tool for automatically generating "Makefile.in" files
if [[ -z "$save_final_automake" ]]; then
  save_final_automake=0
fi
case $save_final_automake in
  1)
  ;;
  0)
    automake_dir=/sources/automake
    automake_pkg=$(ls $automake_dir | grep .tar.xz)
    automake_pkg=$(basename ${automake_dir}/$automake_pkg .tar.xz)
    pushd ${automake_dir}/$automake_pkg
      ${automake_dir}/${automake_pkg}/configure --prefix=/usr \
                                                --docdir=/usr/share/doc/$automake_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${automake_dir}/${automake_pkg}
        make -C ${automake_dir}/${automake_pkg} check || true
        make -C ${automake_dir}/${automake_pkg} install
      ;;
      *)
        make -C ${automake_dir}/${automake_pkg} -j$(nproc)
        make -C ${automake_dir}/${automake_pkg} -j$(nproc) check || true
        make -C ${automake_dir}/${automake_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_automake/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_automake=1\n" >> $fullsavename
    echo -e "${success}GNU Automake, a tool for automatically generating "Makefile.in" files successfully installed.${default}"
    echo -e "${info}Removing ${automake_dir}/${automake_pkg}, please do not cancel this process...${default}"
    rm -r ${automake_dir}/${automake_pkg} || true
  ;;
  *)
    save-error "save_final_automake"
esac

# OpenSSL, a toolkit for general-purpose cryptography and secure communication
if [[ -z "$save_final_openssl" ]]; then
  save_final_openssl=0
fi
case $save_final_openssl in
  1)
  ;;
  0)
    openssl_dir=/sources/openssl
    openssl_pkg=$(ls $openssl_dir | grep .tar.gz)
    openssl_pkg=$(basename ${openssl_dir}/$openssl_pkg .tar.gz)
    pushd ${openssl_dir}/${openssl_pkg}
      ${openssl_dir}/${openssl_pkg}/config --prefix=/usr         \
                                           --openssldir=/etc/ssl \
                                           --libdir=lib          \
                                           shared                \
                                           zlib-dynamic
    popd
    case $opt_one_job in
      1)
        make -C ${openssl_dir}/${openssl_pkg}
        make -C ${openssl_dir}/${openssl_pkg} test || true
        sed -i '/INSTALL_LIBS/s/libcrypto.a libssl.a//' ${openssl_dir}/${openssl_pkg}/Makefile
        make -C ${openssl_dir}/${openssl_pkg} MANSUFFIX=ssl install
      ;;
      *)
        make -C ${openssl_dir}/${openssl_pkg} -j$(nproc)
        make -C ${openssl_dir}/${openssl_pkg} HARNESS_JOBS=$(nproc) test || true
        sed -i '/INSTALL_LIBS/s/libcrypto.a libssl.a//' ${openssl_dir}/${openssl_pkg}/Makefile
        make -C ${openssl_dir}/${openssl_pkg} -j$(nproc) MANSUFFIX=ssl install
    esac
    mv -v /usr/share/doc/openssl /usr/share/doc/$openssl_pkg
    cp -vfr ${openssl_dir}/${openssl_pkg}/doc/* /usr/share/doc/$openssl_pkg
    # Save progress
    echo "`sed '/save_final_openssl/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_openssl=1\n" >> $fullsavename
    echo -e "${success}OpenSSL, a toolkit for general-purpose cryptography and secure communication successfully installed.${default}"
    echo -e "${info}Removing ${openssl_dir}/${openssl_pkg}, please do not cancel this process...${default}"
    rm -r ${openssl_dir}/${openssl_pkg} || true
  ;;
  *)
    save-error "save_final_openssl"
esac

# kmod, a Linux kernel module handler
if [[ -z "$save_final_kmod" ]]; then
  save_final_kmod=0
fi
case $save_final_kmod in
  1)
  ;;
  0)
    kmod_dir=/sources/kmod
    kmod_pkg=$(ls $kmod_dir | grep .tar.xz)
    kmod_pkg=$(basename ${kmod_dir}/$kmod_pkg .tar.xz)
    pushd ${kmod_dir}/$kmod_pkg
      ${kmod_dir}/${kmod_pkg}/configure --prefix=/usr          \
                                        --sysconfdir=/etc      \
                                        --with-openssl         \
                                        --with-xz              \
                                        --with-zstd            \
                                        --with-zlib
    popd
    case $opt_one_job in
      1)
        make -C ${kmod_dir}/${kmod_pkg}
        make -C ${kmod_dir}/${kmod_pkg} install
      ;;
      *)
        make -C ${kmod_dir}/${kmod_pkg} -j$(nproc)
        make -C ${kmod_dir}/${kmod_pkg} -j$(nproc) install
    esac
    for target in depmod insmod modinfo modprobe rmmod; do
      ln -sfv ../bin/kmod /usr/sbin/$target
    done
    ln -sfv ./kmod /usr/bin/lsmod
    # Save progress
    echo "`sed '/save_final_kmod/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_kmod=1\n" >> $fullsavename
    echo -e "${success}kmod, a Linux kernel module handler successfully installed.${default}"
    echo -e "${info}Removing ${kmod_dir}/${kmod_pkg}, please do not cancel this process...${default}"
    rm -r ${kmod_dir}/${kmod_pkg} || true
  ;;
  *)
    save-error "save_final_kmod"
esac

# ELF object file access library (Libelf)
if [[ -z "$save_final_libelf" ]]; then
  save_final_libelf=0
fi
case $save_final_libelf in
  1)
  ;;
  0)
    # Libelf is part of Elfutils package
    elfutils_dir=/sources/elfutils
    elfutils_pkg=$(ls $elfutils_dir | grep .tar.bz2)
    elfutils_pkg=$(basename ${elfutils_dir}/$elfutils_pkg .tar.bz2)
    pushd ${elfutils_dir}/$elfutils_pkg
      ${elfutils_dir}/${elfutils_pkg}/configure --prefix=/usr                \
                                                --disable-debuginfod         \
                                                --enable-libdebuginfod=dummy
    popd
    case $opt_one_job in
      1)
        make -C ${elfutils_dir}/${elfutils_pkg}
        make -C ${elfutils_dir}/${elfutils_pkg} check || true
        make -C ${elfutils_dir}/${elfutils_pkg}/libelf install
      ;;
      *)
        make -C ${elfutils_dir}/${elfutils_pkg} -j$(nproc)
        make -C ${elfutils_dir}/${elfutils_pkg} -j$(nproc) check || true
        make -C ${elfutils_dir}/${elfutils_pkg}/libelf -j$(nproc) install
    esac
    install -vm644 ${elfutils_dir}/${elfutils_pkg}/config/libelf.pc /usr/lib/pkgconfig
    rm -v /usr/lib/libelf.a
    # Save progress
    echo "`sed '/save_final_libelf/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_libelf=1\n" >> $fullsavename
    echo -e "${success}ELF object file access library (Libelf) successfully installed.${default}"
    echo -e "${info}Removing ${elfutils_dir}/${elfutils_pkg}, please do not cancel this process...${default}"
    rm -r ${elfutils_dir}/${elfutils_pkg} || true
  ;;
  *)
    save-error "save_final_libelf"
esac

# Foreign Function Interface Library (Libffi)
if [[ -z "$save_final_libffi" ]]; then
  save_final_libffi=0
fi
case $save_final_libffi in
  1)
  ;;
  0)
    libffi_dir=/sources/libffi
    libffi_pkg=$(ls $libffi_dir | grep .tar.gz)
    libffi_pkg=$(basename ${libffi_dir}/$libffi_pkg .tar.gz)
    pushd ${libffi_dir}/$libffi_pkg
      ${libffi_dir}/${libffi_pkg}/configure --prefix=/usr          \
                                            --disable-static       \
                                            --with-gcc-arch=native
    popd
    case $opt_one_job in
      1)
        make -C ${libffi_dir}/${libffi_pkg}
        make -C ${libffi_dir}/${libffi_pkg} check || true
        make -C ${libffi_dir}/${libffi_pkg} install
      ;;
      *)
        make -C ${libffi_dir}/${libffi_pkg} -j$(nproc)
        make -C ${libffi_dir}/${libffi_pkg} -j$(nproc) check || true
        make -C ${libffi_dir}/${libffi_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_libffi/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_libffi=1\n" >> $fullsavename
    echo -e "${success}Foreign Function Interface Library (Libffi) successfully installed.${default}"
    echo -e "${info}Removing ${libffi_dir}/${libffi_pkg}, please do not cancel this process...${default}"
    rm -r ${libffi_dir}/${libffi_pkg} || true
  ;;
  *)
    save-error "save_final_libffi"
esac

# Python programming language
if [[ -z "$save_final_python" ]]; then
  save_final_python=0
fi
case $save_final_python in
  1)
  ;;
  0)
    python_dir=/sources/python
    python_pkg=$(ls $python_dir | grep .tar.xz)
    python_pkg=$(basename ${python_dir}/$python_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${python_dir}/$python_pkg distclean || true
      ;;
      *)
        make -C ${python_dir}/$python_pkg -j$(nproc) distclean || true
    esac
    pushd ${python_dir}/$python_pkg
      ${python_dir}/${python_pkg}/configure --prefix=/usr        \
                                            --enable-shared      \
                                            --with-system-expat  \
                                            --enable-optimizations
    popd
    case $opt_one_job in
      1)
        make -C ${python_dir}/${python_pkg}
        make -C ${python_dir}/${python_pkg} install
      ;;
      *)
        make -C ${python_dir}/${python_pkg} -j$(nproc)
        make -C ${python_dir}/${python_pkg} -j$(nproc) install
    esac
    echo -e "${info}Creating /etc/pip.conf...${default}"
    echo '[global]'                         >  /etc/pip.conf
    echo 'root-user-action = ignore'        >> /etc/pip.conf
    echo 'disable-pip-version-check = true' >> /etc/pip.conf
    # Save progress
    echo "`sed '/save_final_python/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_python=1\n" >> $fullsavename
    echo -e "${success}Python programming language successfully installed.${default}"
    echo -e "${info}Removing ${python_dir}/${python_pkg}, please do not cancel this process...${default}"
    rm -r ${python_dir}/${python_pkg} || true
  ;;
  *)
    save-error "save_final_python"
esac

# Flit-core, the distribution-building parts of Flit
if [[ -z "$save_final_flit_core" ]]; then
  save_final_flit_core=0
fi
case $save_final_flit_core in
  1)
  ;;
  0)
    flit_core_dir=/sources/flit-core
    flit_core_pkg=$(ls $flit_core_dir | grep .tar.gz)
    flit_core_pkg=$(basename ${flit_core_dir}/$flit_core_pkg .tar.gz)
    pushd ${flit_core_dir}/$flit_core_pkg
      pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps ${flit_core_dir}/$flit_core_pkg
      pip3 install --no-index --no-user --find-links ${flit_core_dir}/${flit_core_pkg}/dist flit_core
    popd
    # Save progress
    echo "`sed '/save_final_flit_core/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_flit_core=1\n" >> $fullsavename
    echo -e "${success}Flit-core, the distribution-building parts of Flit successfully installed.${default}"
    echo -e "${info}Removing ${flit_core_dir}/${flit_core_pkg}, please do not cancel this process...${default}"
    rm -r ${flit_core_dir}/${flit_core_pkg} || true
  ;;
  *)
    save-error "save_final_flit_core"
esac

# Wheel, a built-package format for Python
if [[ -z "$save_final_wheel" ]]; then
  save_final_wheel=0
fi
case $save_final_wheel in
  1)
  ;;
  0)
    wheel_dir=/sources/wheel
    wheel_pkg=$(ls $wheel_dir | grep .tar.gz)
    wheel_pkg=$(basename ${wheel_dir}/$wheel_pkg .tar.gz)
    pushd ${wheel_dir}/$wheel_pkg
      pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps ${wheel_dir}/$wheel_pkg
      pip3 install --no-index --find-links=${wheel_dir}/${wheel_pkg}/dist wheel
    popd
    # Save progress
    echo "`sed '/save_final_wheel/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_wheel=1\n" >> $fullsavename
    echo -e "${success}Wheel, a built-package format for Python successfully installed.${default}"
    echo -e "${info}Removing ${wheel_dir}/${wheel_pkg}, please do not cancel this process...${default}"
    rm -r ${wheel_dir}/${wheel_pkg} || true
  ;;
  *)
    save-error "save_final_wheel"
esac

# Setuptools, a tool for Python package management
if [[ -z "$save_final_setuptools" ]]; then
  save_final_setuptools=0
fi
case $save_final_setuptools in
  1)
  ;;
  0)
    setuptools_dir=/sources/setuptools
    setuptools_pkg=$(ls $setuptools_dir | grep .tar.gz)
    setuptools_pkg=$(basename ${setuptools_dir}/$setuptools_pkg .tar.gz)
    pushd ${setuptools_dir}/$setuptools_pkg
      pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps ${setuptools_dir}/$setuptools_pkg
      pip3 install --no-index --find-links ${setuptools_dir}/${setuptools_pkg}/dist setuptools
    popd
    # Save progress
    echo "`sed '/save_final_setuptools/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_setuptools=1\n" >> $fullsavename
    echo -e "${success}Setuptools, a tool for Python package management successfully installed.${default}"
    echo -e "${info}Removing ${setuptools_dir}/${setuptools_pkg}, please do not cancel this process...${default}"
    rm -r ${setuptools_dir}/${setuptools_pkg} || true
  ;;
  *)
    save-error "save_final_setuptools"
esac

# Meson, a build system designed to be extremely fast and as user friendly as possible
if [[ -z "$save_final_meson" ]]; then
  save_final_meson=0
fi
case $save_final_meson in
  1)
  ;;
  0)
    meson_dir=/sources/meson
    meson_pkg=$(ls $meson_dir | grep .tar.gz)
    meson_pkg=$(basename ${meson_dir}/$meson_pkg .tar.gz)
    pushd ${meson_dir}/$meson_pkg
      pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps ${meson_dir}/$meson_pkg
      pip3 install --no-index --find-links ${meson_dir}/${meson_pkg}/dist meson
    popd
    install -vDm644 ${meson_dir}/${meson_pkg}/data/shell-completions/bash/meson \
                    /usr/share/bash-completion/completions/meson
    install -vDm644 ${meson_dir}/${meson_pkg}/data/shell-completions/zsh/_meson \
                    /usr/share/zsh/site-functions/_meson
    # Save progress
    echo "`sed '/save_final_meson/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_meson=1\n" >> $fullsavename
    echo -e "${success}Meson, a build system designed to be extremely fast and as user friendly as possible successfully installed.${default}"
    echo -e "${info}Removing ${meson_dir}/${meson_pkg}, please do not cancel this process...${default}"
    rm -r ${meson_dir}/${meson_pkg} || true
  ;;
  *)
    save-error "save_final_meson"
esac

# GNU Coreutils
if [[ -z "$save_final_coreutils" ]]; then
  save_final_coreutils=0
fi
case $save_final_coreutils in
  1)
  ;;
  0)
    coreutils_dir=/sources/coreutils
    coreutils_pkg=$(ls $coreutils_dir | grep .tar.xz)
    coreutils_pkg=$(basename ${coreutils_dir}/$coreutils_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${coreutils_dir}/$coreutils_pkg distclean || true
      ;;
      *)
        make -C ${coreutils_dir}/$coreutils_pkg -j$(nproc) distclean || true
    esac
    pushd ${coreutils_dir}/$coreutils_pkg
      patch -Np1 -i ${coreutils_dir}/${coreutils_pkg}/coreutils-9.4-i18n-1.patch
      sed -e '/n_out += n_hold/,+4 s|.*bufsize.*|//&|' \
          -i ${coreutils_dir}/${coreutils_pkg}/src/split.c
      autoreconf -fiv
      FORCE_UNSAFE_CONFIGURE=1 ${coreutils_dir}/${coreutils_pkg}/configure \
                               --prefix=/usr                               \
                               --enable-no-install-program=kill,uptime
    popd
    case $opt_one_job in
      1)
        make -C ${coreutils_dir}/${coreutils_pkg}
        make -C ${coreutils_dir}/${coreutils_pkg} NON_ROOT_USERNAME=TrustedInstaller check-root || true
        groupadd -g 102 dummy -U TrustedInstaller
        chown -R TrustedInstaller ${coreutils_dir}/${coreutils_pkg}
        pushd ${coreutils_dir}/$coreutils_pkg
          su TrustedInstaller -c "PATH=$PATH make RUN_EXPENSIVE_TESTS=yes check || true" || true
        popd
        groupdel dummy
        make -C ${coreutils_dir}/${coreutils_pkg} install
      ;;
      *)
        make -C ${coreutils_dir}/${coreutils_pkg} -j$(nproc)
        make -C ${coreutils_dir}/${coreutils_pkg} -j$(nproc) NON_ROOT_USERNAME=TrustedInstaller check-root || true
        groupadd -g 102 dummy -U TrustedInstaller
        chown -R TrustedInstaller ${coreutils_dir}/${coreutils_pkg}
        pushd ${coreutils_dir}/$coreutils_pkg
          su TrustedInstaller -c "PATH=$PATH make -j$(nproc) RUN_EXPENSIVE_TESTS=yes check || true" || true
        popd
        groupdel dummy
        make -C ${coreutils_dir}/${coreutils_pkg} -j$(nproc) install
    esac
    mv  -v /usr/bin/chroot              /usr/sbin
    mv  -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8
    sed -i 's/"1"/"8"/'                 /usr/share/man/man8/chroot.8
    # Save progress
    echo "`sed '/save_final_coreutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_coreutils=1\n" >> $fullsavename
    echo -e "${success}GNU Coreutils successfully installed.${default}"
    echo -e "${info}Removing ${coreutils_dir}/${coreutils_pkg}, please do not cancel this process...${default}"
    rm -r ${coreutils_dir}/${coreutils_pkg} || true
  ;;
  *)
    save-error "save_final_coreutils"
esac

# Check, a unit testing framework for C programming language
if [[ -z "$save_final_check" ]]; then
  save_final_check=0
fi
case $save_final_check in
  1)
  ;;
  0)
    check_dir=/sources/check
    check_pkg=$(ls $check_dir | grep .tar.gz)
    check_pkg=$(basename ${check_dir}/$check_pkg .tar.gz)
    pushd ${check_dir}/$check_pkg
      ${check_dir}/${check_pkg}/configure --prefix=/usr \
                                          --disable-static
    popd
    case $opt_one_job in
      1)
        make -C ${check_dir}/${check_pkg}
        make -C ${check_dir}/${check_pkg} check || true
        make -C ${check_dir}/${check_pkg} docdir=/usr/share/doc/$check_pkg install
      ;;
      *)
        make -C ${check_dir}/${check_pkg} -j$(nproc)
        make -C ${check_dir}/${check_pkg} -j$(nproc) check || true
        make -C ${check_dir}/${check_pkg} -j$(nproc) docdir=/usr/share/doc/$check_pkg install
    esac
    # Save progress
    echo "`sed '/save_final_check/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_check=1\n" >> $fullsavename
    echo -e "${success}Check, a unit testing framework for C programming language successfully installed.${default}"
    echo -e "${info}Removing ${check_dir}/${check_pkg}, please do not cancel this process...${default}"
    rm -r ${check_dir}/${check_pkg} || true
  ;;
  *)
    save-error "save_final_check"
esac

# GNU Diffutils
if [[ -z "$save_final_diffutils" ]]; then
  save_final_diffutils=0
fi
case $save_final_diffutils in
  1)
  ;;
  0)
    diffutils_dir=/sources/diffutils
    diffutils_pkg=$(ls $diffutils_dir | grep .tar.xz)
    diffutils_pkg=$(basename ${diffutils_dir}/$diffutils_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${diffutils_dir}/$diffutils_pkg distclean || true
      ;;
      *)
        make -C ${diffutils_dir}/$diffutils_pkg -j$(nproc) distclean || true
    esac
    pushd ${diffutils_dir}/$diffutils_pkg
      ${diffutils_dir}/${diffutils_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${diffutils_dir}/${diffutils_pkg}
        make -C ${diffutils_dir}/${diffutils_pkg} check || true
        make -C ${diffutils_dir}/${diffutils_pkg} install
      ;;
      *)
        make -C ${diffutils_dir}/${diffutils_pkg} -j$(nproc)
        make -C ${diffutils_dir}/${diffutils_pkg} -j$(nproc) check || true
        make -C ${diffutils_dir}/${diffutils_pkg} -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_diffutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_diffutils=1\n" >> $fullsavename
    echo -e "${success}GNU Diffutils successfully installed.${default}"
    echo -e "${info}Removing ${diffutils_dir}/${diffutils_pkg}, please do not cancel this process...${default}"
    rm -r ${diffutils_dir}/${diffutils_pkg} || true
  ;;
  *)
    save-error "save_final_diffutils"
esac

# GNU awk
if [[ -z "$save_final_gawk" ]]; then
  save_final_gawk=0
fi
case $save_final_gawk in
  1)
  ;;
  0)
    gawk_dir=/sources/gawk
    gawk_pkg=$(ls $gawk_dir | grep .tar.xz)
    gawk_pkg=$(basename ${gawk_dir}/$gawk_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${gawk_dir}/$gawk_pkg distclean || true
      ;;
      *)
        make -C ${gawk_dir}/$gawk_pkg -j$(nproc) distclean || true
    esac
    sed -i 's/extras//' ${gawk_dir}/${gawk_pkg}/Makefile.in
    pushd ${gawk_dir}/$gawk_pkg
      ${gawk_dir}/${gawk_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${gawk_dir}/$gawk_pkg
        chown -R TrustedInstaller ${gawk_dir}/$gawk_pkg
        pushd ${gawk_dir}/$gawk_pkg
          su TrustedInstaller -c "PATH=$PATH make check || true" || true
        popd
        echo -e "${info}Removing old gawk (/usr/bin/gawk-*)...${default}"
        rm -f /usr/bin/gawk-*
        make -C ${gawk_dir}/$gawk_pkg install
      ;;
      *)
        make -C ${gawk_dir}/$gawk_pkg -j$(nproc)
        chown -R TrustedInstaller ${gawk_dir}/$gawk_pkg
        pushd ${gawk_dir}/$gawk_pkg
          su TrustedInstaller -c "PATH=$PATH make -j$(nproc) check || true" || true
        popd
        echo -e "${info}Removing old hard link to gawk (/usr/bin/gawk-*)...${default}"
        rm -f /usr/bin/gawk-*
        make -C ${gawk_dir}/$gawk_pkg -j$(nproc) install
    esac
    ln -sv ./gawk.1 /usr/share/man/man1/awk.1
    mkdir -pv                                                           /usr/share/doc/$gawk_pkg
    cp    -v ${gawk_dir}/${gawk_pkg}/doc/{awkforai.txt,*.{eps,pdf,jpg}} /usr/share/doc/$gawk_pkg
    # Save progress
    echo "`sed '/save_final_gawk/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_gawk=1\n" >> $fullsavename
    echo -e "${success}GNU awk successfully installed.${default}"
    echo -e "${info}Removing ${gawk_dir}/${gawk_pkg}, please do not cancel this process...${default}"
    rm -r ${gawk_dir}/${gawk_pkg} || true
  ;;
  *)
    save-error "save_final_gawk"
esac

# GNU Findutils
if [[ -z "$save_final_findutils" ]]; then
  save_final_findutils=0
fi
case $save_final_findutils in
  1)
  ;;
  0)
    findutils_dir=/sources/findutils
    findutils_pkg=$(ls $findutils_dir | grep .tar.xz)
    findutils_pkg=$(basename ${findutils_dir}/$findutils_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${findutils_dir}/$findutils_pkg distclean || true
      ;;
      *)
        make -C ${findutils_dir}/$findutils_pkg -j$(nproc) distclean || true
    esac
    pushd ${findutils_dir}/$findutils_pkg
      ${fingutils_dir}/$findutils_pkg/configure --prefix=/usr \
                                                --localstatedir=/var/lib/locate
    popd
    case $opt_one_job in
      1)
        make -C ${findutils_dir}/$findutils_pkg
        chown -Rv TrustedInstaller ${findutils_dir}/$findutils_pkg
        pushd ${findutils_dir}/$findutils_pkg
          su TrustedInstaller -c "PATH=$PATH make check || true" || true
        popd
        make -C ${findutils_dir}/$findutils_pkg install
      ;;
      *)
        make -C ${findutils_dir}/$findutils_pkg -j$(nproc)
        chown -Rv TrustedInstaller ${findutils_dir}/$findutils_pkg
        pushd ${findutils_dir}/$findutils_pkg
          su TrustedInstaller -c "PATH=$PATH -j$(nproc) make check || true" || true
        popd
        make -C ${findutils_dir}/$findutils_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_findutils/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_findutils=1\n" >> $fullsavename
    echo -e "${success}GNU Findutils successfully installed.${default}"
    echo -e "${info}Removing ${findutils_dir}/${findutils_pkg}, please do not cancel this process...${default}"
    rm -r ${findutils_dir}/${findutils_pkg} || true
  ;;
  *)
    save-error "save_final_findutils"
esac

# GNU roff, programs for processing and formatting text and images
if [[ -z "$save_final_groff" ]]; then
  save_final_groff=0
fi
case $save_final_groff in
  1)
  ;;
  0)
    groff_dir=/sources/groff
    groff_pkg=$(ls $groff_dir | grep .tar.gz)
    groff_pkg=$(basename ${groff_dir}/$groff_pkg .tar.gz)
    groff_papersize_func() {
      read -p "What paper size do you prefer? (letter/a4):" groff_papersize
      if [[ -z "$groff_papersize" ]]; then
        groff_papersize_func
      fi
      case $groff_papersize in
        [Ll][Ee][Tt][Tt][Ee][Rr])
          export PAGE=letter
        ;;
        [Aa]4)
          export PAGE=a4
      esac
    }
    groff_papersize_func
    pushd ${groff_dir}/$groff_pkg
      PAGE=$PAGE ${groff_dir}/$groff_pkg/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${groff_dir}/$groff_pkg
        make -C ${groff_dir}/$groff_pkg check || true
        make -C ${groff_dir}/$groff_pkg install
      ;;
      *)
        make -C ${groff_dir}/$groff_pkg -j$(nproc)
        make -C ${groff_dir}/$groff_pkg -j$(nproc) check || true
        make -C ${groff_dir}/$groff_pkg -j$(nproc) install
    esac
    unset PAGE
    # Save progress
    echo "`sed '/save_final_groff/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_groff=1\n" >> $fullsavename
    echo -e "${success}GNU roff, programs for processing and formatting text and images successfully installed.${default}"
    echo -e "${info}Removing ${groff_dir}/${groff_pkg}, please do not cancel this process...${default}"
    rm -r ${groff_dir}/${groff_pkg} || true
  ;;
  *)
    save-error "save_final_groff"
esac

# GNU GRand Unified Bootloader
if [[ -z "$save_final_grub" ]]; then
  save_final_grub=0
fi
case $save_final_grub in
  1)
  ;;
  0)
    grub_dir=/sources/grub
    grub_pkg=$(ls $grub_dir | grep .tar.xz)
    grub_pkg=$(basename ${grub_dir}/$grub_pkg .tar.xz)
    echo -e "${warning}Warning: this GNU GRand Unified Bootloader build will not have EFI support.${default}"
    unset {C,CPP,CXX,LD}FLAGS
    echo depends bli part_gpt > ${grub_dir}/${grub_pkg}/grub-core/extra_deps.lst
    pushd ${grub_dir}/$grub_pkg
      ${grub_dir}/$grub_pkg/configure --prefix=/usr     \
                                      --sysconfdir=/etc \
                                      --disable-efiemu  \
                                      --disable-werror
    popd
    case $opt_one_job in
      1)
        make -C ${grub_dir}/$grub_pkg
        make -C ${grub_dir}/$grub_pkg install
      ;;
      *)
        make -C ${grub_dir}/$grub_pkg -j$(nproc)
        make -C ${grub_dir}/$grub_pkg -j$(nproc) install
    esac
    mv -v /etc/bash_completion.d/grub /usr/share/bash-completion/completions
    # Save progress
    echo "`sed '/save_final_grub/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_grub=1\n" >> $fullsavename
    echo -e "${success}GNU GRand Unified Bootloader successfully installed for BIOS support.${default}"
    echo -e "${info}Removing ${grub_dir}/${grub_pkg}, please do not cancel this process...${default}"
    rm -r ${grub_dir}/${grub_pkg} || true
  ;;
  *)
    save-error "save_final_grub"
esac

# GNU Gzip
if [[ -z "$save_final_gzip" ]]; then
  save_final_gzip=0
fi
case $save_final_gzip in
  1)
  ;;
  0)
    gzip_dir=/sources/gzip
    gzip_pkg=$(ls $gzip_dir | grep .tar.xz)
    gzip_pkg=$(basename ${gzip_dir}/$gzip_pkg .tar.xz)
    pushd ${gzip_dir}/$gzip_pkg
      ${gzip_dir}/$gzip_pkg/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${gzip_dir}/$gzip_pkg
        make -C ${gzip_dir}/$gzip_pkg check || true
        make -C ${gzip_dir}/$gzip_pkg install
      ;;
      *)
        make -C ${gzip_dir}/$gzip_pkg -j$(nproc)
        make -C ${gzip_dir}/$gzip_pkg -j$(nproc) check || true
        make -C ${gzip_dir}/$gzip_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_gzip/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_gzip=1\n" >> $fullsavename
    echo -e "${success}GNU Gzip successfully installed.${default}"
    echo -e "${info}Removing ${gzip_dir}/${gzip_pkg}, please do not cancel this process...${default}"
    rm -r ${gzip_dir}/${gzip_pkg} || true
  ;;
  *)
    save-error "save_final_gzip"
esac

# IPRoute2, Linux programs for IPV4-based networking
if [[ -z "$save_final_iproute2" ]]; then
  save_final_iproute2=0
fi
case $save_final_iproute2 in
  1)
  ;;
  0)
    iproute2_dir=/sources/iproute2
    iproute2_pkg=$(ls $iproute2_dir | grep .tar.xz)
    iproute2_pkg=$(basename ${iproute2_dir}/$iproute2_pkg .tar.xz)
    sed -i /ARPD/d ${iproute2_dir}/${iproute2_pkg}/Makefile
    rm -fv ${iproute2_dir}/${iproute2_pkg}/man/man8/arpd.8
    sed -i 's/.m_ipt.o//' ${iproute2_dir}/${iproute2_pkg}/tc/Makefile
    case $opt_one_job in
      1)
        make -C ${iproute2_dir}/${iproute2_pkg} NETNS_RUN_DIR=/run/netns
        make -C ${iproute2_dir}/${iproute2_pkg} SBINDIR=/usr/sbin install
      ;;
      *)
        make -C ${iproute2_dir}/${iproute2_pkg} -j$(nproc) NETNS_RUN_DIR=/run/netns
        make -C ${iproute2_dir}/${iproute2_pkg} -j$(nproc) SBINDIR=/usr/sbin install
    esac
    mkdir -v                                                   /usr/share/doc/$iproute2_pkg
    cp    -v ${iproute2_dir}/${iproute2_pkg}/{COPYING,README*} /usr/share/doc/$iproute2_pkg
    # Save progress
    echo "`sed '/save_final_iproute2/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_iproute2=1\n" >> $fullsavename
    echo -e "${success}IPRoute2, Linux programs for IPV4-based networking successfully installed.${default}"
    echo -e "${info}Removing ${iproute2_dir}/${iproute2_pkg}, please do not cancel this process...${default}"
    rm -r ${iproute2_dir}/${iproute2_pkg} || true
  ;;
  *)
    save-error "save_final_iproute2"
esac

# Kbd, Linux keyboard utilities
if [[ -z "$save_final_kbd" ]]; then
  save_final_kbd=0
fi
case $save_final_kbd in
  1)
  ;;
  0)
    kbd_dir=/sources/kbd
    kbd_pkg=$(ls $kbd_dir | grep .tar.xz)
    kbd_pkg=$(basename ${kbd_dir}/$kbd_pkg .tar.xz)
    # Chapter 8.66.1
    pushd ${kbd_dir}/$kbd_pkg
      patch -Np1 -i ${kbd_dir}/${kbd_pkg}/kbd-2.6.4-backspace-1.patch
    popd
    sed -i '/RESIZECONS_PROGS=/s/yes/no/' ${kbd_dir}/${kbd_pkg}/configure
    sed -i 's/resizecons.8 //'            ${kbd_dir}/${kbd_pkg}/docs/man/man8/Makefile.in
    pushd ${kbd_dir}/$kbd_pkg
      ${kbd_dir}/${kbd_pkg}/configure --prefix=/usr \
                                      --disable-vlock
    popd
    case $opt_one_job in
      1)
        make -C ${kbd_dir}/$kbd_pkg
        make -C ${kbd_dir}/$kbd_pkg check || true
        make -C ${kbd_dir}/$kbd_pkg install
      ;;
      *)
        make -C ${kbd_dir}/$kbd_pkg -j$(nproc)
        make -C ${kbd_dir}/$kbd_pkg -j$(nproc) check || true
        make -C ${kbd_dir}/$kbd_pkg -j$(nproc) install
    esac
    cp -R -v ${kbd_dir}/${kbd_pkg}/docs/doc -T /usr/share/doc/$kbd_pkg
    # Save progress
    echo "`sed '/save_final_kbd/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_kbd=1\n" >> $fullsavename
    echo -e "${success}Kbd, Linux keyboard utilities successfully installed.${default}"
    echo -e "${info}Removing ${kbd_dir}/${kbd_pkg}, please do not cancel this process...${default}"
    rm -r ${kbd_dir}/${kbd_pkg} || true
  ;;
  *)
    save-error "save_final_kbd"
esac

# Pipeline manipulation library
if [[ -z "$save_final_libpipeline" ]]; then
  save_final_libpipeline=0
fi
case $save_final_libpipeline in
  1)
  ;;
  0)
    libpipeline_dir=/sources/libpipeline
    libpipeline_pkg=$(ls $libpipeline_dir | grep .tar.gz)
    libpipeline_pkg=$(basename ${libpipeline_dir}/$libpipeline_pkg .tar.gz)
    pushd ${libpipeline_dir}/$libpipeline_pkg
      ${libpipeline_dir}/${libpipeline_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${libpipeline_dir}/$libpipeline_pkg
        make -C ${libpipeline_dir}/$libpipeline_pkg check || true
        make -C ${libpipeline_dir}/$libpipeline_pkg install
      ;;
      *)
        make -C ${libpipeline_dir}/$libpipeline_pkg -j$(nproc)
        make -C ${libpipeline_dir}/$libpipeline_pkg -j$(nproc) check || true
        make -C ${libpipeline_dir}/$libpipeline_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_libpipeline/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_libpipeline=1\n" >> $fullsavename
    echo -e "${success}Pipeline manipulation library (libpipeline) successfully installed.${default}"
    echo -e "${info}Removing ${libpipeline_dir}/${libpipeline_pkg}, please do not cancel this process...${default}"
    rm -r ${libpipeline_dir}/${libpipeline_pkg} || true
  ;;
  *)
    save-error "save_final_libpipeline"
esac

# GNU Make
if [[ -z "$save_final_make" ]]; then
  save_final_make=0
fi
case $save_final_make in
  1)
  ;;
  0)
    make_dir=/sources/make
    make_pkg=$(ls $make_dir | grep .tar.gz)
    make_pkg=$(basename ${make_dir}/$make_pkg .tar.gz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${make_dir}/$make_pkg distclean || true
      ;;
      *)
        make -C ${make_dir}/$make_pkg -j$(nproc) distclean || true
    esac
    pushd ${make_dir}/$make_pkg
      ${make_dir}/${make_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${make_dir}/$make_pkg
        chown -R TrustedInstaller ${make_dir}/$make_pkg
        pushd ${make_dir}/$make_pkg
          su TrustedInstaller -c "PATH=$PATH make check || true" || true
        popd
        make -C ${make_dir}/$make_pkg install
      ;;
      *)
        make -C ${make_dir}/$make_pkg -j$(nproc)
        chown -R TrustedInstaller ${make_dir}/$make_pkg
        pushd ${make_dir}/$make_pkg
          su TrustedInstaller -c "PATH=$PATH make -j$(nproc) check || true" || true
        popd
        make -C ${make_dir}/$make_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_make/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_make=1\n" >> $fullsavename
    echo -e "${success}GNU Make successfully installed.${default}"
    echo -e "${info}Removing ${make_dir}/${make_pkg}, please do not cancel this process...${default}"
    rm -r ${make_dir}/${make_pkg} || true
  ;;
  *)
    save-error "save_final_make"
esac

# GNU Patch
if [[ -z "$save_final_patch" ]]; then
  save_final_patch=0
fi
case $save_final_patch in
  1)
  ;;
  0)
    patch_dir=/sources/patch
    patch_pkg=$(ls $patch_dir | grep .tar.xz)
    patch_pkg=$(basename ${patch_dir}/$patch_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${patch_dir}/$patch_pkg distclean || true
      ;;
      *)
        make -C ${patch_dir}/$patch_pkg -j$(nproc) distclean || true
    esac
    pushd ${patch_dir}/$patch_pkg
      ${patch_dir}/${patch_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${patch_dir}/$patch_pkg
        make -C ${patch_dir}/$patch_pkg check || true
        make -C ${patch_dir}/$patch_pkg install
      ;;
      *)
        make -C ${patch_dir}/$patch_pkg -j$(nproc)
        make -C ${patch_dir}/$patch_pkg -j$(nproc) check || true
        make -C ${patch_dir}/$patch_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_patch/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_patch=1\n" >> $fullsavename
    echo -e "${success}GNU Patch successfully installed.${default}"
    echo -e "${info}Removing ${patch_dir}/${patch_pkg}, please do not cancel this process...${default}"
    rm -r ${patch_dir}/${patch_pkg} || true
  ;;
  *)
    save_error "save_final_patch"
esac

# GNU Tar
if [[ -z "$save_final_tar" ]]; then
  save_final_tar=0
fi
case $save_final_tar in
  1)
  ;;
  0)
    tar_dir=/sources/tar
    tar_pkg=$(ls $tar_dir | grep .tar.xz)
    tar_pkg=$(basename ${tar_dir}/$tar_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${tar_dir}/$tar_pkg distclean || true
      ;;
      *)
        make -C ${tar_dir}/$tar_pkg -j$(nproc) distclean || true
    esac
    pushd ${tar_dir}/$tar_pkg
      FORCE_UNSAFE_CONFIGURE=1 \
      ${tar_dir}/${tar_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${tar_dir}/$tar_pkg
        make -C ${tar_dir}/$tar_pkg check || true
        make -C ${tar_dir}/$tar_pkg install
        make -C ${tar_dir}/${tar_pkg}/doc install-html docdir=/usr/share/doc/$tar_pkg
      ;;
      *)
        make -C ${tar_dir}/$tar_pkg       -j$(nproc)
        make -C ${tar_dir}/$tar_pkg       -j$(nproc) check || true
        make -C ${tar_dir}/$tar_pkg       -j$(nproc) install
        make -C ${tar_dir}/${tar_pkg}/doc -j$(nproc) install-html docdir=/usr/share/doc/$tar_pkg
    esac
    # Save progress
    echo "`sed '/save_final_tar/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_tar=1\n" >> $fullsavename
    echo -e "${success}GNU Tar successfully installed.${default}"
    echo -e "${info}Removing ${tar_dir}/${tar_pkg}, please do not cancel this process...${default}"
    rm -r ${tar_dir}/${tar_pkg} || true
  ;;
  *)
    save-error "save_final_tar"
esac

# GNU Texinfo documentation system
if [[ -z "$save_final_texinfo" ]]; then
  save_final_texinfo=0
fi
case $save_final_texinfo in
  1)
  ;;
  0)
    texinfo_dir=/sources/texinfo
    texinfo_pkg=$(ls $texinfo_dir | grep .tar.xz)
    texinfo_pkg=$(basename ${texinfo_dir}/$texinfo_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${texinfo_dir}/$texinfo_pkg distclean || true
      ;;
      *)
        make -C ${texinfo_dir}/$texinfo_pkg -j$(nproc) distclean || true
    esac
    pushd ${texinfo_dir}/$texinfo_pkg
      ${texinfo_dir}/${texinfo_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${texinfo_dir}/$texinfo_pkg
        make -C ${texinfo_dir}/$texinfo_pkg check || true
        make -C ${texinfo_dir}/$texinfo_pkg install
        make -C ${texinfo_dir}/$texinfo_pkg TEXMF=/usr/share/texmf install-tex
      ;;
      *)
        make -C ${texinfo_dir}/$texinfo_pkg -j$(nproc)
        make -C ${texinfo_dir}/$texinfo_pkg -j$(nproc) check || true
        make -C ${texinfo_dir}/$texinfo_pkg -j$(nproc) install
        make -C ${texinfo_dir}/$texinfo_pkg -j$(nproc) TEXMF=/usr/share/texmf install-tex
    esac
    # Save progress
    echo "`sed '/save_final_texinfo/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_texinfo=1\n" >> $fullsavename
    echo -e "${success}GNU Texinfo documentation system successfully installed.${default}"
    echo -e "${info}Removing ${texinfo_dir}/${texinfo_pkg}, please do not cancel this process...${default}"
    rm -r ${texinfo_dir}/${texinfo_pkg} || true
  ;;
  *)
    save-error "save_final_texinfo"
esac

# Vim, a powerful text editor
if [[ -z "$save_final_vim" ]]; then
  save_final_vim=0
fi
case $save_final_vim in
  1)
  ;;
  0)
    vim_dir=/sources/vim
    vim_pkg=vim90
    echo '#define SYS_VIMRC_FILE "/etc/vimrc"' >> ${vim_dir}/${vim_pkg}/src/feature.h
    pushd ${vim_dir}/$vim_pkg
      ${vim_dir}/${vim_pkg}/configure --prefix=/usr
    popd
    case $opt_one_job in
      1)
        make -C ${vim_dir}/$vim_pkg
        chown -R TrustedInstaller ${vim_dir}/$vim_pkg
        pushd ${vim_dir}/$vim_pkg
          echo -e "${info}Performing the test...${default}"
          su tester -c "TERM=xterm-256color LANG=en_US.UTF-8 make -j1 test || true" &> vim-test.log || true
        popd
        make -C ${vim_dir}/$vim_pkg install
      ;;
      *)
        make -C ${vim_dir}/$vim_pkg -j$(nproc)
        chown -R TrustedInstaller ${vim_dir}/$vim_pkg
        pushd ${vim_dir}/$vim_pkg
          echo -e "${info}Performing the test...${default}"
          su tester -c "TERM=xterm-256color LANG=en_US.UTF-8 make -j1 test || true" &> vim-test.log || true
        popd
        make -C ${vim_dir}/$vim_pkg -j$(nproc) install
    esac
    ln -sv ./vim /usr/bin/vi
    for L in /usr/share/man/{,*/}man1/vim.1; do
      ln -sv ./vim.1 $(dirname $L)/vi.1
    done
    ln -sv ../vim/vim91/doc /usr/share/doc/$vim_pkg
    cat > /etc/vimrc << "EOF"
" Begin /etc/vimrc

" Ensure defaults are set before customizing settings, not after
source $VIMRUNTIME/defaults.vim
let skip_defaults_vim=1

set nocompatible
set backspace=2
set mouse=
syntax on
if (&term == "xterm") || (&term == "putty")
  set background=dark
endif

" End /etc/vimrc
EOF
    # Save progress
    echo "`sed '/save_final_vim/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_vim=1\n" >> $fullsavename
    echo -e "${success}Vim, a powerful text editor successfully installed.${default}"
    echo -e "${info}Removing ${vim_dir}/${vim_pkg}, please do not cancel this process...${default}"
    rm -r ${vim_dir}/${vim_pkg} || true
  ;;
  *)
    save-error "save_final_vim"
esac

# MarkupSafe, an implementation of XML/HTML/XHTML Markup safe string
if [[ -z "$save_final_markupsafe" ]]; then
  save_final_markupsafe=0
fi
case $save_final_markupsafe in
  1)
  ;;
  0)
    markupsafe_dir=/sources/MarkupSafe
    markupsafe_pkg=$(ls $markupsafe_dir | grep .tar.gz)
    markupsafe_pkg=$(basename ${markupsafe_dir}/$markupsafe_pkg .tar.gz)
    pushd ${markupsafe_dir}/$markupsafe_pkg
      pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps ${markupsafe_dir}/$markupsafe_pkg
      pip3 install --no-index --no-user --find-links ${markupsafe_dir}/${markupsafe_pkg}/dist Markupsafe
    popd
    # Save progress
    echo "`sed '/save_final_markupsafe/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_markupsafe=1\n" >> $fullsavename
    echo -e "${success}MarkupSafe, an implementation of XML/HTML/XHTML Markup safe string successfully installed.${default}"
    echo -e "${info}Removing ${markupsafe_dir}/${markupsafe_pkg}, please do not cancel this process...${default}"
    rm -r ${markupsafe_dir}/${markupsafe_pkg} || true
  ;;
  *)
    save-error "save_final_markupsafe"
esac

# Jinja2, a simple templating engine for Python
if [[ -z "$save_final_jinja2" ]]; then
  save_final_jinja2=0
fi
case $save_final_jinja2 in
  1)
  ;;
  0)
    jinja2_dir=/sources/jinja2
    jinja2_pkg=$(ls $jinja2_dir | grep .tar.gz)
    jinja2_pkg=$(basename ${jinja2_dir}/$jinja2_pkg .tar.gz)
    pushd ${jinja2_dir}/$jinja2_pkg
      pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps ${jinja2_dir}/$jinja2_pkg
      pip3 install --no-index --no-user --find-links ${jinja2_dir}/${jinja2_pkg}/dist Jinja2
    popd
    # Save progress
    echo "`sed '/save_final_jinja2/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_jinja2=1\n" >> $fullsavename
    echo -e "${success}Jinja2, a simple templating engine for Python successfully installed.${default}"
    echo -e "${info}Removing ${jinja2_dir}/${jinja2_pkg}, please do not cancel this process...${default}"
    rm -r ${jinja2_dir}/${jinja2_pkg} || true
  ;;
  *)
    save-error "save_final_jinja2"
esac

# Udev (part of Systemd)
if [[ -z "$save_final_udev" ]]; then
  save_final_udev=0
fi
case $save_final_udev in
  1)
  ;;
  0)
    systemd_dir=/sources/systemd
    systemd_pkg=$(ls $systemd_dir | grep .tar.gz)
    systemd_pkg=$(basename ${systemd_dir}/$systemd_pkg .tar.gz)
    sed -i -e 's/GROUP="render"/GROUP="video"/' \
           -e 's/GROUP="sgx", //'          ${systemd_dir}/${systemd_pkg}/rules.d/50-udev-default.rules.in
    sed '/systemd-sysctl/s/^/#/'        -i ${systemd_dir}/${systemd_pkg}/rules.d/99-systemd.rules.in
    sed '/NETWORK_DIRS/s/systemd/udev/' -i ${systemd_dir}/${systemd_pkg}/src/basic/path-lookup.h
    mkdir -v ${systemd_dir}/${systemd_pkg}/build
    pushd ${systemd_dir}/${systemd_pkg}/build
      meson setup --prefix=/usr                 \
                  --buildtype=release           \
                  -Dmode=release                \
                  -Ddev-kvm-mode=0660           \
                  -Dlink-udev-shared=false      \
                  -Dlogind=false                \
                  -Dvconsole=false              \
                  ${systemd_dir}/$systemd_pkg
      export udev_helpers=$(grep "'name' :" ${systemd_dir}/${systemd_pkg}/src/udev/meson.build | \
                            awk '{print $3}' | tr -d ",'" | grep -v 'udevadm')
      ninja udevadm systemd-hwdb                                                                                     \
        $(ninja -n | grep -Eo '(src/(lib)?udev|rules.d|hwdb.d)/[^ ]*')                                               \
        $(realpath ${systemd_dir}/${systemd_pkg}/build/libudev.so --relative-to ${systemd_dir}/${systemd_pkg}/build) \
        $udev_helpers
      install -vm755 -d {/usr/lib,/etc}/udev/{hwdb.d,rules.d,network}
      install -vm755 -d /usr/{lib,share}/pkgconfig
      install -vm755 udevadm                             /usr/bin/
      install -vm755 systemd-hwdb                        /usr/bin/udev-hwdb
      ln      -svfn  ../bin/udevadm                      /usr/sbin/udevd
      cp      -av    libudev.so{,*[0-9]}                 /usr/lib/
      install -vm644 ../src/libudev/libudev.h            /usr/include/
      install -vm644 src/libudev/*.pc                    /usr/lib/pkgconfig/
      install -vm644 src/udev/*.pc                       /usr/share/pkgconfig/
      install -vm644 ../src/udev/udev.conf               /etc/udev/
      install -vm644 rules.d/* ../rules.d/README         /usr/lib/udev/rules.d/
      install -vm644 $(find ../rules.d/*.rules \
                      -not -name '*power-switch*')       /usr/lib/udev/rules.d/
      install -vm644 hwdb.d/*  ../hwdb.d/{*.hwdb,README} /usr/lib/udev/hwdb.d/
      install -vm755 $udev_helpers                       /usr/lib/udev
      install -vm644 ../network/99-default.link          /usr/lib/udev/network
    popd
    case $opt_one_job in
      1)
        make -f ${systemd_dir}/${systemd_pkg}/udev-lfs-20230818/Makefile.lfs install
      ;;
      *)
        make -f ${systemd_dir}/${systemd_pkg}/udev-lfs-20230818/Makefile.lfs -j$(nproc) install
    esac
    unset udev_helpers
    udev-hwdb update
    # Save progress
    echo "`sed '/save_final_udev/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_udev=1\n" >> $fullsavename
    echo -e "${success}Udev, programs for dynamic creation of device nodes successfully installed.${default}"
    echo -e "${info}Removing ${systemd_dir}/${jinja2_pkg}, please do not cancel this process...${default}"
    # Move the Udev-lfs tarball out
    mv ${systemd_dir}/${systemd_pkg}/udev-lfs-20230818.tar.xz ${systemd_dir}/udev-lfs-20230818.tar.xz
    rm -r ${systemd_dir}/${systemd_pkg} || true
  ;;
  *)
    save-error "save_final_udev"
esac

# Man-DB, a 'man' implementation with Berkeley DB database
if [[ -z "$save_final_man_db" ]]; then
  save_final_man_db=0
fi
case $save_final_man_db in
  1)
  ;;
  0)
    man_db_dir=/sources/man-db
    man_db_pkg=$(ls $man_db_dir | grep .tar.xz)
    man_db_pkg=$(basename ${man_db_dir}/$man_db_pkg .tar.xz)
    pushd ${man_db_dir}/$man_db_pkg
      ${man_db_dir}/${man_db_pkg}/configure --prefix=/usr                         \
                                            --docdir=/usr/share/doc/$man_db_pkg   \
                                            --sysconfdir=/etc                     \
                                            --disable-setuid                      \
                                            --enable-cache-owner=bin              \
                                            --with-browser=/usr/bin/lynx          \
                                            --with-vgrind=/usr/bin/vgrind         \
                                            --with-grap=/usr/bin/grap             \
                                            --with-systemdtmpfilesdir=            \
                                            --with-systemdsystemunitdir=
    popd
    case $opt_one_job in
      1)
        make -C ${man_db_dir}/$man_db_pkg
        make -C ${man_db_dir}/$man_db_pkg check || true
        make -C ${man_db_dir}/$man_db_pkg install
      ;;
      *)
        make -C ${man_db_dir}/$man_db_pkg -j$(nproc)
        make -C ${man_db_dir}/$man_db_pkg -j$(nproc) check || true
        make -C ${man_db_dir}/$man_db_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_man_db/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_man_db=1\n" >> $fullsavename
    echo -e "${success}Man-DB, a 'man' implementation with Berkeley DB database successfully installed.${default}"
    echo -e "${info}Removing ${man_db_dir}/${man_db_pkg}, please do not cancel this process...${default}"
    rm -r ${man_db_dir}/${man_db_pkg} || true
  ;;
  *)
    save-error "save_final_man_db"
esac

# Procps-ng, command line utilities for browsing procfs filesystem
if [[ -z "$save_final_procps_ng" ]]; then
  save_final_procps_ng=0
fi
case $save_final_procps_ng in
  1)
  ;;
  0)
    procps_ng_dir=/sources/procps-ng
    procps_ng_pkg=$(ls $procps_ng_dir | grep .tar.xz)
    procps_ng_pkg=$(basename ${procps_ng_dir}/$procps_ng_pkg .tar.xz)
    pushd ${procps_ng_dir}/$procps_ng_pkg
      ${procps_ng_dir}/${procps_ng_pkg}/configure --prefix=/usr                           \
                                                  --docdir=/usr/share/doc/$procps_ng_pkg  \
                                                  --disable-static                        \
                                                  --disable-kill
    popd
    case $opt_one_job in
      1)
        make -C ${procps_ng_dir}/$procps_ng_pkg
        make -C ${procps_ng_dir}/$procps_ng_pkg -k check || true
        make -C ${procps_ng_dir}/$procps_ng_pkg install
      ;;
      *)
        make -C ${procps_ng_dir}/$procps_ng_pkg -j$(nproc)
        make -C ${procps_ng_dir}/$procps_ng_pkg -j$(nproc) -k check || true
        make -C ${procps_ng_dir}/$procps_ng_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_procps_ng/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_procps_ng=1\n" >> $fullsavename
    echo -e "${success}Procps-ng, command line utilities for browsing procfs filesystem successfully installed.${default}"
    echo -e "${info}Removing ${procps_ng_dir}/${procps_ng_pkg}, please do not cancel this process...${default}"
    rm -r ${procps_ng_dir}/${procps_ng_pkg} || true
  ;;
  *)
    save-error "save_final_procps_ng"
esac

# util-linux package
if [[ -z "$save_final_util_linux" ]]; then
  save_final_util_linux=0
fi
case $save_final_util_linux in
  1)
  ;;
  0)
    util_linux_dir=/sources/util-linux
    util_linux_pkg=$(ls $util_linux_dir | grep .tar.xz)
    util_linux_pkg=$(basename ${util_linux_dir}/$util_linux_pkg .tar.xz)
    # Clean up after previous build
    case $opt_one_job in
      1)
        make -C ${util_linux_dir}/$util_linux_pkg distclean
      ;;
      *)
        make -C ${util_linux_dir}/$util_linux_pkg -j$(nproc) distclean
    esac
    sed -i '/test_mkfds/s/^/#/' ${util_linux_dir}/${util_linux_pkg}/tests/helpers/Makemodule.am
    pushd ${util_linux_dir}/$util_linux_pkg
      ${util_linux_dir}/${util_linux_pkg}/configure --bindir=/usr/bin                     \
                                                    --libdir=/usr/lib                     \
                                                    --runstatedir=/run                    \
                                                    --sbindir=/usr/sbin                   \
                                                    --disable-chfn-chsh                   \
                                                    --disable-login                       \
                                                    --disable-nologin                     \
                                                    --disable-su                          \
                                                    --disable-setpriv                     \
                                                    --disable-runuser                     \
                                                    --disable-pylibmount                  \
                                                    --disable-static                      \
                                                    --without-python                      \
                                                    --without-systemd                     \
                                                    --without-systemdsystemunitdir        \
                                                    ADJTIME_PATH=/var/lib/hwclock/adjtime \
                                                    --docdir=/usr/share/doc/$util_linux_pkg
    popd
    case $opt_one_job in
      1)
        make -C ${util_linux_dir}/$util_linux_pkg
        chown -R TrustedInstaller ${util_linux_dir}/$util_linux_pkg
        pushd ${util_linux_dir}/$util_linux_pkg
          su tester -c "make -k check || true" || true
        popd
        make -C ${util_linux_dir}/$util_linux_pkg install
      ;;
      *)
        make -C ${util_linux_dir}/$util_linux_pkg -j$(nproc)
        chown -R TrustedInstaller ${util_linux_dir}/$util_linux_pkg
        pushd ${util_linux_dir}/$util_linux_pkg
          su tester -c "make -j$(nproc) -k check || true" || true
        popd
        make -C ${util_linux_dir}/$util_linux_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_util_linux/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_util_linux=1\n" >> $fullsavename
    echo -e "${success}util-linux package successfully installed.${default}"
    echo -e "${info}Removing ${util_linux_dir}/${util_linux_pkg}, please do not cancel this process...${default}"
    rm -r ${util_linux_dir}/${util_linux_pkg} || true
  ;;
  *)
    save-error "save_final_util_linux"
esac

# E2fsprogs, utilities for Ext* filesystems
if [[ -z "$save_final_e2fsprogs" ]]; then
  save_final_e2fsprogs=0
fi
case $save_final_e2fsprogs in
  1)
  ;;
  0)
    e2fsprogs_dir=/sources/e2fsprogs
    e2fsprogs_pkg=$(ls $e2fsprogs_dir | grep .tar.gz)
    e2fsprogs_pkg=$(basename ${e2fsprogs_dir}/$e2fsprogs_pkg .tar.gz)
    mkdir -v ${e2fsprogs_dir}/${e2fsprogs_pkg}/build
    pushd ${e2fsprogs_dir}/${e2fsprogs_pkg}/build
      ${e2fsprogs_dir}/${e2fsprogs_pkg}/configure --prefix=/usr           \
                                                  --sysconfdir=/etc       \
                                                  --enable-elf-shlibs     \
                                                  --disable-libblkid      \
                                                  --disable-libuuid       \
                                                  --disable-uuidd         \
                                                  --disable-fsck
    popd
    case $opt_one_job in
      1)
        make -C ${e2fsprogs_dir}/$e2fsprogs_pkg
        make -C ${e2fsprogs_dir}/$e2fsprogs_pkg check || true
        make -C ${e2fsprogs_dir}/$e2fsprogs_pkg install
      ;;
      *)
        make -C ${e2fsprogs_dir}/$e2fsprogs_pkg -j$(nproc)
        make -C ${e2fsprogs_dir}/$e2fsprogs_pkg -j$(nproc) check || true
        make -C ${e2fsprogs_dir}/$e2fsprogs_pkg -j$(nproc) install
    esac
    rm -fv /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a
    pushd /usr/share/info
      gunzip       -v         /usr/share/info/libext2fs.info.gz
      install-info --dir-file=/usr/share/info/dir         /usr/share/info/libext2fs.info
      makeinfo     -o         /usr/share/doc/com_err.info /usr/lib/et/com_err.texinfo
      install      -v -m644   /usr/share/doc/com_err.info /usr/share/info
      install-info --dir-file=/usr/share/info/dir         /usr/share/info/com_err.info
    popd
    sed 's/metadata_csum_seed,//' -i /etc/mke2fs.conf
    # Save progress
    echo "`sed '/save_final_e2fsprogs/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_e2fsprogs=1\n" >> $fullsavename
    echo -e "${success}E2fsprogs, utilities for Ext* filesystems successfully installed.${default}"
    echo -e "${info}Removing ${e2fsprogs_dir}/${e2fsprogs_pkg}, please do not cancel this process...${default}"
    rm -r ${e2fsprogs_dir}/${e2fsprogs_pkg} || true
  ;;
  *)
    save-error "save_final_e2fsprogs"
esac

# Sysklogd, programs for logging system messages
if [[ -z "$save_final_sysklogd" ]]; then
  save_final_sysklogd=0
fi
case $save_final_sysklogd in
  1)
  ;;
  0)
    sysklogd_dir=/sources/sysklogd
    sysklogd_pkg=$(ls $sysklogd_dir | grep .tar.gz)
    sysklogd_pkg=$(basename ${sysklogd_dir}/$sysklogd_pkg .tar.gz)
    sed -i '/Error loading kernel symbols/{n;n;d}' ${sysklogd_dir}/${sysklogd_pkg}/ksym_mod.c
    sed -i 's/union wait/int/'                     ${sysklogd_dir}/${sysklogd_pkg}/syslogd.c
    case $opt_one_job in
      1)
        make -C ${sysklogd_dir}/$sysklogd_pkg
        make -C ${sysklogd_dir}/$sysklogd_pkg BINDIR=/sbin install
      ;;
      *)
        make -C ${sysklogd_dir}/$sysklogd_pkg -j$(nproc)
        make -C ${sysklogd_dir}/$sysklogd_pkg -j$(nproc) BINDIR=/sbin install
    esac
    cat > /etc/syslog.conf << "EOF"
auth,authpriv.* -/var/log/auth.log
*.*;auth,authpriv.none -/var/log/sys.log
daemon.* -/var/log/daemon.log
kern.* -/var/log/kern.log
mail.* -/var/log/mail.log
user.* -/var/log/user.log
*.emerg *

EOF
    # Save progress
    echo "`sed '/save_final_sysklogd/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_sysklogd=1\n" >> $fullsavename
    echo -e "${success}Sysklogd, programs for logging system messages successfully installed.${default}"
    echo -e "${info}Removing ${sysklogd_dir}/${sysklogd_pkg}, please do not cancel this process...${default}"
    rm -r ${sysklogd_dir}/${sysklogd_pkg} || true
  ;;
  *)
    save-error "save_final_sysklogd"
esac

# SysVinit, a classic initialization program
if [[ -z "$save_final_sysvinit" ]]; then
  save_final_sysvinit=0
fi
case $save_final_sysvinit in
  1)
  ;;
  0)
    sysvinit_dir=/sources/sysvinit
    sysvinit_pkg=$(ls $sysvinit_dir | grep .tar.xz)
    sysvinit_pkg=$(basename ${sysvinit_dir}/$sysvinit_pkg .tar.xz)
    pushd ${sysvinit_dir}/$sysvinit_pkg
      patch -Np1 -i ${sysvinit_dir}/${sysvinit_pkg}/sysvinit-3.08-consolidated-1.patch
    popd
    case $opt_one_job in
      1)
        make -C ${sysvinit_dir}/$sysvinit_pkg
        make -C ${sysvinit_dir}/$sysvinit_pkg install
      ;;
      *)
        make -C ${sysvinit_dir}/$sysvinit_pkg -j$(nproc)
        make -C ${sysvinit_dir}/$sysvinit_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_sysvinit/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_sysvinit=1\n" >> $fullsavename
    echo -e "${success}SysVinit, a classic initialization program successfully installed.${default}"
    echo -e "${info}Removing ${sysvinit_dir}/${sysvinit_pkg}, please do not cancel this process...${default}"
    rm -r ${sysvinit_dir}/${sysvinit_pkg} || true
  ;;
  *)
    save-error "save_final_sysvinit"
esac

# Pre-final clean-up
if [[ -z "$save_final_cleanup" ]]; then
  save_final_cleanup=0
fi
case $save_final_cleanup in
  1)
  ;;
  0)
    echo -e "${info}Removing .la files in /usr/lib and /usr/libexec...${default}"
    find /usr/lib /usr/libexec -name \*.la -delete || true
    echo -e "${info}Removing GCC for cross-compilation...${default}"
    find /usr -depth -name $(uname -m)-lfs-linux-gnu\* | xargs rm -rf || true
    echo -e "${info}Removing temporary user...${default}"
    userdel -r TrustedInstaller || true
    # Save progress
    echo "`sed '/save_final_cleanup/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_cleanup=1\n" >> $fullsavename
    echo -e "${success}Done cleaning up the system!${default}"
  ;;
  *)
    save-error "save_final_cleanup"
esac

# LFS-Bootscripts
if [[ -z "$save_final_lfs_bootscripts" ]]; then
  save_final_lfs_bootscripts=0
fi
case $save_final_lfs_bootscripts in
  1)
  ;;
  0)
    lfs_bootscripts_dir=/sources/lfs-bootscripts
    lfs_bootscripts_pkg=$(ls $lfs_bootscripts_dir | grep .tar.xz)
    lfs_bootscripts_pkg=$(basename ${lfs_bootscripts_dir}/$lfs_bootscripts_pkg .tar.xz)
    case $opt_one_job in
      1)
        make -C ${lfs_bootscripts_dir}/$lfs_bootscripts_pkg install
      ;;
      *)
        make -C ${lfs_bootscripts_dir}/$lfs_bootscripts_pkg -j$(nproc) install
    esac
    # Save progress
    echo "`sed '/save_final_lfs_bootscripts/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_lfs_bootscripts=1\n" >> $fullsavename
    echo -e "${success}LFS-Bootscripts successfully installed.${default}"
    echo -e "${info}Removing ${lfs_bootscripts_dir}/${lfs_bootscripts_pkg}, please do not cancel this process...${default}"
    rm -r ${lfs_bootscripts_dir}/${lfs_bootscripts_pkg} || true
  ;;
  *)
    save-error "save_final_lfs_bootscripts"
esac

# System configuration
if [[ -z "$save_final_config" ]]; then
  save_final_config=0
fi
case $save_final_config in
  1)
  ;;
  0)
    echo -e "${info}Creating /etc/hostname...${default}"
    echo "lfs" > /etc/hostname
    echo -e "${info}Creating /etc/inittab...${default}"
    echo 'id:3:initdefault:'                                >  /etc/inittab
    echo ''                                                 >> /etc/inittab
    echo 'si::sysinit:/etc/rc.d/init.d/rc S'                >> /etc/inittab
    echo ''                                                 >> /etc/inittab
    echo 'l0:0:wait:/etc/rc.d/init.d/rc 0'                  >> /etc/inittab
    echo 'l1:S1:wait:/etc/rc.d/init.d/rc 1'                 >> /etc/inittab
    echo 'l2:2:wait:/etc/rc.d/init.d/rc 2'                  >> /etc/inittab
    echo 'l3:3:wait:/etc/rc.d/init.d/rc 3'                  >> /etc/inittab
    echo 'l4:4:wait:/etc/rc.d/init.d/rc 4'                  >> /etc/inittab
    echo 'l5:5:wait:/etc/rc.d/init.d/rc 5'                  >> /etc/inittab
    echo 'l6:6:wait:/etc/rc.d/init.d/rc 6'                  >> /etc/inittab
    echo ''                                                 >> /etc/inittab
    echo 'ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now' >> /etc/inittab
    echo ''                                                 >> /etc/inittab
    echo 'su:S06:once:/sbin/sulogin'                        >> /etc/inittab
    echo 's1:1:respawn:/sbin/sulogin'                       >> /etc/inittab
    echo ''                                                 >> /etc/inittab
    echo '1:2345:respawn:/sbin/agetty --noclear tty1 9600'  >> /etc/inittab
    echo '2:2345:respawn:/sbin/agetty tty2 9600'            >> /etc/inittab
    echo '3:2345:respawn:/sbin/agetty tty3 9600'            >> /etc/inittab
    echo '4:2345:respawn:/sbin/agetty tty4 9600'            >> /etc/inittab
    echo '5:2345:respawn:/sbin/agetty tty5 9600'            >> /etc/inittab
    echo '6:2345:respawn:/sbin/agetty tty6 9600'            >> /etc/inittab
    echo -e "${info}Creating /etc/sysconfig/console...${default}"
    echo 'LOGLEVEL="8"' > /etc/sysconfig/console
    echo -e "${info}Creating /etc/sysconfig/rc.site...${default}"
    cat > /etc/sysconfig/rc.site << "EOF"
# rc.site
# Optional parameters for boot scripts.

# Distro Information
# These values, if specified here, override the defaults
DISTRO="Linux From Scratch" # The distro name
DISTRO_CONTACT="lfs-dev@lists.linuxfromscratch.org" # Bug report address
DISTRO_MINI="LFS" # Short name used in filenames for distro config

# Define custom colors used in messages printed to the screen

# Please consult `man console_codes` for more information
# under the "ECMA-48 Set Graphics Rendition" section
#
# Warning: when switching from a 8bit to a 9bit font,
# the linux console will reinterpret the bold (1;) to
# the top 256 glyphs of the 9bit font.  This does
# not affect framebuffer consoles

# These values, if specified here, override the defaults
BRACKET="\\033[1;34m" # Blue
FAILURE="\\033[1;31m" # Red
INFO="\\033[1;37m"    # White
NORMAL="\\033[0;39m"  # Grey
SUCCESS="\\033[1;36m" # Cyan
WARNING="\\033[1;33m" # Yellow

# Use a colored prefix
# These values, if specified here, override the defaults
#BMPREFIX="      "
#SUCCESS_PREFIX="${SUCCESS}  *  ${NORMAL} "
#FAILURE_PREFIX="${FAILURE}*****${NORMAL} "
#WARNING_PREFIX="${WARNING} *** ${NORMAL} "

# Manually set the right edge of message output (characters)
# Useful when resetting console font during boot to override
# automatic screen width detection
#COLUMNS=120

# Interactive startup
IPROMPT="yes" # Whether to display the interactive boot prompt
itime="5"    # The amount of time (in seconds) to display the prompt

# The total length of the distro welcome string, without escape codes
wlen=$(echo "Welcome to ${DISTRO}" | wc -c )
welcome_message="Welcome to ${INFO}${DISTRO}${NORMAL}"

# The total length of the interactive string, without escape codes
ilen=$(echo "Press 'I' to enter interactive startup" | wc -c )
i_message="Press '${INFO}I${NORMAL}' to enter interactive startup"

# Set scripts to skip the file system check on reboot
#FASTBOOT=yes

# Skip reading from the console
#HEADLESS=yes

# Write out fsck progress if yes
VERBOSE_FSCK=yes

# Speed up boot without waiting for settle in udev
#OMIT_UDEV_SETTLE=y

# Speed up boot without waiting for settle in udev_retry
#OMIT_UDEV_RETRY_SETTLE=yes

# Skip cleaning /tmp if yes
#SKIPTMPCLEAN=no

# For setclock
#UTC=1
#CLOCKPARAMS=

# For consolelog (Note that the default, 7=debug, is noisy)
LOGLEVEL=8

# For network
#HOSTNAME=mylfs

# Delay between TERM and KILL signals at shutdown
#KILLDELAY=3

# Optional sysklogd parameters
#SYSKLOGD_PARMS="-m 0"

# Console parameters
#UNICODE=1
#KEYMAP="de-latin1"
#KEYMAP_CORRECTIONS="euro2"
#FONT="lat0-16 -m 8859-15"
#LEGACY_CHARSET=
EOF
    echo -e "${info}Creating /etc/inputrc...${default}"
    cat > /etc/inputrc << "EOF"
# Allow the command prompt to wrap to the next line
set horizontal-scroll-mode Off

# Enable 8-bit input
set meta-flag On
set input-meta On

# Turns off 8th bit stripping
set convert-meta Off

# Keep the 8th bit for display
set output-meta On

# none, visible or audible
set bell-style none

# All of the following map the escape sequence of the value
# contained in the 1st argument to the readline specific functions
"\eOd": backward-word
"\eOc": forward-word

# for linux console
"\e[1~": beginning-of-line
"\e[4~": end-of-line
"\e[5~": beginning-of-history
"\e[6~": end-of-history
"\e[3~": delete-char
"\e[2~": quoted-insert

# for xterm
"\eOH": beginning-of-line
"\eOF": end-of-line

# for Konsole
"\e[H": beginning-of-line
"\e[F": end-of-line
EOF
    echo -e "${info}Creating /etc/shells...${default}"
    echo '/bin/sh'   >  /etc/shells
    echo '/bin/bash' >> /etc/shells
    echo -e "${info}Creating /etc/fstab...${default}"
    echo '# file system  mount-point    type     options             dump  fsck'        >  /etc/fstab
    echo '#                                                                order'       >> /etc/fstab
    echo ''                                                                             >> /etc/fstab
    echo "/dev/${savedevice}3      /boot          fat32    defaults            1     2" >> /etc/fstab
    echo "/dev/${savedevice}2      /              ext4     defaults            1     1" >> /etc/fstab
    echo "/dev/${savedevice}1      swap           swap     pri=1               0     0" >> /etc/fstab
    echo "proc           /proc          proc     nosuid,noexec,nodev 0     0"           >> /etc/fstab
    echo "sysfs          /sys           sysfs    nosuid,noexec,nodev 0     0"           >> /etc/fstab
    echo "devpts         /dev/pts       devpts   gid=5,mode=620      0     0"           >> /etc/fstab
    echo "tmpfs          /run           tmpfs    defaults            0     0"           >> /etc/fstab
    echo "devtmpfs       /dev           devtmpfs mode=0755,nosuid    0     0"           >> /etc/fstab
    echo "tmpfs          /dev/shm       tmpfs    nosuid,nodev        0     0"           >> /etc/fstab
    echo "cgroup2        /sys/fs/cgroup cgroup2  nosuid,noexec,nodev 0     0"           >> /etc/fstab
    # Save progress
    echo "`sed '/save_final_config/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_config=1\n" >> $fullsavename
    echo -e "${success}System successfully configured.${default}"
  ;;
  *)
    save-error "save_final_config"
esac

# Linux kernel
if [[ -z "$save_final_linux" ]]; then
  save_final_linux=0
fi
case $save_final_linux in
  1)
  ;;
  0)
    linux_dir=/sources/linux
    linux_pkg=$(ls $linux_dir | grep .tar.xz)
    linux_pkg=$(basename ${linux_dir}/$linux_pkg .tar.xz)
    case $opt_one_job in
      1)
        make -C ${linux_dir}/$linux_pkg mrproper
        echo -e "${info}Creating configuration file...${default}"
        make -C ${linux_dir}/$linux_pkg defconfig
      ;;
      *)
        make -C ${linux_dir}/$linux_pkg -j$(nproc) mrproper
        echo -e "${info}Creating configuration file...${default}"
        make -C ${linux_dir}/$linux_pkg -j$(nproc) defconfig
    esac
    # Edit features (and their dependencies) required by LFS
    sed '/CONFIG_WERROR/                   c\CONFIG_WERROR=n'                -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_PSI/                      c\CONFIG_PSI=y'                   -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_KERNFS/                   c\CONFIG_KERNFS=y'                -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_PSI_DEFAULT_DISABLED/     c\CONFIG_PSI_DEFAULT_DISABLED=n'  -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_IKHEADERS/                c\CONFIG_IKHEADERS=n'             -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_CGROUPS/                  c\CONFIG_CGROUPS=y'               -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_MEMCG/                    c\CONFIG_MEMCG=y'                 -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_PAGE_COUNTER/             c\CONFIG_PAGE_COUNTER=y'          -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_EVENTFD/                  c\CONFIG_EVENTFD=y'               -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_EXPERT/                   c\CONFIG_EXPERT=n'                -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_RELOCATABLE/              c\CONFIG_RELOCATABLE=y'           -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_RANDOMIZE_BASE/           c\CONFIG_RANDOMIZE_BASE=y'        -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_STACKPROTECTOR/           c\CONFIG_STACKPROTECTOR=y'        -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_STACKPROTECTOR_STRONG/    c\CONFIG_STACKPROTECTOR_STRONG=y' -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_UEVENT_HELPER/            c\CONFIG_UEVENT_HELPER=n'         -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_DEVTMPFS/                 c\CONFIG_DEVTMPFS=y'              -i ${linux_dir}/$linux_pkg/.config
    sed '/CONFIG_DEVTMPFS_MOUNT/           c\CONFIG_DEVTMPFS_MOUNT=y'        -i ${linux_dir}/$linux_pkg/.config
    echo -e "${warning}Warning: Direct Rendering Manager will not be built.${default}"
    case $(uname -m) in
      x86_64)
        sed '/CONFIG_X86_X2APIC/           c\CONFIG_X86_X2APIC=y'            -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_PCI/                  c\CONFIG_PCI=y'                   -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_PCI_MSI/              c\CONFIG_PCI_MSI=y'               -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_GENERIC_MSI_IRQ/      c\CONFIG_GENERIC_MSI_IRQ=y'       -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_IRQ_DOMAIN_HIERARCHY/ c\CONFIG_IRQ_DOMAIN_HIERARCHY=y'  -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_IRQ_DOMAIN/           c\CONFIG_IRQ_DOMAIN=y'            -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_IOMMU_SUPPORT/        c\CONFIG_IOMMU_SUPPORT=y'         -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_IRQ_REMAP/            c\CONFIG_IRQ_REMAP=y'             -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_DMAR_TABLE/           c\CONFIG_DMAR_TABLE=y'            -i ${linux_dir}/$linux_pkg/.config
      ;;
      x86)
        sed '/CONFIG_HIGHMEM64G/           c\CONFIG_HIGHMEM64G=y'            -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_X86_PAE/              c\CONFIG_X86_PAE=y'               -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_PHYS_ADDR_T_64BIT/    c\CONFIG_PHYS_ADDR_T_64BIT=y'     -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_SWIOTLB/              c\CONFIG_SWIOTLB=y'               -i ${linux_dir}/$linux_pkg/.config
        sed '/CONFIG_NEED_DMA_MAP_STATE/   c\CONFIG_NEED_DMA_MAP_STATE=y'    -i ${linux_dir}/$linux_pkg/.config
    esac
    sed '/CONFIG_BLK_DEV_NVME/             c\CONFIG_BLK_DEV_NVME=y'          -i ${linux_dir}/$linux_pkg/.config
    case $opt_one_job in
      1)
        make -C ${linux_dir}/$linux_pkg
        make -C ${linux_dir}/$linux_pkg modules_install
      ;;
      *)
        make -C ${linux_dir}/$linux_pkg -j$(nproc)
        make -C ${linux_dir}/$linux_pkg -j$(nproc) modules_install
    esac
    mount /boot
    cp -iv ${linux_dir}/${linux_pkg}/arch/x86/boot/bzImage /boot/vmlinuz-${linux_pkg#linux-}-lfs-12.1
    cp -iv ${linux_dir}/${linux_pkg}/System.map            /boot/System.map-${linux_pkg#linux-}
    cp -iv ${linux_dir}/${linux_pkg}/.config               /boot/config-${linux_pkg#linux-}
    cp -rv ${linux_dir}/${linux_pkg}/Documentation -T      /usr/share/doc/$linux_pkg
    install -v -m755 -d /etc/modprobe.d
    echo -e "${info}Creating /etc/modprobe.d/usb.conf...${default}"
    echo 'install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true' >  /etc/modprobe.d/usb.conf
    echo 'install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true' >> /etc/modprobe.d/usb.conf
    # Save progress
    echo "`sed '/save_final_linux/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_linux=1\n" >> $fullsavename
    echo -e "${success}Linux kernel successfully installed.${default}"
  ;;
  *)
    save-error "save_final_linux"
esac

# Making the system bootable
if [[ -z "$save_final_boot" ]]; then
  save_final_boot=0
fi
case $save_final_boot in
  1)
  ;;
  0)
    # For identifying Linux version
    linux_dir=/sources/linux
    linux_pkg=$(ls $linux_dir | grep .tar.xz)
    linux_pkg=$(basename ${linux_dir}/$linux_pkg .tar.xz)
    grub-install ${savedevice}3
    echo -e "${info}Creating /boot/grub/grub.cfg...${default}"
    echo 'set default=0'                                                                >  /boot/grub/grub.cfg
    echo 'set timeout=5'                                                                >> /boot/grub/grub.cfg
    echo ''                                                                             >> /boot/grub/grub.cfg
    echo 'insmod part_gpt'                                                              >> /boot/grub/grub.cfg
    echo 'insmod ext2'                                                                  >> /boot/grub/grub.cfg
    echo 'set root=(hd0,3)'                                                             >> /boot/grub/grub.cfg
    echo ''                                                                             >> /boot/grub/grub.cfg
    echo "menuentry \"GNU/Linux, Linux ${linux_pkg#linux-}-lfs-12.1\" {"                >> /boot/grub/grub.cfg
    echo "        linux   /vmlinuz-${linux_pkg#linux-}-lfs-12.1 root=${savedevice}2 ro" >> /boot/grub/grub.cfg
    echo '}'                                                                            >> /boot/grub/grub.cfg
    # Save progress
    echo "`sed '/save_final_boot/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_boot=1\n" >> $fullsavename
    echo -e "${success}Done making the system bootable.${default}"
  ;;
  *)
    save-error "save_final_boot"
esac

if [[ -z "$save_final_finish" ]]; then
  save_final_finish=0
fi
case $save_final_finish in
  1)
  ;;
  0)
    echo -e "${info}Creating /etc/lfs-release...${default}"
    echo '12.1' > /etc/lfs-release
    echo -e "${info}Creating /etc/lsb-release...${default}"
    echo 'DISTRIB_ID="Linux From Scratch"'                                          >  /etc/lsb-release
    echo 'DISTRIB_RELEASE="12.1"'                                                   >> /etc/lsb-release
    echo 'DISTRIB_CODENAME="linuxhome-development"'                                 >> /etc/lsb-release
    echo 'DISTRIB_DESCRIPTION="Linux From Scratch for LinuxHome early development"' >> /etc/lsb-release
    echo -e "${info}Creating /etc/os-release...${default}"
    echo 'NAME="Linux From Scratch"'                        >  /etc/os-release
    echo 'VERSION="12.1"'                                   >> /etc/os-release
    echo 'ID=lfs'                                           >> /etc/os-release
    echo 'PRETTY_NAME="Linux From Scratch 12.1"'            >> /etc/os-release
    echo 'VERSION_CODENAME="linuxhome-development"'         >> /etc/os-release
    echo 'HOME_URL="https://www.linuxfromscratch.org/lfs/"' >> /etc/os-release
    echo -e "${success}Congratulations! The system has finally been installed!${default}"
    rm_source_dir_func() {
      read -p "Would you like to remove the /sources directory (Y/n)?" rm_source_dir
      if [[ -z "$rm_source_dir" ]]; then
        rm_source_dir=y
      case $rm_source_dir in
        [Yy])
          rm -rv /sources || true
        ;;
        [Nn])
        ;;
        *)
          rm_source_dir_func
      esac
    }
    rm_source_dir_func
    # Save progress
    echo "`sed '/save_final_finish/d'  $fullsavename`" > $fullsavename
    echo -e "save_final_finish=1\n" >> $fullsavename
    if [ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]; then
      echo -e "${info}You would like to log out of the chroot environment, power off,"
      echo -e "remove the installation image, and boot the Linux From Scratch system now.${default}"
      echo    "Issue the following to power off the installation image:"
      echo    "logout"
      echo -e "systemctl poweroff${default}"
      exit 0
    fi
  ;;
  *)
    save-error "save_final_finish"
esac